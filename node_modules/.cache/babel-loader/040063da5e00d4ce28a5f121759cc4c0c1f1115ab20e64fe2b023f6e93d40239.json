{"ast":null,"code":"var _jsxFileName = \"/Users/davidhelmers/arrestpro/src/components/Buttons/VentilationButton.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Syringe } from 'lucide-react';\nimport { useAppState } from '../../context/AppStateContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EpinephrineButton = () => {\n  _s();\n  const {\n    epiActive,\n    epiTime,\n    epiCycles,\n    epiFlashing,\n    handleEpinephrineClick,\n    COLORS\n  } = useAppState();\n\n  // State for progress bar width\n  const [progressWidth, setProgressWidth] = useState(0);\n  // State for manual flashing\n  const [isVisible, setIsVisible] = useState(true);\n\n  // Constants for epinephrine timing\n  const FULL_COLOR_TIME = 290; // 4:50 in seconds\n\n  // Update progress width based on current time\n  useEffect(() => {\n    if (epiActive) {\n      if (epiTime <= FULL_COLOR_TIME) {\n        // Calculate progress percentage based on time elapsed (0 to 290 seconds)\n        const progressPercentage = epiTime / FULL_COLOR_TIME * 100;\n        setProgressWidth(Math.min(progressPercentage, 100));\n      } else {\n        // After 4:50, keep at 100%\n        setProgressWidth(100);\n      }\n    } else {\n      // Reset when not active\n      setProgressWidth(0);\n    }\n  }, [epiActive, epiTime]);\n\n  // Manual flashing effect\n  useEffect(() => {\n    if (!epiFlashing) {\n      setIsVisible(true);\n      return;\n    }\n    const flashInterval = setInterval(() => {\n      setIsVisible(prev => !prev);\n    }, 500);\n    return () => clearInterval(flashInterval);\n  }, [epiFlashing]);\n\n  // Common button styles\n  const buttonBaseStyle = {\n    border: 'none',\n    borderRadius: '8px',\n    padding: '12px',\n    cursor: 'pointer',\n    textAlign: 'left',\n    position: 'relative',\n    width: '100%',\n    height: '84px',\n    transition: 'all 0.2s ease',\n    boxShadow: '0 2px 4px rgba(0,0,0,0.2)',\n    overflow: 'hidden'\n  };\n\n  // Format the time as MM:SS\n  const formatEpiTime = () => {\n    const minutes = Math.floor(epiTime / 60);\n    const seconds = epiTime % 60;\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  };\n\n  // Get cycle display text\n  const getCycleText = () => {\n    if (!epiActive) return \"Start timer (dose 1)\";\n    if (epiCycles === 1) return \"Tap for dose 2\";\n    return `Tap for dose ${epiCycles + 1}`;\n  };\n\n  // Determine current background color based on flashing state\n  const backgroundColor = !epiActive ? COLORS.background : epiFlashing && !isVisible ? '#3af04fff' // Brighter green during flash\n  : COLORS.ventGreen;\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleEpinephrineClick,\n    style: {\n      ...buttonBaseStyle,\n      backgroundColor: backgroundColor,\n      color: epiActive ? 'white' : COLORS.ventGreen,\n      border: epiActive ? 'none' : `1px solid ${COLORS.ventGreen}`\n    },\n    children: [epiActive && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        height: '100%',\n        width: `${progressWidth}%`,\n        backgroundColor: epiFlashing && !isVisible ? '#3af04fff' : COLORS.ventGreen,\n        transition: 'width 1s linear',\n        zIndex: 1\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'center',\n        height: '100%',\n        position: 'relative',\n        zIndex: 2 // Ensure content stays above the progress bar\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginRight: '15px',\n          display: 'flex',\n          alignItems: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Syringe, {\n          size: 42\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '18px',\n            fontWeight: 'bold',\n            marginBottom: '2px'\n          },\n          children: \"Epinephrine\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '14px',\n            fontWeight: 'bold',\n            opacity: 0.9\n          },\n          children: getCycleText()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), epiActive && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '14px',\n            fontWeight: 'bold',\n            opacity: 0.9\n          },\n          children: [\"current dose: \", epiCycles]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), epiActive && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        right: '12px',\n        top: '50%',\n        transform: 'translateY(-50%)',\n        fontSize: '22px',\n        fontWeight: 'bold',\n        zIndex: 2 // Ensure timer stays above the progress bar\n      },\n      children: formatEpiTime()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(EpinephrineButton, \"rSeFDuVg0P1ma2kaks/Gi42V/bc=\", false, function () {\n  return [useAppState];\n});\n_c = EpinephrineButton;\nexport default EpinephrineButton;\nvar _c;\n$RefreshReg$(_c, \"EpinephrineButton\");","map":{"version":3,"names":["React","useState","useEffect","Syringe","useAppState","jsxDEV","_jsxDEV","EpinephrineButton","_s","epiActive","epiTime","epiCycles","epiFlashing","handleEpinephrineClick","COLORS","progressWidth","setProgressWidth","isVisible","setIsVisible","FULL_COLOR_TIME","progressPercentage","Math","min","flashInterval","setInterval","prev","clearInterval","buttonBaseStyle","border","borderRadius","padding","cursor","textAlign","position","width","height","transition","boxShadow","overflow","formatEpiTime","minutes","floor","seconds","toString","padStart","getCycleText","backgroundColor","background","ventGreen","onClick","style","color","children","top","left","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","display","alignItems","marginRight","size","fontSize","fontWeight","marginBottom","opacity","right","transform","_c","$RefreshReg$"],"sources":["/Users/davidhelmers/arrestpro/src/components/Buttons/VentilationButton.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Syringe } from 'lucide-react';\nimport { useAppState } from '../../context/AppStateContext';\n\nconst EpinephrineButton = () => {\n  const { \n    epiActive, \n    epiTime,\n    epiCycles,\n    epiFlashing,\n    handleEpinephrineClick, \n    COLORS \n  } = useAppState();\n\n  // State for progress bar width\n  const [progressWidth, setProgressWidth] = useState(0);\n  // State for manual flashing\n  const [isVisible, setIsVisible] = useState(true);\n  \n  // Constants for epinephrine timing\n  const FULL_COLOR_TIME = 290; // 4:50 in seconds\n\n  // Update progress width based on current time\n  useEffect(() => {\n    if (epiActive) {\n      if (epiTime <= FULL_COLOR_TIME) {\n        // Calculate progress percentage based on time elapsed (0 to 290 seconds)\n        const progressPercentage = (epiTime / FULL_COLOR_TIME) * 100;\n        setProgressWidth(Math.min(progressPercentage, 100));\n      } else {\n        // After 4:50, keep at 100%\n        setProgressWidth(100);\n      }\n    } else {\n      // Reset when not active\n      setProgressWidth(0);\n    }\n  }, [epiActive, epiTime]);\n\n  // Manual flashing effect\n  useEffect(() => {\n    if (!epiFlashing) {\n      setIsVisible(true);\n      return;\n    }\n    \n    const flashInterval = setInterval(() => {\n      setIsVisible(prev => !prev);\n    }, 500);\n    \n    return () => clearInterval(flashInterval);\n  }, [epiFlashing]);\n\n  // Common button styles\n  const buttonBaseStyle = {\n    border: 'none',\n    borderRadius: '8px',\n    padding: '12px',\n    cursor: 'pointer',\n    textAlign: 'left',\n    position: 'relative',\n    width: '100%',\n    height: '84px',\n    transition: 'all 0.2s ease',\n    boxShadow: '0 2px 4px rgba(0,0,0,0.2)',\n    overflow: 'hidden',\n  };\n\n  // Format the time as MM:SS\n  const formatEpiTime = () => {\n    const minutes = Math.floor(epiTime / 60);\n    const seconds = epiTime % 60;\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  };\n\n  // Get cycle display text\n  const getCycleText = () => {\n    if (!epiActive) return \"Start timer (dose 1)\";\n    if (epiCycles === 1) return \"Tap for dose 2\";\n    return `Tap for dose ${epiCycles + 1}`;\n  };\n\n  // Determine current background color based on flashing state\n  const backgroundColor = !epiActive \n    ? COLORS.background \n    : (epiFlashing && !isVisible) \n      ? '#3af04fff' // Brighter green during flash\n      : COLORS.ventGreen;\n\n  return (\n    <button\n      onClick={handleEpinephrineClick}\n      style={{\n        ...buttonBaseStyle,\n        backgroundColor: backgroundColor,\n        color: epiActive ? 'white' : COLORS.ventGreen,\n        border: epiActive ? 'none' : `1px solid ${COLORS.ventGreen}`,\n      }}\n    >\n      {/* Progress bar */}\n      {epiActive && (\n        <div \n          style={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            height: '100%',\n            width: `${progressWidth}%`,\n            backgroundColor: (epiFlashing && !isVisible) ? '#3af04fff' : COLORS.ventGreen,\n            transition: 'width 1s linear',\n            zIndex: 1\n          }}\n        />\n      )}\n      \n      {/* Button content - positioned above the progress bar */}\n      <div style={{ \n        display: 'flex', \n        alignItems: 'center', \n        height: '100%',\n        position: 'relative',\n        zIndex: 2, // Ensure content stays above the progress bar\n      }}>\n        <div style={{ marginRight: '15px', display: 'flex', alignItems: 'center' }}>\n          <Syringe size={42} />\n        </div>\n        <div>\n          <div style={{ fontSize: '18px', fontWeight: 'bold', marginBottom: '2px' }}>\n            Epinephrine\n          </div>\n          <div style={{ fontSize: '14px', fontWeight: 'bold', opacity: 0.9 }}>\n            {getCycleText()}\n          </div>\n          {epiActive && \n            <div style={{ fontSize: '14px', fontWeight: 'bold', opacity: 0.9 }}>\n              current dose: {epiCycles}\n            </div>\n          }\n        </div>\n      </div>\n      \n      {epiActive && (\n        <div style={{ \n          position: 'absolute',\n          right: '12px',\n          top: '50%',\n          transform: 'translateY(-50%)',\n          fontSize: '22px',\n          fontWeight: 'bold',\n          zIndex: 2 // Ensure timer stays above the progress bar\n        }}>\n          {formatEpiTime()}\n        </div>\n      )}\n    </button>\n  );\n};\n\nexport default EpinephrineButton;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}