{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useRef, useCallback, useEffect } from 'react';\nimport { Capacitor } from '@capacitor/core';\nimport { NativeAudio } from '@capacitor-community/native-audio';\nconst CLICK_VOLUME = 0.5;\nconst VOICE_VOLUME = 1.0;\nconst useNativeAudio = () => {\n  _s();\n  const initialized = useRef(false);\n  const audioMap = useRef({});\n  const isNative = Capacitor.isNativePlatform();\n  const isIOS = Capacitor.getPlatform() === 'ios';\n\n  // 🎯 ADD: Web AudioContext for better timing (only for metronome)\n  const audioContext = useRef(null);\n  const clickBuffer = useRef(null);\n  const initAudio = useCallback(async (id, src, poolSize = 1) => {\n    if (audioMap.current[id]) return;\n    try {\n      if (isNative) {\n        const assetId = id;\n        const volume = src.includes('click.mp3') ? CLICK_VOLUME : VOICE_VOLUME;\n        await NativeAudio.preload({\n          assetId,\n          assetPath: src,\n          volume,\n          isUrl: false\n        });\n        audioMap.current[id] = {\n          id: assetId,\n          native: true,\n          volume\n        };\n      } else {\n        if (!audioContext.current) {\n          audioContext.current = new (window.AudioContext || window.webkitAudioContext)();\n        }\n\n        // 🎯 Use AudioContext for these IDs\n        const useContextIds = ['chargeMonitor', '1', '2', '3', '4', '5'];\n        if (useContextIds.includes(id)) {\n          const response = await fetch(src);\n          const arrayBuffer = await response.arrayBuffer();\n          const decodedBuffer = await audioContext.current.decodeAudioData(arrayBuffer);\n          audioMap.current[id] = {\n            buffer: decodedBuffer,\n            volume: VOICE_VOLUME,\n            useContext: true\n          };\n        } else if (id === 'metronome') {\n          // metronome already handled via AudioContext\n          const response = await fetch(src);\n          const arrayBuffer = await response.arrayBuffer();\n          const decodedBuffer = await audioContext.current.decodeAudioData(arrayBuffer);\n          clickBuffer.current = decodedBuffer;\n          audioMap.current[id] = {\n            buffer: decodedBuffer,\n            volume: CLICK_VOLUME,\n            useContext: true\n          };\n        } else {\n          // default fallback to <audio> tag pooling\n          const audioPool = Array(poolSize).fill(null).map(() => {\n            const audio = new Audio(src);\n            audio.preload = 'auto';\n            audio.volume = VOICE_VOLUME;\n            return audio;\n          });\n          audioMap.current[id] = {\n            pool: audioPool,\n            currentIndex: 0,\n            native: false,\n            volume: VOICE_VOLUME\n          };\n        }\n      }\n    } catch (error) {\n      console.error(`Failed to initialize audio: ${id}`, error);\n    }\n  }, [isNative]);\n  const playSound = useCallback(async id => {\n    const audio = audioMap.current[id];\n    if (!audio) {\n      console.warn(`Audio not found: ${id}`);\n      return null;\n    }\n    try {\n      if (audio.native) {\n        await NativeAudio.play({\n          assetId: audio.id,\n          time: 0\n        });\n        return {\n          id: audio.id\n        };\n      } else if (audio.useContext && audio.buffer && audioContext.current) {\n        const source = audioContext.current.createBufferSource();\n        source.buffer = audio.buffer;\n        const gainNode = audioContext.current.createGain();\n        gainNode.gain.value = audio.volume || 1.0;\n        source.connect(gainNode).connect(audioContext.current.destination);\n        source.start(0);\n        console.log(`✅ Played from buffer: ${id}`);\n        return source;\n      } else {\n        const pool = audio.pool;\n        const currentIndex = audio.currentIndex;\n        const element = pool[currentIndex];\n        if (!element.paused) {\n          element.pause();\n          element.currentTime = 0;\n        }\n        element.play().catch(e => console.warn('Audio play prevented:', e));\n        audio.currentIndex = (currentIndex + 1) % pool.length;\n        return element;\n      }\n    } catch (error) {\n      console.error(`Failed to play sound: ${id}`, error);\n      return null;\n    }\n  }, []);\n  const stopSound = useCallback(async id => {\n    const audio = audioMap.current[id];\n    if (!audio) return;\n    try {\n      if (audio.native) {\n        await NativeAudio.stop({\n          assetId: audio.id\n        });\n      } else {\n        if (id === 'metronome') {\n          // Nothing to stop for AudioContext click\n          return;\n        }\n        audio.pool.forEach(element => {\n          element.pause();\n          element.currentTime = 0;\n        });\n      }\n    } catch (error) {\n      console.error(`Failed to stop sound: ${id}`, error);\n    }\n  }, []);\n  const setVolume = useCallback(async (id, volume) => {\n    const audio = audioMap.current[id];\n    if (!audio) return;\n    try {\n      if (audio.native) {\n        await NativeAudio.setVolume({\n          assetId: audio.id,\n          volume\n        });\n        audio.volume = volume;\n      } else {\n        if (id !== 'metronome') {\n          audio.pool.forEach(element => {\n            element.volume = volume;\n          });\n          audio.volume = volume;\n        }\n      }\n    } catch (error) {\n      console.error(`Failed to set volume for ${id}`, error);\n    }\n  }, []);\n  const unlockAudio = useCallback(() => {\n    if (isNative) {\n      console.log('Audio unlocking not needed on native platforms');\n      return;\n    }\n    console.log('Unlocking web audio...');\n    try {\n      if (audioContext.current && audioContext.current.state === 'suspended') {\n        audioContext.current.resume().then(() => {\n          console.log('AudioContext resumed successfully');\n        }).catch(e => {\n          console.warn('AudioContext resume failed', e);\n        });\n      }\n    } catch (e) {\n      console.warn('AudioContext resume error', e);\n    }\n\n    // ❌ NO MORE forced silent plays of sounds individually\n  }, [isNative]);\n  const releaseResources = useCallback(async () => {\n    try {\n      if (isNative) {\n        for (const id in audioMap.current) {\n          if (audioMap.current[id].native) {\n            await NativeAudio.unload({\n              assetId: audioMap.current[id].id\n            });\n          }\n        }\n      } else {\n        for (const id in audioMap.current) {\n          if (!audioMap.current[id].native && audioMap.current[id].pool) {\n            audioMap.current[id].pool.forEach(element => {\n              element.pause();\n              element.src = '';\n            });\n          }\n        }\n      }\n      audioMap.current = {};\n      initialized.current = false;\n      if (audioContext.current) {\n        audioContext.current.close();\n        audioContext.current = null;\n      }\n    } catch (error) {\n      console.error('Failed to release audio resources', error);\n    }\n  }, [isNative]);\n  useEffect(() => {\n    if (initialized.current) return;\n    const initializeAudio = async () => {\n      initialized.current = true;\n    };\n    initializeAudio();\n    return () => {\n      releaseResources();\n    };\n  }, [releaseResources]);\n  return {\n    initAudio,\n    playSound,\n    stopSound,\n    setVolume,\n    unlockAudio,\n    releaseResources,\n    isNative\n  };\n};\n_s(useNativeAudio, \"0HstSJbW+LyqacmycU9E6TtoRpg=\");\nexport default useNativeAudio;","map":{"version":3,"names":["useRef","useCallback","useEffect","Capacitor","NativeAudio","CLICK_VOLUME","VOICE_VOLUME","useNativeAudio","_s","initialized","audioMap","isNative","isNativePlatform","isIOS","getPlatform","audioContext","clickBuffer","initAudio","id","src","poolSize","current","assetId","volume","includes","preload","assetPath","isUrl","native","window","AudioContext","webkitAudioContext","useContextIds","response","fetch","arrayBuffer","decodedBuffer","decodeAudioData","buffer","useContext","audioPool","Array","fill","map","audio","Audio","pool","currentIndex","error","console","playSound","warn","play","time","source","createBufferSource","gainNode","createGain","gain","value","connect","destination","start","log","element","paused","pause","currentTime","catch","e","length","stopSound","stop","forEach","setVolume","unlockAudio","state","resume","then","releaseResources","unload","close","initializeAudio"],"sources":["/Users/davidhelmers/arrestpro/src/hooks/useNativeAudio.js"],"sourcesContent":["import { useRef, useCallback, useEffect } from 'react';\nimport { Capacitor } from '@capacitor/core';\nimport { NativeAudio } from '@capacitor-community/native-audio';\n\nconst CLICK_VOLUME = 0.5;\nconst VOICE_VOLUME = 1.0;\n\nconst useNativeAudio = () => {\n  const initialized = useRef(false);\n  const audioMap = useRef({});\n  \n  const isNative = Capacitor.isNativePlatform();\n  const isIOS = Capacitor.getPlatform() === 'ios';\n\n  // 🎯 ADD: Web AudioContext for better timing (only for metronome)\n  const audioContext = useRef(null);\n  const clickBuffer = useRef(null);\n\n  const initAudio = useCallback(async (id, src, poolSize = 1) => {\n    if (audioMap.current[id]) return;\n  \n    try {\n      if (isNative) {\n        const assetId = id;\n        const volume = src.includes('click.mp3') ? CLICK_VOLUME : VOICE_VOLUME;\n  \n        await NativeAudio.preload({\n          assetId,\n          assetPath: src,\n          volume,\n          isUrl: false,\n        });\n  \n        audioMap.current[id] = { id: assetId, native: true, volume };\n      } else {\n        if (!audioContext.current) {\n          audioContext.current = new (window.AudioContext || window.webkitAudioContext)();\n        }\n  \n        // 🎯 Use AudioContext for these IDs\n        const useContextIds = ['chargeMonitor', '1', '2', '3', '4', '5'];\n        if (useContextIds.includes(id)) {\n          const response = await fetch(src);\n          const arrayBuffer = await response.arrayBuffer();\n          const decodedBuffer = await audioContext.current.decodeAudioData(arrayBuffer);\n  \n          audioMap.current[id] = {\n            buffer: decodedBuffer,\n            volume: VOICE_VOLUME,\n            useContext: true,\n          };\n        } else if (id === 'metronome') {\n          // metronome already handled via AudioContext\n          const response = await fetch(src);\n          const arrayBuffer = await response.arrayBuffer();\n          const decodedBuffer = await audioContext.current.decodeAudioData(arrayBuffer);\n  \n          clickBuffer.current = decodedBuffer;\n  \n          audioMap.current[id] = {\n            buffer: decodedBuffer,\n            volume: CLICK_VOLUME,\n            useContext: true,\n          };\n          \n        } else {\n          // default fallback to <audio> tag pooling\n          const audioPool = Array(poolSize).fill(null).map(() => {\n            const audio = new Audio(src);\n            audio.preload = 'auto';\n            audio.volume = VOICE_VOLUME;\n            return audio;\n          });\n  \n          audioMap.current[id] = {\n            pool: audioPool,\n            currentIndex: 0,\n            native: false,\n            volume: VOICE_VOLUME,\n          };\n        }\n      }\n    } catch (error) {\n      console.error(`Failed to initialize audio: ${id}`, error);\n    }\n  }, [isNative]);\n  \n\n  const playSound = useCallback(async (id) => {\n    const audio = audioMap.current[id];\n    if (!audio) {\n      console.warn(`Audio not found: ${id}`);\n      return null;\n    }\n  \n    try {\n      if (audio.native) {\n        await NativeAudio.play({ assetId: audio.id, time: 0 });\n        return { id: audio.id };\n      } else if (audio.useContext && audio.buffer && audioContext.current) {\n        const source = audioContext.current.createBufferSource();\n        source.buffer = audio.buffer;\n  \n        const gainNode = audioContext.current.createGain();\n        gainNode.gain.value = audio.volume || 1.0;\n  \n        source.connect(gainNode).connect(audioContext.current.destination);\n        source.start(0);\n  \n        console.log(`✅ Played from buffer: ${id}`);\n        return source;\n      } else {\n\n\n        const pool = audio.pool;\n        const currentIndex = audio.currentIndex;\n        const element = pool[currentIndex];\n  \n        if (!element.paused) {\n          element.pause();\n          element.currentTime = 0;\n        }\n  \n        element.play().catch(e => console.warn('Audio play prevented:', e));\n        audio.currentIndex = (currentIndex + 1) % pool.length;\n  \n        return element;\n      }\n    } catch (error) {\n      console.error(`Failed to play sound: ${id}`, error);\n      return null;\n    }\n  }, []);\n  \n\n  const stopSound = useCallback(async (id) => {\n    const audio = audioMap.current[id];\n    if (!audio) return;\n\n    try {\n      if (audio.native) {\n        await NativeAudio.stop({ assetId: audio.id });\n      } else {\n        if (id === 'metronome') {\n          // Nothing to stop for AudioContext click\n          return;\n        }\n        audio.pool.forEach(element => {\n          element.pause();\n          element.currentTime = 0;\n        });\n      }\n    } catch (error) {\n      console.error(`Failed to stop sound: ${id}`, error);\n    }\n  }, []);\n\n  const setVolume = useCallback(async (id, volume) => {\n    const audio = audioMap.current[id];\n    if (!audio) return;\n\n    try {\n      if (audio.native) {\n        await NativeAudio.setVolume({ assetId: audio.id, volume });\n        audio.volume = volume;\n      } else {\n        if (id !== 'metronome') {\n          audio.pool.forEach(element => { element.volume = volume; });\n          audio.volume = volume;\n        }\n      }\n    } catch (error) {\n      console.error(`Failed to set volume for ${id}`, error);\n    }\n  }, []);\n\n  const unlockAudio = useCallback(() => {\n    if (isNative) {\n      console.log('Audio unlocking not needed on native platforms');\n      return;\n    }\n  \n    console.log('Unlocking web audio...');\n  \n    try {\n      if (audioContext.current && audioContext.current.state === 'suspended') {\n        audioContext.current.resume().then(() => {\n          console.log('AudioContext resumed successfully');\n        }).catch((e) => {\n          console.warn('AudioContext resume failed', e);\n        });\n      }\n    } catch (e) {\n      console.warn('AudioContext resume error', e);\n    }\n  \n    // ❌ NO MORE forced silent plays of sounds individually\n  }, [isNative]);\n  \n  \n  \n\n  const releaseResources = useCallback(async () => {\n    try {\n      if (isNative) {\n        for (const id in audioMap.current) {\n          if (audioMap.current[id].native) {\n            await NativeAudio.unload({ assetId: audioMap.current[id].id });\n          }\n        }\n      } else {\n        for (const id in audioMap.current) {\n          if (!audioMap.current[id].native && audioMap.current[id].pool) {\n            audioMap.current[id].pool.forEach(element => {\n              element.pause();\n              element.src = '';\n            });\n          }\n        }\n      }\n      \n      audioMap.current = {};\n      initialized.current = false;\n\n      if (audioContext.current) {\n        audioContext.current.close();\n        audioContext.current = null;\n      }\n    } catch (error) {\n      console.error('Failed to release audio resources', error);\n    }\n  }, [isNative]);\n\n  useEffect(() => {\n    if (initialized.current) return;\n\n    const initializeAudio = async () => {\n      initialized.current = true;\n    };\n\n    initializeAudio();\n    return () => { releaseResources(); };\n  }, [releaseResources]);\n\n  return {\n    initAudio,\n    playSound,\n    stopSound,\n    setVolume,\n    unlockAudio,\n    releaseResources,\n    isNative,\n  };\n};\n\nexport default useNativeAudio;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}