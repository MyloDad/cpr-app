{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useRef, useCallback, useEffect } from 'react';\nimport { Capacitor } from '@capacitor/core';\nimport { NativeAudio } from '@capacitor-community/native-audio';\n\n// Constants\nconst CLICK_VOLUME = 0.5;\nconst VOICE_VOLUME = 1.0;\nconst useNativeAudio = () => {\n  _s();\n  const initialized = useRef(false);\n  const audioMap = useRef({});\n\n  // Check if running on native platform\n  const isNative = Capacitor.isNativePlatform();\n  const isIOS = Capacitor.getPlatform() === 'ios';\n\n  // Initialize all audio files\n  const initAudio = useCallback(async (id, src, poolSize = 1) => {\n    if (audioMap.current[id]) return; // Already loaded\n\n    try {\n      if (isNative) {\n        // Use native audio for iOS/Android\n        // Strip directory path and file extension for asset ID\n        const assetId = id;\n\n        // Configure volume based on sound type\n        const volume = src.includes('click.mp3') ? CLICK_VOLUME : VOICE_VOLUME;\n\n        // For metronome clicks, use preload complete to ensure lowest latency\n        if (id === 'metronome') {\n          await NativeAudio.preload({\n            assetId,\n            assetPath: src,\n            volume: volume,\n            audioChannelNum: 1,\n            // Use a dedicated audio channel\n            isUrl: false\n          });\n        } else {\n          // For other sounds, standard preload is fine\n          await NativeAudio.preload({\n            assetId,\n            assetPath: src,\n            volume: volume,\n            isUrl: false\n          });\n        }\n        audioMap.current[id] = {\n          id: assetId,\n          native: true,\n          volume: volume\n        };\n        console.log(`Native audio loaded: ${id} (${src})`);\n      } else {\n        // Fallback to web audio for browser development\n        const audioPool = Array(poolSize).fill(null).map(() => {\n          const audio = new Audio(src);\n          audio.preload = 'auto';\n\n          // Set the appropriate volume\n          const volume = src.includes('click.mp3') ? CLICK_VOLUME : VOICE_VOLUME;\n          audio.volume = volume;\n          return audio;\n        });\n        audioMap.current[id] = {\n          pool: audioPool,\n          currentIndex: 0,\n          native: false,\n          volume: audioPool[0].volume\n        };\n        console.log(`Web audio pool created: ${id} (${src}), size: ${poolSize}`);\n      }\n    } catch (error) {\n      console.error(`Failed to initialize audio: ${id}`, error);\n    }\n  }, [isNative, isIOS]);\n\n  // Set volume for a specific sound\n  const setVolume = useCallback(async (id, volume) => {\n    const audio = audioMap.current[id];\n    if (!audio) return;\n    try {\n      if (audio.native) {\n        await NativeAudio.setVolume({\n          assetId: audio.id,\n          volume\n        });\n        audio.volume = volume;\n      } else {\n        // For web audio\n        audio.pool.forEach(element => {\n          element.volume = volume;\n        });\n        audio.volume = volume;\n      }\n    } catch (error) {\n      console.error(`Failed to set volume for ${id}`, error);\n    }\n  }, []);\n\n  // Play a sound\n  const playSound = useCallback(async id => {\n    const audio = audioMap.current[id];\n    if (!audio) {\n      console.warn(`Audio not found: ${id}`);\n      return null;\n    }\n    try {\n      if (audio.native) {\n        // Use native audio plugin\n        await NativeAudio.play({\n          assetId: audio.id,\n          time: 0 // Play from the beginning\n        });\n\n        // Native audio doesn't return an element, but return something for consistency\n        return {\n          id: audio.id\n        };\n      } else {\n        // Web audio fallback\n        const pool = audio.pool;\n        const currentIndex = audio.currentIndex;\n        const element = pool[currentIndex];\n\n        // Reset if playing\n        if (!element.paused) {\n          element.pause();\n          element.currentTime = 0;\n        }\n\n        // Play the sound\n        element.play().catch(e => console.warn('Audio play prevented:', e));\n\n        // Update index for next play\n        audio.currentIndex = (currentIndex + 1) % pool.length;\n        return element;\n      }\n    } catch (error) {\n      console.error(`Failed to play sound: ${id}`, error);\n      return null;\n    }\n  }, []);\n\n  // Stop a sound\n  const stopSound = useCallback(async id => {\n    const audio = audioMap.current[id];\n    if (!audio) return;\n    try {\n      if (audio.native) {\n        await NativeAudio.stop({\n          assetId: audio.id\n        });\n      } else {\n        // Web audio fallback\n        audio.pool.forEach(element => {\n          element.pause();\n          element.currentTime = 0;\n        });\n      }\n    } catch (error) {\n      console.error(`Failed to stop sound: ${id}`, error);\n    }\n  }, []);\n\n  // Unlock audio for web (not needed for native, but kept for compatibility)\n  const unlockAudio = useCallback(() => {\n    if (isNative) {\n      // Native platforms don't need audio unlocking\n      console.log('Audio unlocking not needed on native platforms');\n      return;\n    }\n    console.log('Unlocking web audio...');\n\n    // On web, create a silent sound and play it to unlock audio\n    const silentSound = new Audio();\n    silentSound.play().catch(e => console.warn('Silent sound play prevented:', e));\n\n    // Also try to play each audio once\n    Object.values(audioMap.current).forEach(audio => {\n      if (!audio.native && audio.pool && audio.pool.length > 0) {\n        const element = audio.pool[0];\n        const originalVolume = element.volume;\n        element.volume = 0;\n        element.play().then(() => {\n          element.pause();\n          element.currentTime = 0;\n          element.volume = originalVolume;\n        }).catch(e => console.warn('Audio unlock failed:', e));\n      }\n    });\n  }, [isNative]);\n\n  // Clean up all audio resources\n  const releaseResources = useCallback(async () => {\n    try {\n      if (isNative) {\n        // Unload all native audio\n        for (const id in audioMap.current) {\n          if (audioMap.current[id].native) {\n            await NativeAudio.unload({\n              assetId: audioMap.current[id].id\n            });\n          }\n        }\n      } else {\n        // Stop all web audio\n        for (const id in audioMap.current) {\n          if (!audioMap.current[id].native && audioMap.current[id].pool) {\n            audioMap.current[id].pool.forEach(element => {\n              element.pause();\n              element.src = '';\n            });\n          }\n        }\n      }\n\n      // Clear the audio map\n      audioMap.current = {};\n      initialized.current = false;\n    } catch (error) {\n      console.error('Failed to release audio resources', error);\n    }\n  }, [isNative]);\n\n  // Initialize global audio config when component mounts\n  useEffect(() => {\n    if (initialized.current) return;\n    const initializeAudio = async () => {\n      if (isNative) {\n        try {\n          // Configure native audio\n          console.log('Initializing native audio system');\n\n          // Add app state change listener to handle audio interruptions\n          if (Capacitor.getPlatform() === 'ios') {\n            // Make sure audio continues if app goes to background\n            // This would be handled in AppDelegate.swift - we'll add that code separately\n          }\n          initialized.current = true;\n        } catch (error) {\n          console.error('Failed to initialize native audio', error);\n        }\n      } else {\n        console.log('Initializing web audio system');\n        initialized.current = true;\n      }\n    };\n    initializeAudio();\n\n    // Cleanup on unmount\n    return () => {\n      releaseResources();\n    };\n  }, [isNative, releaseResources]);\n  return {\n    initAudio,\n    playSound,\n    stopSound,\n    setVolume,\n    unlockAudio,\n    releaseResources,\n    isNative\n  };\n};\n_s(useNativeAudio, \"6Nc+Sf9kuAn3mc6Qi6Pbuh22bGc=\");\nexport default useNativeAudio;","map":{"version":3,"names":["useRef","useCallback","useEffect","Capacitor","NativeAudio","CLICK_VOLUME","VOICE_VOLUME","useNativeAudio","_s","initialized","audioMap","isNative","isNativePlatform","isIOS","getPlatform","initAudio","id","src","poolSize","current","assetId","volume","includes","preload","assetPath","audioChannelNum","isUrl","native","console","log","audioPool","Array","fill","map","audio","Audio","pool","currentIndex","error","setVolume","forEach","element","playSound","warn","play","time","paused","pause","currentTime","catch","e","length","stopSound","stop","unlockAudio","silentSound","Object","values","originalVolume","then","releaseResources","unload","initializeAudio"],"sources":["/Users/davidhelmers/arrestpro/src/hooks/useNativeAudio.js"],"sourcesContent":["import { useRef, useCallback, useEffect } from 'react';\nimport { Capacitor } from '@capacitor/core';\nimport { NativeAudio } from '@capacitor-community/native-audio';\n\n// Constants\nconst CLICK_VOLUME = 0.5;\nconst VOICE_VOLUME = 1.0;\n\nconst useNativeAudio = () => {\n  const initialized = useRef(false);\n  const audioMap = useRef({});\n  \n  // Check if running on native platform\n  const isNative = Capacitor.isNativePlatform();\n  const isIOS = Capacitor.getPlatform() === 'ios';\n  \n  // Initialize all audio files\n  const initAudio = useCallback(async (id, src, poolSize = 1) => {\n    if (audioMap.current[id]) return; // Already loaded\n    \n    try {\n      if (isNative) {\n        // Use native audio for iOS/Android\n        // Strip directory path and file extension for asset ID\n        const assetId = id;\n        \n        // Configure volume based on sound type\n        const volume = src.includes('click.mp3') ? CLICK_VOLUME : VOICE_VOLUME;\n        \n        // For metronome clicks, use preload complete to ensure lowest latency\n        if (id === 'metronome') {\n          await NativeAudio.preload({\n            assetId,\n            assetPath: src,\n            volume: volume,\n            audioChannelNum: 1, // Use a dedicated audio channel\n            isUrl: false\n          });\n        } else {\n          // For other sounds, standard preload is fine\n          await NativeAudio.preload({\n            assetId,\n            assetPath: src,\n            volume: volume,\n            isUrl: false\n          });\n        }\n        \n        audioMap.current[id] = { \n          id: assetId, \n          native: true,\n          volume: volume\n        };\n        \n        console.log(`Native audio loaded: ${id} (${src})`);\n      } else {\n        // Fallback to web audio for browser development\n        const audioPool = Array(poolSize).fill(null).map(() => {\n          const audio = new Audio(src);\n          audio.preload = 'auto';\n          \n          // Set the appropriate volume\n          const volume = src.includes('click.mp3') ? CLICK_VOLUME : VOICE_VOLUME;\n          audio.volume = volume;\n          \n          return audio;\n        });\n        \n        audioMap.current[id] = { \n          pool: audioPool, \n          currentIndex: 0,\n          native: false,\n          volume: audioPool[0].volume\n        };\n        \n        console.log(`Web audio pool created: ${id} (${src}), size: ${poolSize}`);\n      }\n    } catch (error) {\n      console.error(`Failed to initialize audio: ${id}`, error);\n    }\n  }, [isNative, isIOS]);\n  \n  // Set volume for a specific sound\n  const setVolume = useCallback(async (id, volume) => {\n    const audio = audioMap.current[id];\n    if (!audio) return;\n    \n    try {\n      if (audio.native) {\n        await NativeAudio.setVolume({ \n          assetId: audio.id, \n          volume \n        });\n        audio.volume = volume;\n      } else {\n        // For web audio\n        audio.pool.forEach(element => {\n          element.volume = volume;\n        });\n        audio.volume = volume;\n      }\n    } catch (error) {\n      console.error(`Failed to set volume for ${id}`, error);\n    }\n  }, []);\n  \n  // Play a sound\n  const playSound = useCallback(async (id) => {\n    const audio = audioMap.current[id];\n    if (!audio) {\n      console.warn(`Audio not found: ${id}`);\n      return null;\n    }\n    \n    try {\n      if (audio.native) {\n        // Use native audio plugin\n        await NativeAudio.play({\n          assetId: audio.id,\n          time: 0 // Play from the beginning\n        });\n        \n        // Native audio doesn't return an element, but return something for consistency\n        return { id: audio.id };\n      } else {\n        // Web audio fallback\n        const pool = audio.pool;\n        const currentIndex = audio.currentIndex;\n        \n        const element = pool[currentIndex];\n        \n        // Reset if playing\n        if (!element.paused) {\n          element.pause();\n          element.currentTime = 0;\n        }\n        \n        // Play the sound\n        element.play().catch(e => console.warn('Audio play prevented:', e));\n        \n        // Update index for next play\n        audio.currentIndex = (currentIndex + 1) % pool.length;\n        \n        return element;\n      }\n    } catch (error) {\n      console.error(`Failed to play sound: ${id}`, error);\n      return null;\n    }\n  }, []);\n  \n  // Stop a sound\n  const stopSound = useCallback(async (id) => {\n    const audio = audioMap.current[id];\n    if (!audio) return;\n    \n    try {\n      if (audio.native) {\n        await NativeAudio.stop({\n          assetId: audio.id\n        });\n      } else {\n        // Web audio fallback\n        audio.pool.forEach(element => {\n          element.pause();\n          element.currentTime = 0;\n        });\n      }\n    } catch (error) {\n      console.error(`Failed to stop sound: ${id}`, error);\n    }\n  }, []);\n  \n  // Unlock audio for web (not needed for native, but kept for compatibility)\n  const unlockAudio = useCallback(() => {\n    if (isNative) {\n      // Native platforms don't need audio unlocking\n      console.log('Audio unlocking not needed on native platforms');\n      return;\n    }\n    \n    console.log('Unlocking web audio...');\n    \n    // On web, create a silent sound and play it to unlock audio\n    const silentSound = new Audio();\n    silentSound.play().catch(e => console.warn('Silent sound play prevented:', e));\n    \n    // Also try to play each audio once\n    Object.values(audioMap.current).forEach(audio => {\n      if (!audio.native && audio.pool && audio.pool.length > 0) {\n        const element = audio.pool[0];\n        const originalVolume = element.volume;\n        element.volume = 0;\n        element.play()\n          .then(() => {\n            element.pause();\n            element.currentTime = 0;\n            element.volume = originalVolume;\n          })\n          .catch(e => console.warn('Audio unlock failed:', e));\n      }\n    });\n  }, [isNative]);\n  \n  // Clean up all audio resources\n  const releaseResources = useCallback(async () => {\n    try {\n      if (isNative) {\n        // Unload all native audio\n        for (const id in audioMap.current) {\n          if (audioMap.current[id].native) {\n            await NativeAudio.unload({\n              assetId: audioMap.current[id].id\n            });\n          }\n        }\n      } else {\n        // Stop all web audio\n        for (const id in audioMap.current) {\n          if (!audioMap.current[id].native && audioMap.current[id].pool) {\n            audioMap.current[id].pool.forEach(element => {\n              element.pause();\n              element.src = '';\n            });\n          }\n        }\n      }\n      \n      // Clear the audio map\n      audioMap.current = {};\n      initialized.current = false;\n    } catch (error) {\n      console.error('Failed to release audio resources', error);\n    }\n  }, [isNative]);\n  \n  // Initialize global audio config when component mounts\n  useEffect(() => {\n    if (initialized.current) return;\n    \n    const initializeAudio = async () => {\n      if (isNative) {\n        try {\n          // Configure native audio\n          console.log('Initializing native audio system');\n          \n          // Add app state change listener to handle audio interruptions\n          if (Capacitor.getPlatform() === 'ios') {\n            // Make sure audio continues if app goes to background\n            // This would be handled in AppDelegate.swift - we'll add that code separately\n          }\n          \n          initialized.current = true;\n        } catch (error) {\n          console.error('Failed to initialize native audio', error);\n        }\n      } else {\n        console.log('Initializing web audio system');\n        initialized.current = true;\n      }\n    };\n    \n    initializeAudio();\n    \n    // Cleanup on unmount\n    return () => {\n      releaseResources();\n    };\n  }, [isNative, releaseResources]);\n  \n  return {\n    initAudio,\n    playSound,\n    stopSound,\n    setVolume,\n    unlockAudio,\n    releaseResources,\n    isNative\n  };\n};\n\nexport default useNativeAudio;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}