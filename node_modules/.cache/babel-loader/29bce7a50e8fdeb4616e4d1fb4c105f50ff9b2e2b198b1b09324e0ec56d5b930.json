{"ast":null,"code":"import React,{useEffect}from'react';import{useAppState}from'../context/AppStateContext';// This is a wrapper component for your existing CPRTempoApp\n// It ensures the app refreshes properly when reset happens\nimport{jsx as _jsx}from\"react/jsx-runtime\";const CPRTempoAppWrapper=_ref=>{let{children}=_ref;const{refreshTrigger,activeSection,seconds,ventilationActive,epiActive}=useAppState();// Monitor key state values and log them\nuseEffect(()=>{console.log(\"CPRTempoApp state:\",{refreshTrigger,activeSection,seconds,ventilationActive,epiActive});},[refreshTrigger,activeSection,seconds,ventilationActive,epiActive]);// Force component remount when refresh trigger changes\nuseEffect(()=>{if(refreshTrigger>0){console.log(\"Handling refresh trigger:\",refreshTrigger);// Force redraw of all components\nconst forceRedraw=()=>{document.body.style.display='none';// Trigger layout recalculation\nvoid document.body.offsetHeight;document.body.style.display='';};setTimeout(forceRedraw,0);}},[refreshTrigger]);return(/*#__PURE__*/// Set key to refreshTrigger to force remount when it changes\n_jsx(\"div\",{children:children},refreshTrigger));};export default CPRTempoAppWrapper;","map":{"version":3,"names":["React","useEffect","useAppState","jsx","_jsx","CPRTempoAppWrapper","_ref","children","refreshTrigger","activeSection","seconds","ventilationActive","epiActive","console","log","forceRedraw","document","body","style","display","offsetHeight","setTimeout"],"sources":["/Users/davidhelmers/arrestpro/src/components/CPRTempoAppWrapper.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useAppState } from '../context/AppStateContext';\n\n// This is a wrapper component for your existing CPRTempoApp\n// It ensures the app refreshes properly when reset happens\nconst CPRTempoAppWrapper = ({ children }) => {\n  const { refreshTrigger, activeSection, seconds, ventilationActive, epiActive } = useAppState();\n  \n  // Monitor key state values and log them\n  useEffect(() => {\n    console.log(\"CPRTempoApp state:\", {\n      refreshTrigger,\n      activeSection,\n      seconds,\n      ventilationActive,\n      epiActive\n    });\n  }, [refreshTrigger, activeSection, seconds, ventilationActive, epiActive]);\n  \n  // Force component remount when refresh trigger changes\n  useEffect(() => {\n    if (refreshTrigger > 0) {\n      console.log(\"Handling refresh trigger:\", refreshTrigger);\n      \n      // Force redraw of all components\n      const forceRedraw = () => {\n        document.body.style.display = 'none';\n        // Trigger layout recalculation\n        void document.body.offsetHeight;\n        document.body.style.display = '';\n      };\n      \n      setTimeout(forceRedraw, 0);\n    }\n  }, [refreshTrigger]);\n  \n  return (\n    // Set key to refreshTrigger to force remount when it changes\n    <div key={refreshTrigger}>\n      {children}\n    </div>\n  );\n};\n\nexport default CPRTempoAppWrapper;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,KAAQ,OAAO,CACxC,OAASC,WAAW,KAAQ,4BAA4B,CAExD;AACA;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACA,KAAM,CAAAC,kBAAkB,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACtC,KAAM,CAAEE,cAAc,CAAEC,aAAa,CAAEC,OAAO,CAAEC,iBAAiB,CAAEC,SAAU,CAAC,CAAGV,WAAW,CAAC,CAAC,CAE9F;AACAD,SAAS,CAAC,IAAM,CACdY,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAE,CAChCN,cAAc,CACdC,aAAa,CACbC,OAAO,CACPC,iBAAiB,CACjBC,SACF,CAAC,CAAC,CACJ,CAAC,CAAE,CAACJ,cAAc,CAAEC,aAAa,CAAEC,OAAO,CAAEC,iBAAiB,CAAEC,SAAS,CAAC,CAAC,CAE1E;AACAX,SAAS,CAAC,IAAM,CACd,GAAIO,cAAc,CAAG,CAAC,CAAE,CACtBK,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAEN,cAAc,CAAC,CAExD;AACA,KAAM,CAAAO,WAAW,CAAGA,CAAA,GAAM,CACxBC,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,OAAO,CAAG,MAAM,CACpC;AACA,IAAK,CAAAH,QAAQ,CAACC,IAAI,CAACG,YAAY,CAC/BJ,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,OAAO,CAAG,EAAE,CAClC,CAAC,CAEDE,UAAU,CAACN,WAAW,CAAE,CAAC,CAAC,CAC5B,CACF,CAAC,CAAE,CAACP,cAAc,CAAC,CAAC,CAEpB,oBACE;AACAJ,IAAA,QAAAG,QAAA,CACGA,QAAQ,EADDC,cAEL,CAAC,EAEV,CAAC,CAED,cAAe,CAAAH,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}