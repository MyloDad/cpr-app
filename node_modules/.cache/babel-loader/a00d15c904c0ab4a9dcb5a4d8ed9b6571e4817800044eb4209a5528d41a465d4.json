{"ast":null,"code":"var _jsxFileName = \"/Users/davidhelmers/arrestpro/src/context/AppStateContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback, useRef } from 'react';\nimport useAudio from '../hooks/useAudio';\n\n// App constants\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const COLORS = {\n  background: '#1e2126',\n  // Dark background\n  logoRed: '#ff4136',\n  // Red from logo\n  logoYellow: '#f4eb00ff',\n  // Yellow from logo\n  pulseBlue: '#3498db',\n  // Blue for pulse check\n  ventGreen: '#2ecc40',\n  // Green for ventilation\n  white: '#ffffff',\n  // White text\n  darkText: '#1a1a1a',\n  // Dark text for yellow buttons\n  timerBg: '#2c3e50',\n  // Timer background\n  sliderBg: '#ecf0f1' // Slider background\n};\n\n// Create the context\nconst AppStateContext = /*#__PURE__*/createContext();\n\n// Path to audio files\nconst AUDIO_PATH = '/audio/';\nexport const AppStateProvider = ({\n  children\n}) => {\n  _s();\n  // State variables\n  const [activeSection, setActiveSection] = useState(null);\n  const [seconds, setSeconds] = useState(0);\n  const [pulseCheckTime, setPulseCheckTime] = useState(120);\n  const [pauseTime, setPauseTime] = useState(10);\n  const [metronomeRunning, setMetronomeRunning] = useState(false);\n  const [ventilationActive, setVentilationActive] = useState(false);\n  const [ventilationRate, setVentilationRate] = useState(11);\n  const [showChargeMonitor, setShowChargeMonitor] = useState(false);\n  const [epiActive, setEpiActive] = useState(false);\n  const [epiTime, setEpiTime] = useState(300);\n  const [epiCycles, setEpiCycles] = useState(0);\n  const [clockStarted, setClockStarted] = useState(false);\n  const [startTime, setStartTime] = useState(null);\n  const [countdownAnnounced, setCountdownAnnounced] = useState({\n    5: false,\n    4: false,\n    3: false,\n    2: false,\n    1: false\n  });\n  const [confirmReset, setConfirmReset] = useState(false);\n  const [pulseFlashing, setPulseFlashing] = useState(false);\n  const [epiFlashing, setEpiFlashing] = useState(false);\n\n  // Refs for safer interval handling\n  const timerIntervalRef = useRef(null);\n  const pulseIntervalRef = useRef(null);\n  const ventilationIntervalRef = useRef(null);\n  const epiIntervalRef = useRef(null);\n  const clockIntervalRef = useRef(null);\n\n  // Audio hooks\n  const {\n    initAudio,\n    playSound,\n    stopSound,\n    unlockAudio\n  } = useAudio();\n\n  // Initialize all audio files\n  useEffect(() => {\n    // Initialize audio pools for all sounds we'll use\n    initAudio('metronome', `${AUDIO_PATH}click.mp3`, 5); // More instances for rapid clicks\n    initAudio('ventilate', `${AUDIO_PATH}ventilate.mp3`, 3);\n    initAudio('chargeMonitor', `${AUDIO_PATH}charge_monitor.mp3`);\n    initAudio('stopCompression', `${AUDIO_PATH}stop_compression.mp3`);\n    initAudio('1', `${AUDIO_PATH}numbers/1.mp3`);\n    initAudio('2', `${AUDIO_PATH}numbers/2.mp3`);\n    initAudio('3', `${AUDIO_PATH}numbers/3.mp3`);\n    initAudio('4', `${AUDIO_PATH}numbers/4.mp3`);\n    initAudio('5', `${AUDIO_PATH}numbers/5.mp3`);\n\n    // Unlock audio for iOS on first user interaction\n    document.addEventListener('click', unlockAudio, {\n      once: true\n    });\n    return () => {\n      document.removeEventListener('click', unlockAudio);\n    };\n  }, [initAudio, unlockAudio]);\n\n  // Start the main clock\n  const startClock = useCallback(() => {\n    if (clockIntervalRef.current) {\n      clearInterval(clockIntervalRef.current);\n    }\n    const interval = setInterval(() => {\n      setSeconds(prev => prev + 1);\n    }, 1000);\n    clockIntervalRef.current = interval;\n    setClockStarted(true);\n  }, []);\n\n  // Reset the main clock\n  const resetClock = useCallback(() => {\n    setSeconds(0);\n    setConfirmReset(false);\n\n    // Only start the clock if there's an active feature\n    if (!clockStarted && (activeSection || ventilationActive || epiActive)) {\n      startClock();\n    } else if (!activeSection && !ventilationActive && !epiActive) {\n      // If everything is inactive, just reset without starting\n      if (clockIntervalRef.current) {\n        clearInterval(clockIntervalRef.current);\n        clockIntervalRef.current = null;\n      }\n      setClockStarted(false);\n    }\n  }, [clockStarted, startClock, activeSection, ventilationActive, epiActive]);\n\n  // Handle timer click to show confirmation\n  const handleTimerClick = useCallback(() => {\n    // If timer is already at 0, no need for confirmation\n    if (seconds === 0) return;\n\n    // Show confirmation dialog\n    setConfirmReset(true);\n  }, [seconds]);\n\n  // Cancel reset\n  const cancelReset = useCallback(() => {\n    setConfirmReset(false);\n  }, []);\n\n  // Toggle ventilation\n  const toggleVentilation = useCallback(() => {\n    // Start the main timer if this is the first feature activated\n    if (!clockStarted && !activeSection && !ventilationActive && !epiActive) {\n      startClock();\n      setStartTime(new Date());\n    }\n    setVentilationActive(prev => !prev);\n  }, [clockStarted, startClock, activeSection, ventilationActive, epiActive]);\n\n  // Metronome functions\n  const handleMetronomeClick = useCallback(() => {\n    // Start the main timer if this is the first feature activated\n    if (!clockStarted && !activeSection && !ventilationActive && !epiActive) {\n      startClock();\n      setStartTime(new Date());\n    }\n    if (activeSection === 'metronome' || activeSection === 'pulse+metronome') {\n      if (activeSection === 'pulse+metronome') {\n        setActiveSection('pulse');\n      } else {\n        setActiveSection(null);\n      }\n    } else {\n      if (activeSection === 'pulse') {\n        setActiveSection('pulse+metronome');\n      } else {\n        setActiveSection('metronome');\n        // Only set start time if it hasn't been set yet\n        if (!startTime) {\n          setStartTime(new Date());\n        }\n      }\n    }\n  }, [activeSection, clockStarted, startClock, ventilationActive, epiActive, startTime]);\n\n  // Pulse check functions\n  // Fix for the circular dependency between startPulseCountdown and startPauseCountdown\n\n  // First, create function references using useRef\n  const startPulseCountdownRef = useRef(null);\n  const startPauseCountdownRef = useRef(null);\n\n  // Define startPulseCountdown with reference to the ref instead of direct function\n  const startPulseCountdown = useCallback(() => {\n    // Clear any existing interval first\n    if (pulseIntervalRef.current) {\n      clearInterval(pulseIntervalRef.current);\n    }\n    pulseIntervalRef.current = setInterval(() => {\n      setPulseCheckTime(prevTime => {\n        // Show charge monitor warning at exactly 0:15\n        if (prevTime === 16) {\n          setShowChargeMonitor(true);\n          playSound('chargeMonitor');\n          setPulseFlashing(true);\n        }\n\n        // Countdown for last 5 seconds - directly matching the timer display\n        if (prevTime === 6) playSound('5');\n        if (prevTime === 5) playSound('4');\n        if (prevTime === 4) playSound('3');\n        if (prevTime === 3) playSound('2');\n        if (prevTime === 2) playSound('1');\n\n        // Handle the \"stopCompression\" at exactly 0:00\n        if (prevTime === 1) {\n          // Schedule the stopCompression to play exactly when the timer hits 0\n          setTimeout(() => {\n            playSound('stopCompression');\n          }, 900); // Slightly less than 1 second to ensure it plays right after timer hits 0\n        }\n\n        // When pulse check countdown reaches zero\n        if (prevTime === 0) {\n          setPulseFlashing(false);\n\n          // Clear this interval and start the pause countdown\n          clearInterval(pulseIntervalRef.current);\n\n          // Use the ref to call startPauseCountdown\n          startPauseCountdownRef.current();\n          return 0; // Keep it at zero\n        }\n        return prevTime - 1;\n      });\n    }, 1000);\n  }, [playSound]);\n\n  // Define startPauseCountdown with reference to the ref\n  const startPauseCountdown = useCallback(() => {\n    // Start a new interval for the pause countdown\n    pulseIntervalRef.current = setInterval(() => {\n      setPauseTime(prevPauseTime => {\n        // When pause countdown finishes\n        if (prevPauseTime <= 1) {\n          // Auto-restart the pulse check countdown\n          setPulseCheckTime(120);\n          setShowChargeMonitor(false);\n          setCountdownAnnounced({\n            5: false,\n            4: false,\n            3: false,\n            2: false,\n            1: false\n          });\n\n          // Clear this interval and restart the pulse countdown\n          clearInterval(pulseIntervalRef.current);\n\n          // Use the ref to call startPulseCountdown\n          startPulseCountdownRef.current();\n          return 10; // Reset the pause time for next time\n        }\n        return prevPauseTime - 1;\n      });\n    }, 1000);\n  }, []);\n\n  // Assign the functions to the refs after they're defined\n  useEffect(() => {\n    startPulseCountdownRef.current = startPulseCountdown;\n    startPauseCountdownRef.current = startPauseCountdown;\n  }, [startPulseCountdown, startPauseCountdown]);\n\n  // Then update the handlePulseCheckClick to use the ref\n  const handlePulseCheckClick = useCallback(() => {\n    // Start the main timer if this is the first feature activated\n    if (!clockStarted && !activeSection && !ventilationActive && !epiActive) {\n      startClock();\n      setStartTime(new Date());\n    }\n    if (activeSection === 'pulse' || activeSection === 'pulse+metronome') {\n      if (activeSection === 'pulse+metronome') {\n        setActiveSection('metronome');\n      } else {\n        setActiveSection(null);\n      }\n\n      // Clear both intervals to be safe\n      if (pulseIntervalRef.current) {\n        clearInterval(pulseIntervalRef.current);\n        pulseIntervalRef.current = null;\n      }\n      setPulseFlashing(false); // Stop flashing\n    } else {\n      if (activeSection === 'metronome') {\n        setActiveSection('pulse+metronome');\n      } else {\n        setActiveSection('pulse');\n      }\n\n      // Reset all values\n      setPulseCheckTime(120);\n      setPauseTime(10);\n      setShowChargeMonitor(false);\n      setCountdownAnnounced({\n        5: false,\n        4: false,\n        3: false,\n        2: false,\n        1: false\n      });\n\n      // Start the main pulse check countdown using the ref\n      startPulseCountdownRef.current();\n    }\n  }, [activeSection, clockStarted, startClock, ventilationActive, epiActive]);\n  // Epinephrine functions\n  const handleEpinephrineClick = useCallback(() => {\n    // Start the main timer if this is the first feature activated\n    if (!clockStarted && !activeSection && !ventilationActive && !epiActive) {\n      startClock();\n      setStartTime(new Date());\n    }\n\n    // Toggle epinephrine state\n    setEpiActive(prev => {\n      if (prev) {\n        // If turning off, reset time and counter and stop flashing\n        setEpiTime(300);\n        setEpiCycles(0);\n        setEpiFlashing(false);\n      } else {\n        // If turning on, set initial state\n        setEpiTime(300);\n      }\n      return !prev;\n    });\n  }, [clockStarted, startClock, activeSection, ventilationActive, epiActive]);\n\n  // Update metronome state based on activeSection\n  useEffect(() => {\n    if (activeSection === 'metronome' || activeSection === 'pulse+metronome') {\n      setMetronomeRunning(true);\n    } else {\n      setMetronomeRunning(false);\n    }\n    if (!activeSection && !ventilationActive && !epiActive && clockStarted) {\n      if (clockIntervalRef.current) {\n        clearInterval(clockIntervalRef.current);\n        clockIntervalRef.current = null;\n      }\n      setSeconds(0);\n      setClockStarted(false);\n    }\n  }, [activeSection, ventilationActive, epiActive, clockStarted]);\n\n  // Metronome timer effect\n  useEffect(() => {\n    if (!metronomeRunning) return;\n    if (timerIntervalRef.current) {\n      clearInterval(timerIntervalRef.current);\n      timerIntervalRef.current = null;\n    }\n    const bpm = 110; // Fixed BPM\n    if (bpm <= 0) return;\n    const intervalTime = 60 / bpm * 1000;\n\n    // Play immediately on start\n    playSound('metronome');\n    timerIntervalRef.current = setInterval(() => {\n      playSound('metronome');\n    }, intervalTime);\n    return () => {\n      if (timerIntervalRef.current) {\n        clearInterval(timerIntervalRef.current);\n        timerIntervalRef.current = null;\n      }\n    };\n  }, [metronomeRunning, playSound]);\n\n  // Ventilation timer effect\n  useEffect(() => {\n    if (!ventilationActive) return;\n    if (ventilationIntervalRef.current) {\n      clearInterval(ventilationIntervalRef.current);\n      ventilationIntervalRef.current = null;\n    }\n    if (ventilationRate <= 0) return;\n    const intervalTime = 60 / ventilationRate * 1000;\n\n    // Play immediately on start\n    playSound('ventilate');\n    ventilationIntervalRef.current = setInterval(() => {\n      playSound('ventilate');\n    }, intervalTime);\n    return () => {\n      if (ventilationIntervalRef.current) {\n        clearInterval(ventilationIntervalRef.current);\n        ventilationIntervalRef.current = null;\n      }\n    };\n  }, [ventilationActive, ventilationRate, playSound]);\n\n  // Epinephrine timer effect\n  useEffect(() => {\n    if (!epiActive) {\n      if (epiIntervalRef.current) {\n        clearInterval(epiIntervalRef.current);\n        epiIntervalRef.current = null;\n      }\n      setEpiFlashing(false); // Ensure flashing stops when deactivated\n      return;\n    }\n    epiIntervalRef.current = setInterval(() => {\n      setEpiTime(prevTime => {\n        // Start flashing during last 15 seconds of cycle\n        if (prevTime === 15) {\n          setEpiFlashing(true);\n        }\n        if (prevTime <= 0) {\n          // Increment the cycle counter when a full cycle completes\n          setEpiCycles(prev => prev + 1);\n          setEpiFlashing(false); // Stop flashing when the cycle completes\n          setEpiTime(300);\n          return 300;\n        }\n        return prevTime - 1;\n      });\n    }, 1000);\n    return () => {\n      if (epiIntervalRef.current) {\n        clearInterval(epiIntervalRef.current);\n        epiIntervalRef.current = null;\n      }\n    };\n  }, [epiActive]);\n\n  // Format seconds to MM:SS\n  const formatTime = totalSeconds => {\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  };\n\n  // Format time as 24-hour clock HH:MM\n  const formatClock = date => {\n    if (!date) return \"--:--\";\n    const hours = date.getHours().toString().padStart(2, '0');\n    const minutes = date.getMinutes().toString().padStart(2, '0');\n    return `${hours}:${minutes}`;\n  };\n\n  // Cleanup all intervals on unmount\n  useEffect(() => {\n    return () => {\n      [timerIntervalRef, pulseIntervalRef, ventilationIntervalRef, epiIntervalRef, clockIntervalRef].forEach(ref => {\n        if (ref && ref.current) {\n          clearInterval(ref.current);\n          ref.current = null;\n        }\n      });\n    };\n  }, []);\n\n  // Exposed context value\n  const contextValue = {\n    // State\n    activeSection,\n    seconds,\n    pulseCheckTime,\n    pauseTime,\n    metronomeRunning,\n    ventilationActive,\n    ventilationRate,\n    showChargeMonitor,\n    epiActive,\n    epiTime,\n    epiCycles,\n    clockStarted,\n    startTime,\n    countdownAnnounced,\n    confirmReset,\n    pulseFlashing,\n    epiFlashing,\n    // Actions\n    setVentilationRate,\n    handleTimerClick,\n    resetClock,\n    cancelReset,\n    toggleVentilation,\n    handleMetronomeClick,\n    handlePulseCheckClick,\n    handleEpinephrineClick,\n    // Utilities\n    formatTime,\n    formatClock,\n    COLORS\n  };\n  return /*#__PURE__*/_jsxDEV(AppStateContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 485,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the app state\n_s(AppStateProvider, \"gC4XPvVjsG3ChvK2Z3AZkyfyPwY=\", false, function () {\n  return [useAudio];\n});\n_c = AppStateProvider;\nexport const useAppState = () => {\n  _s2();\n  const context = useContext(AppStateContext);\n  if (context === undefined) {\n    throw new Error('useAppState must be used within an AppStateProvider');\n  }\n  return context;\n};\n_s2(useAppState, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AppStateProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","useRef","useAudio","jsxDEV","_jsxDEV","COLORS","background","logoRed","logoYellow","pulseBlue","ventGreen","white","darkText","timerBg","sliderBg","AppStateContext","AUDIO_PATH","AppStateProvider","children","_s","activeSection","setActiveSection","seconds","setSeconds","pulseCheckTime","setPulseCheckTime","pauseTime","setPauseTime","metronomeRunning","setMetronomeRunning","ventilationActive","setVentilationActive","ventilationRate","setVentilationRate","showChargeMonitor","setShowChargeMonitor","epiActive","setEpiActive","epiTime","setEpiTime","epiCycles","setEpiCycles","clockStarted","setClockStarted","startTime","setStartTime","countdownAnnounced","setCountdownAnnounced","confirmReset","setConfirmReset","pulseFlashing","setPulseFlashing","epiFlashing","setEpiFlashing","timerIntervalRef","pulseIntervalRef","ventilationIntervalRef","epiIntervalRef","clockIntervalRef","initAudio","playSound","stopSound","unlockAudio","document","addEventListener","once","removeEventListener","startClock","current","clearInterval","interval","setInterval","prev","resetClock","handleTimerClick","cancelReset","toggleVentilation","Date","handleMetronomeClick","startPulseCountdownRef","startPauseCountdownRef","startPulseCountdown","prevTime","setTimeout","startPauseCountdown","prevPauseTime","handlePulseCheckClick","handleEpinephrineClick","bpm","intervalTime","formatTime","totalSeconds","minutes","Math","floor","toString","padStart","formatClock","date","hours","getHours","getMinutes","forEach","ref","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAppState","_s2","context","undefined","Error","$RefreshReg$"],"sources":["/Users/davidhelmers/arrestpro/src/context/AppStateContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback, useRef } from 'react';\nimport useAudio from '../hooks/useAudio';\n\n// App constants\nexport const COLORS = {\n  background: '#1e2126',     // Dark background\n  logoRed: '#ff4136',        // Red from logo\n  logoYellow: '#f4eb00ff',   // Yellow from logo\n  pulseBlue: '#3498db',      // Blue for pulse check\n  ventGreen: '#2ecc40',      // Green for ventilation\n  white: '#ffffff',          // White text\n  darkText: '#1a1a1a',       // Dark text for yellow buttons\n  timerBg: '#2c3e50',        // Timer background\n  sliderBg: '#ecf0f1',       // Slider background\n};\n\n// Create the context\nconst AppStateContext = createContext();\n\n// Path to audio files\nconst AUDIO_PATH = '/audio/';\n\nexport const AppStateProvider = ({ children }) => {\n  // State variables\n  const [activeSection, setActiveSection] = useState(null);\n  const [seconds, setSeconds] = useState(0);\n  const [pulseCheckTime, setPulseCheckTime] = useState(120);\n  const [pauseTime, setPauseTime] = useState(10);\n  const [metronomeRunning, setMetronomeRunning] = useState(false);\n  const [ventilationActive, setVentilationActive] = useState(false);\n  const [ventilationRate, setVentilationRate] = useState(11);\n  const [showChargeMonitor, setShowChargeMonitor] = useState(false);\n  const [epiActive, setEpiActive] = useState(false);\n  const [epiTime, setEpiTime] = useState(300);\n  const [epiCycles, setEpiCycles] = useState(0);\n  const [clockStarted, setClockStarted] = useState(false);\n  const [startTime, setStartTime] = useState(null);\n  const [countdownAnnounced, setCountdownAnnounced] = useState({5: false, 4: false, 3: false, 2: false, 1: false});\n  const [confirmReset, setConfirmReset] = useState(false);\n  const [pulseFlashing, setPulseFlashing] = useState(false);\n  const [epiFlashing, setEpiFlashing] = useState(false);\n\n  // Refs for safer interval handling\n  const timerIntervalRef = useRef(null);\n  const pulseIntervalRef = useRef(null);\n  const ventilationIntervalRef = useRef(null);\n  const epiIntervalRef = useRef(null);\n  const clockIntervalRef = useRef(null);\n\n  // Audio hooks\n  const { initAudio, playSound, stopSound, unlockAudio } = useAudio();\n\n  // Initialize all audio files\n  useEffect(() => {\n    // Initialize audio pools for all sounds we'll use\n    initAudio('metronome', `${AUDIO_PATH}click.mp3`, 5);  // More instances for rapid clicks\n    initAudio('ventilate', `${AUDIO_PATH}ventilate.mp3`, 3);\n    initAudio('chargeMonitor', `${AUDIO_PATH}charge_monitor.mp3`);\n    initAudio('stopCompression', `${AUDIO_PATH}stop_compression.mp3`);\n    initAudio('1', `${AUDIO_PATH}numbers/1.mp3`);\n    initAudio('2', `${AUDIO_PATH}numbers/2.mp3`);\n    initAudio('3', `${AUDIO_PATH}numbers/3.mp3`);\n    initAudio('4', `${AUDIO_PATH}numbers/4.mp3`);\n    initAudio('5', `${AUDIO_PATH}numbers/5.mp3`);\n    \n    // Unlock audio for iOS on first user interaction\n    document.addEventListener('click', unlockAudio, { once: true });\n    \n    return () => {\n      document.removeEventListener('click', unlockAudio);\n    };\n  }, [initAudio, unlockAudio]);\n\n  // Start the main clock\n  const startClock = useCallback(() => {\n    if (clockIntervalRef.current) {\n      clearInterval(clockIntervalRef.current);\n    }\n    \n    const interval = setInterval(() => {\n      setSeconds(prev => prev + 1);\n    }, 1000);\n    \n    clockIntervalRef.current = interval;\n    setClockStarted(true);\n  }, []);\n  \n  // Reset the main clock\n  const resetClock = useCallback(() => {\n    setSeconds(0);\n    setConfirmReset(false);\n    \n    // Only start the clock if there's an active feature\n    if (!clockStarted && (activeSection || ventilationActive || epiActive)) {\n      startClock();\n    } else if (!activeSection && !ventilationActive && !epiActive) {\n      // If everything is inactive, just reset without starting\n      if (clockIntervalRef.current) {\n        clearInterval(clockIntervalRef.current);\n        clockIntervalRef.current = null;\n      }\n      setClockStarted(false);\n    }\n  }, [clockStarted, startClock, activeSection, ventilationActive, epiActive]);\n  \n  // Handle timer click to show confirmation\n  const handleTimerClick = useCallback(() => {\n    // If timer is already at 0, no need for confirmation\n    if (seconds === 0) return;\n    \n    // Show confirmation dialog\n    setConfirmReset(true);\n  }, [seconds]);\n  \n  // Cancel reset\n  const cancelReset = useCallback(() => {\n    setConfirmReset(false);\n  }, []);\n\n  // Toggle ventilation\n  const toggleVentilation = useCallback(() => {\n    // Start the main timer if this is the first feature activated\n    if (!clockStarted && !activeSection && !ventilationActive && !epiActive) {\n      startClock();\n      setStartTime(new Date());\n    }\n    \n    setVentilationActive(prev => !prev);\n  }, [clockStarted, startClock, activeSection, ventilationActive, epiActive]);\n\n  // Metronome functions\n  const handleMetronomeClick = useCallback(() => {\n    // Start the main timer if this is the first feature activated\n    if (!clockStarted && !activeSection && !ventilationActive && !epiActive) {\n      startClock();\n      setStartTime(new Date());\n    }\n    \n    if (activeSection === 'metronome' || activeSection === 'pulse+metronome') {\n      if (activeSection === 'pulse+metronome') {\n        setActiveSection('pulse');\n      } else {\n        setActiveSection(null);\n      }\n    } else {\n      if (activeSection === 'pulse') {\n        setActiveSection('pulse+metronome');\n      } else {\n        setActiveSection('metronome');\n        // Only set start time if it hasn't been set yet\n        if (!startTime) {\n          setStartTime(new Date());\n        }\n      }\n    }\n  }, [activeSection, clockStarted, startClock, ventilationActive, epiActive, startTime]);\n\n  // Pulse check functions\n// Fix for the circular dependency between startPulseCountdown and startPauseCountdown\n\n// First, create function references using useRef\nconst startPulseCountdownRef = useRef(null);\nconst startPauseCountdownRef = useRef(null);\n\n// Define startPulseCountdown with reference to the ref instead of direct function\nconst startPulseCountdown = useCallback(() => {\n  // Clear any existing interval first\n  if (pulseIntervalRef.current) {\n    clearInterval(pulseIntervalRef.current);\n  }\n  \n  pulseIntervalRef.current = setInterval(() => {\n    setPulseCheckTime(prevTime => {\n      // Show charge monitor warning at exactly 0:15\n      if (prevTime === 16) {\n        setShowChargeMonitor(true);\n        playSound('chargeMonitor');\n        setPulseFlashing(true);\n      }\n\n      // Countdown for last 5 seconds - directly matching the timer display\n      if (prevTime === 6) playSound('5');\n      if (prevTime === 5) playSound('4');\n      if (prevTime === 4) playSound('3');\n      if (prevTime === 3) playSound('2');\n      if (prevTime === 2) playSound('1');\n      \n      // Handle the \"stopCompression\" at exactly 0:00\n      if (prevTime === 1) {\n        // Schedule the stopCompression to play exactly when the timer hits 0\n        setTimeout(() => {\n          playSound('stopCompression');\n        }, 900); // Slightly less than 1 second to ensure it plays right after timer hits 0\n      }\n      \n      // When pulse check countdown reaches zero\n      if (prevTime === 0) {\n        setPulseFlashing(false);\n        \n        // Clear this interval and start the pause countdown\n        clearInterval(pulseIntervalRef.current);\n        \n        // Use the ref to call startPauseCountdown\n        startPauseCountdownRef.current();\n        \n        return 0; // Keep it at zero\n      }\n      \n      return prevTime - 1;\n    });\n  }, 1000);\n}, [playSound]);\n\n// Define startPauseCountdown with reference to the ref\nconst startPauseCountdown = useCallback(() => {\n  // Start a new interval for the pause countdown\n  pulseIntervalRef.current = setInterval(() => {\n    setPauseTime(prevPauseTime => {\n      // When pause countdown finishes\n      if (prevPauseTime <= 1) {\n        // Auto-restart the pulse check countdown\n        setPulseCheckTime(120);\n        setShowChargeMonitor(false);\n        setCountdownAnnounced({ 5: false, 4: false, 3: false, 2: false, 1: false });\n        \n        // Clear this interval and restart the pulse countdown\n        clearInterval(pulseIntervalRef.current);\n        \n        // Use the ref to call startPulseCountdown\n        startPulseCountdownRef.current();\n        \n        return 10; // Reset the pause time for next time\n      }\n      \n      return prevPauseTime - 1;\n    });\n  }, 1000);\n}, []);\n\n// Assign the functions to the refs after they're defined\nuseEffect(() => {\n  startPulseCountdownRef.current = startPulseCountdown;\n  startPauseCountdownRef.current = startPauseCountdown;\n}, [startPulseCountdown, startPauseCountdown]);\n\n// Then update the handlePulseCheckClick to use the ref\nconst handlePulseCheckClick = useCallback(() => {\n  // Start the main timer if this is the first feature activated\n  if (!clockStarted && !activeSection && !ventilationActive && !epiActive) {\n    startClock();\n    setStartTime(new Date());\n  }\n  \n  if (activeSection === 'pulse' || activeSection === 'pulse+metronome') {\n    if (activeSection === 'pulse+metronome') {\n      setActiveSection('metronome');\n    } else {\n      setActiveSection(null);\n    }\n    \n    // Clear both intervals to be safe\n    if (pulseIntervalRef.current) {\n      clearInterval(pulseIntervalRef.current);\n      pulseIntervalRef.current = null;\n    }\n    \n    setPulseFlashing(false); // Stop flashing\n  } else {\n    if (activeSection === 'metronome') {\n      setActiveSection('pulse+metronome');\n    } else {\n      setActiveSection('pulse');\n    }\n    \n    // Reset all values\n    setPulseCheckTime(120);\n    setPauseTime(10);\n    setShowChargeMonitor(false);\n    setCountdownAnnounced({5: false, 4: false, 3: false, 2: false, 1: false});\n    \n    // Start the main pulse check countdown using the ref\n    startPulseCountdownRef.current();\n  }\n}, [activeSection, clockStarted, startClock, ventilationActive, epiActive]);\n  // Epinephrine functions\n  const handleEpinephrineClick = useCallback(() => {\n    // Start the main timer if this is the first feature activated\n    if (!clockStarted && !activeSection && !ventilationActive && !epiActive) {\n      startClock();\n      setStartTime(new Date());\n    }\n    \n    // Toggle epinephrine state\n    setEpiActive(prev => {\n      if (prev) {\n        // If turning off, reset time and counter and stop flashing\n        setEpiTime(300);\n        setEpiCycles(0);\n        setEpiFlashing(false);\n      } else {\n        // If turning on, set initial state\n        setEpiTime(300);\n      }\n      return !prev;\n    });\n  }, [clockStarted, startClock, activeSection, ventilationActive, epiActive]);\n\n  // Update metronome state based on activeSection\n  useEffect(() => {\n    if (activeSection === 'metronome' || activeSection === 'pulse+metronome') {\n      setMetronomeRunning(true);\n    } else {\n      setMetronomeRunning(false);\n    }\n    \n    if (!activeSection && !ventilationActive && !epiActive && clockStarted) {\n      if (clockIntervalRef.current) {\n        clearInterval(clockIntervalRef.current);\n        clockIntervalRef.current = null;\n      }\n      setSeconds(0);\n      setClockStarted(false);\n    }\n  }, [activeSection, ventilationActive, epiActive, clockStarted]);\n\n  // Metronome timer effect\n  useEffect(() => {\n    if (!metronomeRunning) return;\n    \n    if (timerIntervalRef.current) {\n      clearInterval(timerIntervalRef.current);\n      timerIntervalRef.current = null;\n    }\n    \n    const bpm = 110; // Fixed BPM\n    if (bpm <= 0) return;\n    \n    const intervalTime = (60 / bpm) * 1000;\n    \n    // Play immediately on start\n    playSound('metronome');\n    \n    timerIntervalRef.current = setInterval(() => {\n      playSound('metronome');\n    }, intervalTime);\n    \n    return () => {\n      if (timerIntervalRef.current) {\n        clearInterval(timerIntervalRef.current);\n        timerIntervalRef.current = null;\n      }\n    };\n  }, [metronomeRunning, playSound]);\n\n  // Ventilation timer effect\n  useEffect(() => {\n    if (!ventilationActive) return;\n    \n    if (ventilationIntervalRef.current) {\n      clearInterval(ventilationIntervalRef.current);\n      ventilationIntervalRef.current = null;\n    }\n    \n    if (ventilationRate <= 0) return;\n    \n    const intervalTime = (60 / ventilationRate) * 1000;\n    \n    // Play immediately on start\n    playSound('ventilate');\n    \n    ventilationIntervalRef.current = setInterval(() => {\n      playSound('ventilate');\n    }, intervalTime);\n    \n    return () => {\n      if (ventilationIntervalRef.current) {\n        clearInterval(ventilationIntervalRef.current);\n        ventilationIntervalRef.current = null;\n      }\n    };\n  }, [ventilationActive, ventilationRate, playSound]);\n\n  // Epinephrine timer effect\n  useEffect(() => {\n    if (!epiActive) {\n      if (epiIntervalRef.current) {\n        clearInterval(epiIntervalRef.current);\n        epiIntervalRef.current = null;\n      }\n      setEpiFlashing(false); // Ensure flashing stops when deactivated\n      return;\n    }\n    \n    epiIntervalRef.current = setInterval(() => {\n      setEpiTime(prevTime => {\n        // Start flashing during last 15 seconds of cycle\n        if (prevTime === 15) {\n          setEpiFlashing(true);\n        }\n        \n        if (prevTime <= 0) {\n          // Increment the cycle counter when a full cycle completes\n          setEpiCycles(prev => prev + 1);\n          setEpiFlashing(false); // Stop flashing when the cycle completes\n          setEpiTime(300);\n          return 300;\n        }\n        return prevTime - 1;\n      });\n    }, 1000);\n    \n    return () => {\n      if (epiIntervalRef.current) {\n        clearInterval(epiIntervalRef.current);\n        epiIntervalRef.current = null;\n      }\n    };\n  }, [epiActive]);\n\n  // Format seconds to MM:SS\n  const formatTime = (totalSeconds) => {\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  };\n  \n  // Format time as 24-hour clock HH:MM\n  const formatClock = (date) => {\n    if (!date) return \"--:--\";\n    const hours = date.getHours().toString().padStart(2, '0');\n    const minutes = date.getMinutes().toString().padStart(2, '0');\n    return `${hours}:${minutes}`;\n  };\n\n  // Cleanup all intervals on unmount\n  useEffect(() => {\n    return () => {\n      [timerIntervalRef, pulseIntervalRef, ventilationIntervalRef, epiIntervalRef, clockIntervalRef].forEach(ref => {\n        if (ref && ref.current) {\n          clearInterval(ref.current);\n          ref.current = null;\n        }\n      });\n    };\n  }, []);\n\n  // Exposed context value\n  const contextValue = {\n    // State\n    activeSection,\n    seconds,\n    pulseCheckTime,\n    pauseTime,\n    metronomeRunning, \n    ventilationActive,\n    ventilationRate,\n    showChargeMonitor,\n    epiActive,\n    epiTime,\n    epiCycles,\n    clockStarted,\n    startTime,\n    countdownAnnounced,\n    confirmReset,\n    pulseFlashing,\n    epiFlashing,\n    \n    // Actions\n    setVentilationRate,\n    handleTimerClick,\n    resetClock,\n    cancelReset,\n    toggleVentilation,\n    handleMetronomeClick,\n    handlePulseCheckClick,\n    handleEpinephrineClick,\n    \n    // Utilities\n    formatTime,\n    formatClock,\n    COLORS\n  };\n\n  return (\n    <AppStateContext.Provider value={contextValue}>\n      {children}\n    </AppStateContext.Provider>\n  );\n};\n\n// Custom hook to use the app state\nexport const useAppState = () => {\n  const context = useContext(AppStateContext);\n  if (context === undefined) {\n    throw new Error('useAppState must be used within an AppStateProvider');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}