{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useRef, useCallback, useEffect } from 'react';\n\n// The AudioPool helps manage multiple audio instances for concurrent playback\nclass AudioPool {\n  constructor(src, poolSize = 3) {\n    this.src = src;\n    this.poolSize = poolSize;\n    this.audioElements = [];\n    this.currentIndex = 0;\n\n    // Create the audio pool\n    for (let i = 0; i < poolSize; i++) {\n      const audio = new Audio(src);\n      audio.preload = 'auto';\n      this.audioElements.push(audio);\n    }\n  }\n  play() {\n    // Get the next audio element in the pool\n    const audio = this.audioElements[this.currentIndex];\n\n    // Reset the audio if it's already playing or has played\n    if (!audio.paused) {\n      audio.pause();\n      audio.currentTime = 0;\n    }\n\n    // Play the audio and handle any errors for iOS\n    const playPromise = audio.play();\n    if (playPromise !== undefined) {\n      playPromise.catch(error => {\n        // Auto-play prevented (iOS often requires user interaction first)\n        console.warn('Audio play prevented:', error);\n      });\n    }\n\n    // Move to the next audio element for the next call\n    this.currentIndex = (this.currentIndex + 1) % this.poolSize;\n    return audio;\n  }\n  stop() {\n    this.audioElements.forEach(audio => {\n      audio.pause();\n      audio.currentTime = 0;\n    });\n  }\n}\nconst useAudio = () => {\n  _s();\n  // Reference to hold our audio pools\n  const audioPoolsRef = useRef({});\n\n  // Initialize an audio pool for a specific sound\n  const initAudio = useCallback((id, src, poolSize = 3) => {\n    if (!audioPoolsRef.current[id]) {\n      audioPoolsRef.current[id] = new AudioPool(src, poolSize);\n    }\n  }, []);\n\n  // Play a sound by its ID\n  const playSound = useCallback(id => {\n    const pool = audioPoolsRef.current[id];\n    if (pool) {\n      return pool.play();\n    } else {\n      console.error(`Audio pool with ID \"${id}\" not found`);\n      return null;\n    }\n  }, []);\n\n  // Stop all instances of a sound\n  const stopSound = useCallback(id => {\n    const pool = audioPoolsRef.current[id];\n    if (pool) {\n      pool.stop();\n    }\n  }, []);\n\n  // Clean up all audio elements on unmount\n  useEffect(() => {\n    return () => {\n      Object.values(audioPoolsRef.current).forEach(pool => {\n        pool.stop();\n      });\n    };\n  }, []);\n\n  // iOS requires user interaction to play sounds\n  // This function can be called in response to any user interaction\n  // to initialize audio playback capability\n  const unlockAudio = useCallback(() => {\n    // Create and play a silent audio element\n    const audio = new Audio();\n    audio.play().catch(() => {\n      // Silent catch - this is expected on first call before user interaction\n    });\n  }, []);\n  return {\n    initAudio,\n    playSound,\n    stopSound,\n    unlockAudio\n  };\n};\n_s(useAudio, \"GXo4RpVrTHz0NwYdvkuZBoJNCl0=\");\nexport default useAudio;","map":{"version":3,"names":["useRef","useCallback","useEffect","AudioPool","constructor","src","poolSize","audioElements","currentIndex","i","audio","Audio","preload","push","play","paused","pause","currentTime","playPromise","undefined","catch","error","console","warn","stop","forEach","useAudio","_s","audioPoolsRef","initAudio","id","current","playSound","pool","stopSound","Object","values","unlockAudio"],"sources":["/Users/davidhelmers/arrestpro/src/hooks/useAudio.js"],"sourcesContent":["import { useRef, useCallback, useEffect } from 'react';\n\n// The AudioPool helps manage multiple audio instances for concurrent playback\nclass AudioPool {\n  constructor(src, poolSize = 3) {\n    this.src = src;\n    this.poolSize = poolSize;\n    this.audioElements = [];\n    this.currentIndex = 0;\n    \n    // Create the audio pool\n    for (let i = 0; i < poolSize; i++) {\n      const audio = new Audio(src);\n      audio.preload = 'auto';\n      this.audioElements.push(audio);\n    }\n  }\n  \n  play() {\n    // Get the next audio element in the pool\n    const audio = this.audioElements[this.currentIndex];\n    \n    // Reset the audio if it's already playing or has played\n    if (!audio.paused) {\n      audio.pause();\n      audio.currentTime = 0;\n    }\n    \n    // Play the audio and handle any errors for iOS\n    const playPromise = audio.play();\n    if (playPromise !== undefined) {\n      playPromise.catch(error => {\n        // Auto-play prevented (iOS often requires user interaction first)\n        console.warn('Audio play prevented:', error);\n      });\n    }\n    \n    // Move to the next audio element for the next call\n    this.currentIndex = (this.currentIndex + 1) % this.poolSize;\n    \n    return audio;\n  }\n  \n  stop() {\n    this.audioElements.forEach(audio => {\n      audio.pause();\n      audio.currentTime = 0;\n    });\n  }\n}\n\nconst useAudio = () => {\n  // Reference to hold our audio pools\n  const audioPoolsRef = useRef({});\n  \n  // Initialize an audio pool for a specific sound\n  const initAudio = useCallback((id, src, poolSize = 3) => {\n    if (!audioPoolsRef.current[id]) {\n      audioPoolsRef.current[id] = new AudioPool(src, poolSize);\n    }\n  }, []);\n  \n  // Play a sound by its ID\n  const playSound = useCallback((id) => {\n    const pool = audioPoolsRef.current[id];\n    if (pool) {\n      return pool.play();\n    } else {\n      console.error(`Audio pool with ID \"${id}\" not found`);\n      return null;\n    }\n  }, []);\n  \n  // Stop all instances of a sound\n  const stopSound = useCallback((id) => {\n    const pool = audioPoolsRef.current[id];\n    if (pool) {\n      pool.stop();\n    }\n  }, []);\n  \n  // Clean up all audio elements on unmount\n  useEffect(() => {\n    return () => {\n      Object.values(audioPoolsRef.current).forEach(pool => {\n        pool.stop();\n      });\n    };\n  }, []);\n  \n  // iOS requires user interaction to play sounds\n  // This function can be called in response to any user interaction\n  // to initialize audio playback capability\n  const unlockAudio = useCallback(() => {\n    // Create and play a silent audio element\n    const audio = new Audio();\n    audio.play().catch(() => {\n      // Silent catch - this is expected on first call before user interaction\n    });\n  }, []);\n  \n  return {\n    initAudio,\n    playSound,\n    stopSound,\n    unlockAudio\n  };\n};\n\nexport default useAudio;"],"mappings":";AAAA,SAASA,MAAM,EAAEC,WAAW,EAAEC,SAAS,QAAQ,OAAO;;AAEtD;AACA,MAAMC,SAAS,CAAC;EACdC,WAAWA,CAACC,GAAG,EAAEC,QAAQ,GAAG,CAAC,EAAE;IAC7B,IAAI,CAACD,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,aAAa,GAAG,EAAE;IACvB,IAAI,CAACC,YAAY,GAAG,CAAC;;IAErB;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,QAAQ,EAAEG,CAAC,EAAE,EAAE;MACjC,MAAMC,KAAK,GAAG,IAAIC,KAAK,CAACN,GAAG,CAAC;MAC5BK,KAAK,CAACE,OAAO,GAAG,MAAM;MACtB,IAAI,CAACL,aAAa,CAACM,IAAI,CAACH,KAAK,CAAC;IAChC;EACF;EAEAI,IAAIA,CAAA,EAAG;IACL;IACA,MAAMJ,KAAK,GAAG,IAAI,CAACH,aAAa,CAAC,IAAI,CAACC,YAAY,CAAC;;IAEnD;IACA,IAAI,CAACE,KAAK,CAACK,MAAM,EAAE;MACjBL,KAAK,CAACM,KAAK,CAAC,CAAC;MACbN,KAAK,CAACO,WAAW,GAAG,CAAC;IACvB;;IAEA;IACA,MAAMC,WAAW,GAAGR,KAAK,CAACI,IAAI,CAAC,CAAC;IAChC,IAAII,WAAW,KAAKC,SAAS,EAAE;MAC7BD,WAAW,CAACE,KAAK,CAACC,KAAK,IAAI;QACzB;QACAC,OAAO,CAACC,IAAI,CAAC,uBAAuB,EAAEF,KAAK,CAAC;MAC9C,CAAC,CAAC;IACJ;;IAEA;IACA,IAAI,CAACb,YAAY,GAAG,CAAC,IAAI,CAACA,YAAY,GAAG,CAAC,IAAI,IAAI,CAACF,QAAQ;IAE3D,OAAOI,KAAK;EACd;EAEAc,IAAIA,CAAA,EAAG;IACL,IAAI,CAACjB,aAAa,CAACkB,OAAO,CAACf,KAAK,IAAI;MAClCA,KAAK,CAACM,KAAK,CAAC,CAAC;MACbN,KAAK,CAACO,WAAW,GAAG,CAAC;IACvB,CAAC,CAAC;EACJ;AACF;AAEA,MAAMS,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB;EACA,MAAMC,aAAa,GAAG5B,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEhC;EACA,MAAM6B,SAAS,GAAG5B,WAAW,CAAC,CAAC6B,EAAE,EAAEzB,GAAG,EAAEC,QAAQ,GAAG,CAAC,KAAK;IACvD,IAAI,CAACsB,aAAa,CAACG,OAAO,CAACD,EAAE,CAAC,EAAE;MAC9BF,aAAa,CAACG,OAAO,CAACD,EAAE,CAAC,GAAG,IAAI3B,SAAS,CAACE,GAAG,EAAEC,QAAQ,CAAC;IAC1D;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAM0B,SAAS,GAAG/B,WAAW,CAAE6B,EAAE,IAAK;IACpC,MAAMG,IAAI,GAAGL,aAAa,CAACG,OAAO,CAACD,EAAE,CAAC;IACtC,IAAIG,IAAI,EAAE;MACR,OAAOA,IAAI,CAACnB,IAAI,CAAC,CAAC;IACpB,CAAC,MAAM;MACLQ,OAAO,CAACD,KAAK,CAAC,uBAAuBS,EAAE,aAAa,CAAC;MACrD,OAAO,IAAI;IACb;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMI,SAAS,GAAGjC,WAAW,CAAE6B,EAAE,IAAK;IACpC,MAAMG,IAAI,GAAGL,aAAa,CAACG,OAAO,CAACD,EAAE,CAAC;IACtC,IAAIG,IAAI,EAAE;MACRA,IAAI,CAACT,IAAI,CAAC,CAAC;IACb;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAtB,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACXiC,MAAM,CAACC,MAAM,CAACR,aAAa,CAACG,OAAO,CAAC,CAACN,OAAO,CAACQ,IAAI,IAAI;QACnDA,IAAI,CAACT,IAAI,CAAC,CAAC;MACb,CAAC,CAAC;IACJ,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA;EACA,MAAMa,WAAW,GAAGpC,WAAW,CAAC,MAAM;IACpC;IACA,MAAMS,KAAK,GAAG,IAAIC,KAAK,CAAC,CAAC;IACzBD,KAAK,CAACI,IAAI,CAAC,CAAC,CAACM,KAAK,CAAC,MAAM;MACvB;IAAA,CACD,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLS,SAAS;IACTG,SAAS;IACTE,SAAS;IACTG;EACF,CAAC;AACH,CAAC;AAACV,EAAA,CAxDID,QAAQ;AA0Dd,eAAeA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}