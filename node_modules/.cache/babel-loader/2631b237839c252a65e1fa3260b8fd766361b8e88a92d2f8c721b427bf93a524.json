{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Syringe}from'lucide-react';import{useAppState}from'../../context/AppStateContext';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const EpinephrineButton=()=>{const{epiActive,epiTime,epiCycles,epiFlashing,handleEpinephrineClick,COLORS}=useAppState();// State for progress bar width\nconst[progressWidth,setProgressWidth]=useState(0);// State for manual flashing\nconst[isVisible,setIsVisible]=useState(true);// Constants for epinephrine timing\nconst FULL_COLOR_TIME=290;// 4:50 in seconds\n// Update progress width based on current time\nuseEffect(()=>{if(epiActive){if(epiTime<=FULL_COLOR_TIME){// Calculate progress percentage based on time elapsed (0 to 290 seconds)\nconst progressPercentage=epiTime/FULL_COLOR_TIME*100;setProgressWidth(Math.min(progressPercentage,100));}else{// After 4:50, keep at 100%\nsetProgressWidth(100);}}else{// Reset when not active\nsetProgressWidth(0);}},[epiActive,epiTime]);// Manual flashing effect\nuseEffect(()=>{if(!epiFlashing){setIsVisible(true);return;}const flashInterval=setInterval(()=>{setIsVisible(prev=>!prev);},500);return()=>clearInterval(flashInterval);},[epiFlashing]);// Common button styles\nconst buttonBaseStyle={border:'none',borderRadius:'8px',padding:'12px',cursor:'pointer',textAlign:'left',position:'relative',width:'100%',height:'84px',transition:'all 0.2s ease',boxShadow:'0 2px 4px rgba(0,0,0,0.2)',overflow:'hidden'};// Format the time as MM:SS\nconst formatEpiTime=()=>{const minutes=Math.floor(epiTime/60);const seconds=epiTime%60;return`${minutes}:${seconds.toString().padStart(2,'0')}`;};// Get cycle display text\nconst getCycleText=()=>{if(!epiActive)return\"Start timer (dose 1)\";if(epiCycles===1)return\"Tap for dose 2\";return`Tap for dose ${epiCycles+1}`;};return/*#__PURE__*/_jsxs(\"button\",{onClick:handleEpinephrineClick,style:{...buttonBaseStyle,backgroundColor:!epiActive?COLORS.background:COLORS.background,// Use COLORS.background instead of undefined\ncolor:epiActive?'white':COLORS.ventGreen,border:epiActive?'none':`1px solid ${COLORS.ventGreen}`},children:[epiActive&&epiFlashing&&/*#__PURE__*/_jsx(\"div\",{style:{position:'absolute',top:0,left:0,right:0,bottom:0,backgroundColor:isVisible?COLORS.ventGreen:'#3af04fff',zIndex:1,transition:'background-color 0.25s ease'}}),epiActive&&!epiFlashing&&/*#__PURE__*/_jsx(\"div\",{style:{position:'absolute',top:0,left:0,height:'100%',width:`${progressWidth}%`,backgroundColor:COLORS.ventGreen,transition:'width 1s linear',zIndex:1}}),epiActive&&epiFlashing&&/*#__PURE__*/_jsx(\"div\",{style:{position:'absolute',top:0,left:0,height:'100%',width:`${progressWidth}%`,backgroundColor:'transparent',// Make it transparent to see the flashing background\nborderRight:'2px solid rgba(255,255,255,0.5)',// Subtle right border to mark progress\nzIndex:2,pointerEvents:'none'}}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',height:'100%',position:'relative',zIndex:3// Increased z-index to stay above all layers\n},children:[/*#__PURE__*/_jsx(\"div\",{style:{marginRight:'15px',display:'flex',alignItems:'center'},children:/*#__PURE__*/_jsx(Syringe,{size:42})}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{style:{fontSize:'18px',fontWeight:'bold',marginBottom:'2px'},children:\"Epinephrine\"}),/*#__PURE__*/_jsx(\"div\",{style:{fontSize:'14px',fontWeight:'bold',opacity:0.9},children:getCycleText()}),epiActive&&/*#__PURE__*/_jsxs(\"div\",{style:{fontSize:'14px',fontWeight:'bold',opacity:0.9},children:[\"current dose: \",epiCycles]})]})]}),epiActive&&/*#__PURE__*/_jsx(\"div\",{style:{position:'absolute',right:'12px',top:'50%',transform:'translateY(-50%)',fontSize:'22px',fontWeight:'bold',zIndex:3// Increased z-index to stay above all layers\n},children:formatEpiTime()})]});};export default EpinephrineButton;","map":{"version":3,"names":["React","useState","useEffect","Syringe","useAppState","jsx","_jsx","jsxs","_jsxs","EpinephrineButton","epiActive","epiTime","epiCycles","epiFlashing","handleEpinephrineClick","COLORS","progressWidth","setProgressWidth","isVisible","setIsVisible","FULL_COLOR_TIME","progressPercentage","Math","min","flashInterval","setInterval","prev","clearInterval","buttonBaseStyle","border","borderRadius","padding","cursor","textAlign","position","width","height","transition","boxShadow","overflow","formatEpiTime","minutes","floor","seconds","toString","padStart","getCycleText","onClick","style","backgroundColor","background","color","ventGreen","children","top","left","right","bottom","zIndex","borderRight","pointerEvents","display","alignItems","marginRight","size","fontSize","fontWeight","marginBottom","opacity","transform"],"sources":["/Users/davidhelmers/arrestpro/src/components/Buttons/EpinephrineButton.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Syringe } from 'lucide-react';\nimport { useAppState } from '../../context/AppStateContext';\n\nconst EpinephrineButton = () => {\n  const { \n    epiActive, \n    epiTime,\n    epiCycles,\n    epiFlashing,\n    handleEpinephrineClick, \n    COLORS \n  } = useAppState();\n\n  // State for progress bar width\n  const [progressWidth, setProgressWidth] = useState(0);\n  // State for manual flashing\n  const [isVisible, setIsVisible] = useState(true);\n  \n  // Constants for epinephrine timing\n  const FULL_COLOR_TIME = 290; // 4:50 in seconds\n\n  // Update progress width based on current time\n  useEffect(() => {\n    if (epiActive) {\n      if (epiTime <= FULL_COLOR_TIME) {\n        // Calculate progress percentage based on time elapsed (0 to 290 seconds)\n        const progressPercentage = (epiTime / FULL_COLOR_TIME) * 100;\n        setProgressWidth(Math.min(progressPercentage, 100));\n      } else {\n        // After 4:50, keep at 100%\n        setProgressWidth(100);\n      }\n    } else {\n      // Reset when not active\n      setProgressWidth(0);\n    }\n  }, [epiActive, epiTime]);\n\n  // Manual flashing effect\n  useEffect(() => {\n    if (!epiFlashing) {\n      setIsVisible(true);\n      return;\n    }\n    \n    const flashInterval = setInterval(() => {\n      setIsVisible(prev => !prev);\n    }, 500);\n    \n    return () => clearInterval(flashInterval);\n  }, [epiFlashing]);\n\n  // Common button styles\n  const buttonBaseStyle = {\n    border: 'none',\n    borderRadius: '8px',\n    padding: '12px',\n    cursor: 'pointer',\n    textAlign: 'left',\n    position: 'relative',\n    width: '100%',\n    height: '84px',\n    transition: 'all 0.2s ease',\n    boxShadow: '0 2px 4px rgba(0,0,0,0.2)',\n    overflow: 'hidden',\n  };\n\n  // Format the time as MM:SS\n  const formatEpiTime = () => {\n    const minutes = Math.floor(epiTime / 60);\n    const seconds = epiTime % 60;\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  };\n\n  // Get cycle display text\n  const getCycleText = () => {\n    if (!epiActive) return \"Start timer (dose 1)\";\n    if (epiCycles === 1) return \"Tap for dose 2\";\n    return `Tap for dose ${epiCycles + 1}`;\n  };\n\n  return (\n<button\n  onClick={handleEpinephrineClick}\n  style={{\n    ...buttonBaseStyle,\n    backgroundColor: !epiActive ? COLORS.background : COLORS.background, // Use COLORS.background instead of undefined\n    color: epiActive ? 'white' : COLORS.ventGreen,\n    border: epiActive ? 'none' : `1px solid ${COLORS.ventGreen}`,\n  }}\n>\n      {/* Background for flashing */}\n      {epiActive && epiFlashing && (\n        <div \n          style={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            backgroundColor: isVisible ? COLORS.ventGreen : '#3af04fff',\n            zIndex: 1,\n            transition: 'background-color 0.25s ease'\n          }}\n        />\n      )}\n      \n      {/* Normal progress bar - only visible when not flashing */}\n      {epiActive && !epiFlashing && (\n        <div \n          style={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            height: '100%',\n            width: `${progressWidth}%`,\n            backgroundColor: COLORS.ventGreen,\n            transition: 'width 1s linear',\n            zIndex: 1\n          }}\n        />\n      )}\n      \n      {/* Progress bar overlay when flashing - maintains progression */}\n      {epiActive && epiFlashing && (\n        <div \n          style={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            height: '100%',\n            width: `${progressWidth}%`, \n            backgroundColor: 'transparent', // Make it transparent to see the flashing background\n            borderRight: '2px solid rgba(255,255,255,0.5)', // Subtle right border to mark progress\n            zIndex: 2,\n            pointerEvents: 'none'\n          }}\n        />\n      )}\n      \n      {/* Button content - positioned above the progress bar */}\n      <div style={{ \n        display: 'flex', \n        alignItems: 'center', \n        height: '100%',\n        position: 'relative',\n        zIndex: 3, // Increased z-index to stay above all layers\n      }}>\n        <div style={{ marginRight: '15px', display: 'flex', alignItems: 'center' }}>\n          <Syringe size={42} />\n        </div>\n        <div>\n          <div style={{ fontSize: '18px', fontWeight: 'bold', marginBottom: '2px' }}>\n            Epinephrine\n          </div>\n          <div style={{ fontSize: '14px', fontWeight: 'bold', opacity: 0.9 }}>\n            {getCycleText()}\n          </div>\n          {epiActive && \n            <div style={{ fontSize: '14px', fontWeight: 'bold', opacity: 0.9 }}>\n              current dose: {epiCycles}\n            </div>\n          }\n        </div>\n      </div>\n      \n      {epiActive && (\n        <div style={{ \n          position: 'absolute',\n          right: '12px',\n          top: '50%',\n          transform: 'translateY(-50%)',\n          fontSize: '22px',\n          fontWeight: 'bold',\n          zIndex: 3 // Increased z-index to stay above all layers\n        }}>\n          {formatEpiTime()}\n        </div>\n      )}\n    </button>\n  );\n};\n\nexport default EpinephrineButton;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}