{"ast":null,"code":"var _jsxFileName = \"/Users/davidhelmers/arrestpro/src/context/AppStateContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback, useRef } from 'react';\nimport { Capacitor } from '@capacitor/core';\nimport { App } from '@capacitor/app';\nimport useNativeAudio from '../hooks/useNativeAudio';\n\n// App constants\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const COLORS = {\n  background: '#1e2126',\n  // Dark background\n  logoRed: '#ff4136',\n  // Red from logo\n  logoYellow: '#f4eb00ff',\n  // Yellow from logo\n  pulseBlue: '#3498db',\n  // Blue for pulse check\n  ventGreen: '#2ecc40',\n  // Green for ventilation\n  white: '#ffffff',\n  // White text\n  darkText: '#1a1a1a',\n  // Dark text for yellow buttons\n  timerBg: '#2c3e50',\n  // Timer background\n  sliderBg: '#ecf0f1' // Slider background\n};\n\n// Create the context\nconst AppStateContext = /*#__PURE__*/createContext();\n\n// Get the correct audio path based on platform\nconst getAudioPath = () => {\n  if (Capacitor.isNativePlatform()) {\n    // For native platforms, use relative paths to the assets directory\n    return ''; // The path will be handled by Capacitor's asset system\n  } else {\n    // For web, use the public folder path\n    return '/audio/';\n  }\n};\n\n// Initial state - used for reset\nconst initialState = {\n  activeSection: null,\n  seconds: 0,\n  pulseCheckTime: 0,\n  pauseTime: 0,\n  metronomeRunning: false,\n  ventilationActive: false,\n  ventilationRate: 11,\n  showChargeMonitor: false,\n  epiActive: false,\n  epiTime: 0,\n  epiCycles: 0,\n  clockStarted: false,\n  startTime: null,\n  countdownAnnounced: {\n    5: false,\n    4: false,\n    3: false,\n    2: false,\n    1: false\n  },\n  confirmReset: false,\n  pulseFlashing: false,\n  epiFlashing: false,\n  metronomeVolume: 0.5,\n  voiceVolume: 1.0\n};\nexport const AppStateProvider = ({\n  children\n}) => {\n  _s();\n  // State variables\n  const [activeSection, setActiveSection] = useState(initialState.activeSection);\n  const [seconds, setSeconds] = useState(initialState.seconds);\n  const [pulseCheckTime, setPulseCheckTime] = useState(initialState.pulseCheckTime);\n  const [pauseTime, setPauseTime] = useState(initialState.pauseTime);\n  const [metronomeRunning, setMetronomeRunning] = useState(initialState.metronomeRunning);\n  const [ventilationActive, setVentilationActive] = useState(initialState.ventilationActive);\n  const [ventilationRate, setVentilationRate] = useState(initialState.ventilationRate);\n  const [showChargeMonitor, setShowChargeMonitor] = useState(initialState.showChargeMonitor);\n  const [epiActive, setEpiActive] = useState(initialState.epiActive);\n  const [epiTime, setEpiTime] = useState(initialState.epiTime);\n  const [epiCycles, setEpiCycles] = useState(initialState.epiCycles);\n  const [clockStarted, setClockStarted] = useState(initialState.clockStarted);\n  const [startTime, setStartTime] = useState(initialState.startTime);\n  const [countdownAnnounced, setCountdownAnnounced] = useState(initialState.countdownAnnounced);\n  const [confirmReset, setConfirmReset] = useState(initialState.confirmReset);\n  const [pulseFlashing, setPulseFlashing] = useState(initialState.pulseFlashing);\n  const [epiFlashing, setEpiFlashing] = useState(initialState.epiFlashing);\n  const [metronomeVolume, setMetronomeVolume] = useState(initialState.metronomeVolume);\n  const [voiceVolume, setVoiceVolume] = useState(initialState.voiceVolume);\n\n  // Force UI refresh - Add this new state\n  const [refreshTrigger, setRefreshTrigger] = useState(0);\n\n  // Refs for safer interval handling\n  const timerIntervalRef = useRef(null);\n  const pulseIntervalRef = useRef(null);\n  const ventilationIntervalRef = useRef(null);\n  const epiIntervalRef = useRef(null);\n  const clockIntervalRef = useRef(null);\n  const metronomeTimerRef = useRef(null);\n  const lastMetronomeTimeRef = useRef(0);\n\n  // Refs for circular function dependencies\n  const startPulseCountdownRef = useRef(null);\n  const startPauseCountdownRef = useRef(null);\n\n  // Platform detection\n  const isNative = Capacitor.isNativePlatform();\n  const isIOS = Capacitor.getPlatform() === 'ios';\n\n  // Audio path based on platform\n  const AUDIO_PATH = getAudioPath();\n\n  // Audio hooks - use the new native audio hook\n  const {\n    initAudio,\n    playSound,\n    stopSound,\n    setVolume,\n    unlockAudio,\n    releaseResources\n  } = useNativeAudio();\n\n  // Initialize all audio files\n  useEffect(() => {\n    const audioPoolSize = isNative ? 1 : 5; // Native audio doesn't need pooling\n\n    // Initialize audio pools for all sounds we'll use\n    initAudio('metronome', `${AUDIO_PATH}click.mp3`, audioPoolSize);\n    initAudio('ventilate', `${AUDIO_PATH}ventilate.mp3`, 3);\n    initAudio('chargeMonitor', `${AUDIO_PATH}charge_monitor.mp3`);\n    initAudio('stopCompression', `${AUDIO_PATH}stop_compression.mp3`);\n    initAudio('1', `${AUDIO_PATH}numbers/1.mp3`);\n    initAudio('2', `${AUDIO_PATH}numbers/2.mp3`);\n    initAudio('3', `${AUDIO_PATH}numbers/3.mp3`);\n    initAudio('4', `${AUDIO_PATH}numbers/4.mp3`);\n    initAudio('5', `${AUDIO_PATH}numbers/5.mp3`);\n\n    // Set initial volumes\n    setVolume('metronome', metronomeVolume);\n\n    // For native platforms, no need for manual unlocking\n    if (!isNative) {\n      // Unlock audio for web on first user interaction\n      document.addEventListener('click', unlockAudio, {\n        once: true\n      });\n    } else {\n      // For native platforms, set up app state listeners\n      const appStateListener = App.addListener('appStateChange', ({\n        isActive\n      }) => {\n        console.log(`App state changed: ${isActive ? 'active' : 'inactive'}`);\n        if (isActive) {\n          // App came to foreground, resume audio if needed\n          if (metronomeRunning) {\n            // Restart metronome if it was running\n            startMetronome();\n          }\n          if (ventilationActive) {\n            // Restart ventilation if it was active\n            startVentilation();\n          }\n        } else {\n          // App went to background, pause audio to be nice\n          // But keep track of what was active\n          if (timerIntervalRef.current) {\n            clearInterval(timerIntervalRef.current);\n            timerIntervalRef.current = null;\n          }\n          if (ventilationIntervalRef.current) {\n            clearInterval(ventilationIntervalRef.current);\n            ventilationIntervalRef.current = null;\n          }\n        }\n      });\n      return () => {\n        appStateListener.remove();\n      };\n    }\n    return () => {\n      if (!isNative) {\n        document.removeEventListener('click', unlockAudio);\n      }\n    };\n  }, [initAudio, unlockAudio, isNative, isIOS, metronomeVolume, metronomeRunning, ventilationActive]);\n\n  // Update volumes when state changes\n  useEffect(() => {\n    setVolume('metronome', metronomeVolume);\n  }, [metronomeVolume, setVolume]);\n  useEffect(() => {\n    // Set volume for all voice prompts\n    ['ventilate', 'chargeMonitor', 'stopCompression', '1', '2', '3', '4', '5'].forEach(id => {\n      setVolume(id, voiceVolume);\n    });\n  }, [voiceVolume, setVolume]);\n\n  // Reset all features to their initial state\n  const resetAllFeatures = useCallback(() => {\n    console.log(\"RESET FUNCTION CALLED\");\n\n    // 1. First, stop all sounds\n    try {\n      stopSound('metronome');\n      stopSound('ventilate');\n      stopSound('chargeMonitor');\n      stopSound('stopCompression');\n    } catch (e) {\n      console.error(\"Error stopping sounds:\", e);\n    }\n\n    // 2. Clear all intervals\n    console.log(\"Clearing all intervals\");\n\n    // Clear timer interval\n    if (timerIntervalRef.current) {\n      clearInterval(timerIntervalRef.current);\n      timerIntervalRef.current = null;\n    }\n    if (metronomeTimerRef.current) {\n      clearInterval(metronomeTimerRef.current);\n      metronomeTimerRef.current = null;\n    }\n\n    // Clear pulse interval\n    if (pulseIntervalRef.current) {\n      clearInterval(pulseIntervalRef.current);\n      pulseIntervalRef.current = null;\n    }\n\n    // Clear ventilation interval\n    if (ventilationIntervalRef.current) {\n      clearInterval(ventilationIntervalRef.current);\n      ventilationIntervalRef.current = null;\n    }\n\n    // Clear epi interval\n    if (epiIntervalRef.current) {\n      clearInterval(epiIntervalRef.current);\n      epiIntervalRef.current = null;\n    }\n\n    // Clear clock interval\n    if (clockIntervalRef.current) {\n      clearInterval(clockIntervalRef.current);\n      clockIntervalRef.current = null;\n    }\n\n    // 3. Reset all state variables\n    console.log(\"Resetting all state variables\");\n    setActiveSection(initialState.activeSection);\n    setSeconds(initialState.seconds);\n    setPulseCheckTime(initialState.pulseCheckTime);\n    setPauseTime(initialState.pauseTime);\n    setMetronomeRunning(initialState.metronomeRunning);\n    setVentilationActive(initialState.ventilationActive);\n    setShowChargeMonitor(initialState.showChargeMonitor);\n    setEpiActive(initialState.epiActive);\n    setEpiTime(initialState.epiTime);\n    setEpiCycles(initialState.epiCycles);\n    setClockStarted(initialState.clockStarted);\n    setStartTime(initialState.startTime);\n    setCountdownAnnounced(initialState.countdownAnnounced);\n    setConfirmReset(initialState.confirmReset);\n    setPulseFlashing(initialState.pulseFlashing);\n    setEpiFlashing(initialState.epiFlashing);\n\n    // 4. Trigger a UI refresh\n    setRefreshTrigger(prev => prev + 1);\n    console.log(\"Reset completed\");\n  }, [stopSound]); // Only depend on stopSound\n\n  // Start the main clock\n  const startClock = useCallback(() => {\n    if (clockIntervalRef.current) {\n      clearInterval(clockIntervalRef.current);\n    }\n    const interval = setInterval(() => {\n      setSeconds(prev => prev + 1);\n    }, 1000);\n    clockIntervalRef.current = interval;\n    setClockStarted(true);\n  }, []);\n\n  // Reset the main clock\n  const resetClock = useCallback(() => {\n    setSeconds(0);\n    setConfirmReset(false);\n\n    // Only start the clock if there's an active feature\n    if (!clockStarted && (activeSection || ventilationActive || epiActive)) {\n      startClock();\n    } else if (!activeSection && !ventilationActive && !epiActive) {\n      // If everything is inactive, just reset without starting\n      if (clockIntervalRef.current) {\n        clearInterval(clockIntervalRef.current);\n        clockIntervalRef.current = null;\n      }\n      setClockStarted(false);\n    }\n  }, [clockStarted, startClock, activeSection, ventilationActive, epiActive]);\n\n  // Handle timer click to show confirmation\n  const handleTimerClick = useCallback(() => {\n    // If timer is already at 0, no need for confirmation\n    if (seconds === 0) return;\n\n    // Show confirmation dialog\n    setConfirmReset(true);\n  }, [seconds]);\n\n  // Cancel reset\n  const cancelReset = useCallback(() => {\n    setConfirmReset(false);\n  }, []);\n\n  // Start metronome - improved timing for native\n  const startMetronome = useCallback(() => {\n    if (metronomeTimerRef.current) {\n      clearInterval(metronomeTimerRef.current);\n      metronomeTimerRef.current = null;\n    }\n    const bpm = 110;\n    const intervalMs = 60000 / bpm;\n\n    // 🎯 Play the first click immediately\n    playSound('metronome');\n\n    // 🎯 Then schedule repeated clicks\n    metronomeTimerRef.current = setInterval(() => {\n      playSound('metronome');\n    }, intervalMs);\n  }, [playSound]);\n\n  // Stop metronome\n  const stopMetronome = useCallback(() => {\n    if (metronomeTimerRef.current) {\n      clearInterval(metronomeTimerRef.current);\n      metronomeTimerRef.current = null;\n    }\n    stopSound('metronome');\n  }, [stopSound]);\n\n  // Start ventilation timer\n  const startVentilation = useCallback(() => {\n    if (ventilationIntervalRef.current) {\n      clearInterval(ventilationIntervalRef.current);\n      ventilationIntervalRef.current = null;\n    }\n\n    // Play immediately on start\n    playSound('ventilate');\n    const intervalTime = 60 / ventilationRate * 1000;\n    ventilationIntervalRef.current = setInterval(() => {\n      playSound('ventilate');\n    }, intervalTime);\n  }, [playSound, ventilationRate]);\n\n  // Toggle ventilation\n  const toggleVentilation = useCallback(() => {\n    // Start the main timer if this is the first feature activated\n    if (!clockStarted && !activeSection && !ventilationActive && !epiActive) {\n      startClock();\n      setStartTime(new Date());\n    }\n    setVentilationActive(prev => {\n      const newState = !prev;\n      if (newState) {\n        // Starting ventilation\n        startVentilation();\n      } else {\n        // Stopping ventilation\n        if (ventilationIntervalRef.current) {\n          clearInterval(ventilationIntervalRef.current);\n          ventilationIntervalRef.current = null;\n        }\n        stopSound('ventilate');\n      }\n      return newState;\n    });\n  }, [clockStarted, startClock, activeSection, ventilationActive, epiActive, startVentilation, stopSound]);\n\n  // Metronome functions\n  const handleMetronomeClick = useCallback(() => {\n    // Start the main timer if this is the first feature activated\n    if (!clockStarted && !activeSection && !ventilationActive && !epiActive) {\n      startClock();\n      setStartTime(new Date());\n    }\n    if (activeSection === 'metronome' || activeSection === 'pulse+metronome') {\n      if (activeSection === 'pulse+metronome') {\n        setActiveSection('pulse');\n        stopMetronome();\n      } else {\n        setActiveSection(null);\n        stopMetronome();\n      }\n    } else {\n      if (activeSection === 'pulse') {\n        setActiveSection('pulse+metronome');\n        startMetronome();\n      } else {\n        setActiveSection('metronome');\n        startMetronome();\n        // Only set start time if it hasn't been set yet\n        if (!startTime) {\n          setStartTime(new Date());\n        }\n      }\n    }\n  }, [activeSection, clockStarted, startClock, ventilationActive, epiActive, startTime, startMetronome, stopMetronome]);\n\n  // Define startPulseCountdown with reference to the ref instead of direct function\n  const startPulseCountdown = useCallback(() => {\n    // Clear any existing interval first\n    if (pulseIntervalRef.current) {\n      clearInterval(pulseIntervalRef.current);\n    }\n\n    // Reset the counter to 0\n    setPulseCheckTime(0);\n    pulseIntervalRef.current = setInterval(() => {\n      setPulseCheckTime(prevTime => {\n        const newTime = prevTime + 1;\n\n        // Show charge monitor warning at 1:45 (105 seconds)\n        if (newTime === 105) {\n          setShowChargeMonitor(true);\n          playSound('chargeMonitor');\n          setPulseFlashing(true);\n        }\n\n        // Countdown for last 5 seconds - directly matching the timer display\n        if (newTime === 115) playSound('5'); // 1:55\n        if (newTime === 116) playSound('4'); // 1:56\n        if (newTime === 117) playSound('3'); // 1:57\n        if (newTime === 118) playSound('2'); // 1:58\n        if (newTime === 119) playSound('1'); // 1:59\n\n        // Handle the \"stopCompression\" at exactly 2:00 (120 seconds)\n        if (newTime === 120) {\n          playSound('stopCompression');\n          setPulseFlashing(false);\n\n          // Clear this interval and start the pause countdown\n          clearInterval(pulseIntervalRef.current);\n          startPauseCountdownRef.current();\n          return 120; // Keep it at 120\n        }\n        return newTime;\n      });\n    }, 1000);\n  }, [playSound]);\n\n  // Reimplemented to count up instead of down\n  const startPauseCountdown = useCallback(() => {\n    // Reset the pause counter to 0\n    setPauseTime(0);\n\n    // Start a new interval for the pause countdown\n    pulseIntervalRef.current = setInterval(() => {\n      setPauseTime(prevPauseTime => {\n        const newTime = prevPauseTime + 1;\n\n        // When pause countdown reaches 10 seconds\n        if (newTime >= 10) {\n          // Auto-restart the pulse check countdown\n          setPulseCheckTime(0);\n          setShowChargeMonitor(false);\n          setCountdownAnnounced({\n            5: false,\n            4: false,\n            3: false,\n            2: false,\n            1: false\n          });\n\n          // Clear this interval and restart the pulse countdown\n          clearInterval(pulseIntervalRef.current);\n          startPulseCountdownRef.current();\n          return 0; // Reset the pause time for next time\n        }\n        return newTime;\n      });\n    }, 1000);\n  }, []);\n\n  // Assign the functions to the refs after they're defined\n  useEffect(() => {\n    startPulseCountdownRef.current = startPulseCountdown;\n    startPauseCountdownRef.current = startPauseCountdown;\n  }, [startPulseCountdown, startPauseCountdown]);\n\n  // Handle pulse check click\n  const handlePulseCheckClick = useCallback(() => {\n    // Start the main timer if this is the first feature activated\n    if (!clockStarted && !activeSection && !ventilationActive && !epiActive) {\n      startClock();\n      setStartTime(new Date());\n    }\n    if (activeSection === 'pulse' || activeSection === 'pulse+metronome') {\n      if (activeSection === 'pulse+metronome') {\n        setActiveSection('metronome');\n      } else {\n        setActiveSection(null);\n      }\n\n      // Clear both intervals to be safe\n      if (pulseIntervalRef.current) {\n        clearInterval(pulseIntervalRef.current);\n        pulseIntervalRef.current = null;\n      }\n      setPulseFlashing(false); // Stop flashing\n    } else {\n      if (activeSection === 'metronome') {\n        setActiveSection('pulse+metronome');\n      } else {\n        setActiveSection('pulse');\n      }\n\n      // Reset all values\n      setPulseCheckTime(0); // Start at 0 for count up\n      setPauseTime(0); // Start at 0 for count up\n      setShowChargeMonitor(false);\n      setCountdownAnnounced({\n        5: false,\n        4: false,\n        3: false,\n        2: false,\n        1: false\n      });\n\n      // Start the main pulse check countdown using the ref\n      startPulseCountdownRef.current();\n    }\n  }, [activeSection, clockStarted, startClock, ventilationActive, epiActive]);\n\n  // Epinephrine functions - modified for count-up and cycle counting\n  const handleEpinephrineClick = useCallback(() => {\n    // Start the main timer if this is the first feature activated\n    if (!clockStarted && !activeSection && !ventilationActive && !epiActive) {\n      startClock();\n      setStartTime(new Date());\n    }\n\n    // Toggle or reset epinephrine state\n    if (epiActive) {\n      // If already active, restart the timer and increment cycle count\n      setEpiTime(0);\n      setEpiCycles(prev => prev + 1);\n      setEpiFlashing(false);\n    } else {\n      // If turning on, set initial state with cycle count of 1 (first dose)\n      setEpiTime(0);\n      setEpiCycles(1); // Start at 1 instead of 0\n      setEpiActive(true);\n    }\n  }, [clockStarted, startClock, activeSection, ventilationActive, epiActive]);\n\n  // Add a function to turn off epinephrine completely (long press or separate button)\n  const turnOffEpinephrine = useCallback(() => {\n    setEpiActive(false);\n    setEpiTime(0);\n    setEpiCycles(0); // Reset cycles to 0 when turning off completely\n    setEpiFlashing(false);\n\n    // Clear interval\n    if (epiIntervalRef.current) {\n      clearInterval(epiIntervalRef.current);\n      epiIntervalRef.current = null;\n    }\n  }, []);\n\n  // Update metronome state based on activeSection\n  useEffect(() => {\n    if (activeSection === 'metronome' || activeSection === 'pulse+metronome') {\n      setMetronomeRunning(true);\n      // Start metronome if not already running\n      if (!metronomeTimerRef.current) {\n        startMetronome();\n      }\n    } else {\n      setMetronomeRunning(false);\n      // Stop metronome if running\n      if (metronomeTimerRef.current) {\n        stopMetronome();\n      }\n    }\n    if (!activeSection && !ventilationActive && !epiActive && clockStarted) {\n      if (clockIntervalRef.current) {\n        clearInterval(clockIntervalRef.current);\n        clockIntervalRef.current = null;\n      }\n      setSeconds(0);\n      setClockStarted(false);\n    }\n  }, [activeSection, ventilationActive, epiActive, clockStarted, startMetronome, stopMetronome]);\n\n  // Ventilation timer effect\n  useEffect(() => {\n    if (!ventilationActive) {\n      if (ventilationIntervalRef.current) {\n        clearInterval(ventilationIntervalRef.current);\n        ventilationIntervalRef.current = null;\n        stopSound('ventilate');\n      }\n      return;\n    }\n\n    // If ventilation is active but interval isn't running, start it\n    if (!ventilationIntervalRef.current) {\n      startVentilation();\n    }\n\n    // If ventilation rate changes, restart the interval\n    if (ventilationActive && ventilationIntervalRef.current) {\n      clearInterval(ventilationIntervalRef.current);\n      startVentilation();\n    }\n  }, [ventilationActive, ventilationRate, startVentilation, stopSound]);\n\n  // Epinephrine timer effect - modified for count-up\n  useEffect(() => {\n    if (!epiActive) {\n      if (epiIntervalRef.current) {\n        clearInterval(epiIntervalRef.current);\n        epiIntervalRef.current = null;\n      }\n      setEpiFlashing(false); // Ensure flashing stops when deactivated\n      return;\n    }\n\n    // Only start if not already running\n    if (!epiIntervalRef.current) {\n      epiIntervalRef.current = setInterval(() => {\n        setEpiTime(prevTime => {\n          const newTime = prevTime + 1;\n\n          // Start flashing when we reach 4:45 (285 seconds)\n          if (newTime === 285) {\n            setEpiFlashing(true);\n          }\n\n          // Continue counting up indefinitely until button is clicked again\n          // No automatic cycle increment based on time\n          return newTime;\n        });\n      }, 1000);\n    }\n    return () => {\n      if (epiIntervalRef.current) {\n        clearInterval(epiIntervalRef.current);\n        epiIntervalRef.current = null;\n      }\n    };\n  }, [epiActive]);\n\n  // Format seconds to MM:SS\n  const formatTime = totalSeconds => {\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  };\n\n  // Format time as 24-hour clock HH:MM\n  const formatClock = date => {\n    if (!date) return \"--:--\";\n    const hours = date.getHours().toString().padStart(2, '0');\n    const minutes = date.getMinutes().toString().padStart(2, '0');\n    return `${hours}:${minutes}`;\n  };\n\n  // Cleanup all intervals on unmount\n  useEffect(() => {\n    return () => {\n      [timerIntervalRef, pulseIntervalRef, ventilationIntervalRef, epiIntervalRef, clockIntervalRef, metronomeTimerRef].forEach(ref => {\n        if (ref && ref.current) {\n          clearInterval(ref.current);\n          ref.current = null;\n        }\n      });\n\n      // Release audio resources\n      releaseResources();\n    };\n  }, [releaseResources]);\n\n  // Exposed context value\n  const contextValue = {\n    // State\n    activeSection,\n    seconds,\n    pulseCheckTime,\n    pauseTime,\n    metronomeRunning,\n    ventilationActive,\n    ventilationRate,\n    showChargeMonitor,\n    epiActive,\n    epiTime,\n    epiCycles,\n    clockStarted,\n    startTime,\n    countdownAnnounced,\n    confirmReset,\n    pulseFlashing,\n    epiFlashing,\n    refreshTrigger,\n    metronomeVolume,\n    voiceVolume,\n    isNative,\n    isIOS,\n    // Actions\n    setVentilationRate,\n    handleTimerClick,\n    resetClock,\n    cancelReset,\n    toggleVentilation,\n    handleMetronomeClick,\n    handlePulseCheckClick,\n    handleEpinephrineClick,\n    turnOffEpinephrine,\n    resetAllFeatures,\n    setMetronomeVolume,\n    setVoiceVolume,\n    // Utilities\n    formatTime,\n    formatClock,\n    COLORS\n  };\n  return /*#__PURE__*/_jsxDEV(AppStateContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 730,\n    columnNumber: 5\n  }, this);\n};\n// This export needs to be OUTSIDE of the AppStateProvider component\n_s(AppStateProvider, \"lxeWWQf0qhy5RxpTGf406Bar5eQ=\", false, function () {\n  return [useNativeAudio];\n});\n_c = AppStateProvider;\nexport const useAppState = () => {\n  _s2();\n  const context = useContext(AppStateContext);\n  if (context === undefined) {\n    throw new Error('useAppState must be used within an AppStateProvider');\n  }\n  return context;\n};\n_s2(useAppState, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AppStateProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","useRef","Capacitor","App","useNativeAudio","jsxDEV","_jsxDEV","COLORS","background","logoRed","logoYellow","pulseBlue","ventGreen","white","darkText","timerBg","sliderBg","AppStateContext","getAudioPath","isNativePlatform","initialState","activeSection","seconds","pulseCheckTime","pauseTime","metronomeRunning","ventilationActive","ventilationRate","showChargeMonitor","epiActive","epiTime","epiCycles","clockStarted","startTime","countdownAnnounced","confirmReset","pulseFlashing","epiFlashing","metronomeVolume","voiceVolume","AppStateProvider","children","_s","setActiveSection","setSeconds","setPulseCheckTime","setPauseTime","setMetronomeRunning","setVentilationActive","setVentilationRate","setShowChargeMonitor","setEpiActive","setEpiTime","setEpiCycles","setClockStarted","setStartTime","setCountdownAnnounced","setConfirmReset","setPulseFlashing","setEpiFlashing","setMetronomeVolume","setVoiceVolume","refreshTrigger","setRefreshTrigger","timerIntervalRef","pulseIntervalRef","ventilationIntervalRef","epiIntervalRef","clockIntervalRef","metronomeTimerRef","lastMetronomeTimeRef","startPulseCountdownRef","startPauseCountdownRef","isNative","isIOS","getPlatform","AUDIO_PATH","initAudio","playSound","stopSound","setVolume","unlockAudio","releaseResources","audioPoolSize","document","addEventListener","once","appStateListener","addListener","isActive","console","log","startMetronome","startVentilation","current","clearInterval","remove","removeEventListener","forEach","id","resetAllFeatures","e","error","prev","startClock","interval","setInterval","resetClock","handleTimerClick","cancelReset","bpm","intervalMs","stopMetronome","intervalTime","toggleVentilation","Date","newState","handleMetronomeClick","startPulseCountdown","prevTime","newTime","startPauseCountdown","prevPauseTime","handlePulseCheckClick","handleEpinephrineClick","turnOffEpinephrine","formatTime","totalSeconds","minutes","Math","floor","toString","padStart","formatClock","date","hours","getHours","getMinutes","ref","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAppState","_s2","context","undefined","Error","$RefreshReg$"],"sources":["/Users/davidhelmers/arrestpro/src/context/AppStateContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback, useRef } from 'react';\nimport { Capacitor } from '@capacitor/core';\nimport { App } from '@capacitor/app';\nimport useNativeAudio from '../hooks/useNativeAudio';\n\n// App constants\nexport const COLORS = {\n  background: '#1e2126',     // Dark background\n  logoRed: '#ff4136',        // Red from logo\n  logoYellow: '#f4eb00ff',   // Yellow from logo\n  pulseBlue: '#3498db',      // Blue for pulse check\n  ventGreen: '#2ecc40',      // Green for ventilation\n  white: '#ffffff',          // White text\n  darkText: '#1a1a1a',       // Dark text for yellow buttons\n  timerBg: '#2c3e50',        // Timer background\n  sliderBg: '#ecf0f1',       // Slider background\n};\n\n// Create the context\nconst AppStateContext = createContext();\n\n// Get the correct audio path based on platform\nconst getAudioPath = () => {\n  if (Capacitor.isNativePlatform()) {\n    // For native platforms, use relative paths to the assets directory\n    return ''; // The path will be handled by Capacitor's asset system\n  } else {\n    // For web, use the public folder path\n    return '/audio/';\n  }\n};\n\n// Initial state - used for reset\nconst initialState = {\n  activeSection: null,\n  seconds: 0,\n  pulseCheckTime: 0,\n  pauseTime: 0,\n  metronomeRunning: false,\n  ventilationActive: false,\n  ventilationRate: 11,\n  showChargeMonitor: false,\n  epiActive: false,\n  epiTime: 0,\n  epiCycles: 0,\n  clockStarted: false,\n  startTime: null,\n  countdownAnnounced: {5: false, 4: false, 3: false, 2: false, 1: false},\n  confirmReset: false,\n  pulseFlashing: false,\n  epiFlashing: false,\n  metronomeVolume: 0.5,\n  voiceVolume: 1.0\n};\n\nexport const AppStateProvider = ({ children }) => {\n  // State variables\n  const [activeSection, setActiveSection] = useState(initialState.activeSection);\n  const [seconds, setSeconds] = useState(initialState.seconds);\n  const [pulseCheckTime, setPulseCheckTime] = useState(initialState.pulseCheckTime);\n  const [pauseTime, setPauseTime] = useState(initialState.pauseTime);\n  const [metronomeRunning, setMetronomeRunning] = useState(initialState.metronomeRunning);\n  const [ventilationActive, setVentilationActive] = useState(initialState.ventilationActive);\n  const [ventilationRate, setVentilationRate] = useState(initialState.ventilationRate);\n  const [showChargeMonitor, setShowChargeMonitor] = useState(initialState.showChargeMonitor);\n  const [epiActive, setEpiActive] = useState(initialState.epiActive);\n  const [epiTime, setEpiTime] = useState(initialState.epiTime);\n  const [epiCycles, setEpiCycles] = useState(initialState.epiCycles);\n  const [clockStarted, setClockStarted] = useState(initialState.clockStarted);\n  const [startTime, setStartTime] = useState(initialState.startTime);\n  const [countdownAnnounced, setCountdownAnnounced] = useState(initialState.countdownAnnounced);\n  const [confirmReset, setConfirmReset] = useState(initialState.confirmReset);\n  const [pulseFlashing, setPulseFlashing] = useState(initialState.pulseFlashing);\n  const [epiFlashing, setEpiFlashing] = useState(initialState.epiFlashing);\n  const [metronomeVolume, setMetronomeVolume] = useState(initialState.metronomeVolume);\n  const [voiceVolume, setVoiceVolume] = useState(initialState.voiceVolume);\n  \n  // Force UI refresh - Add this new state\n  const [refreshTrigger, setRefreshTrigger] = useState(0);\n\n  // Refs for safer interval handling\n  const timerIntervalRef = useRef(null);\n  const pulseIntervalRef = useRef(null);\n  const ventilationIntervalRef = useRef(null);\n  const epiIntervalRef = useRef(null);\n  const clockIntervalRef = useRef(null);\n  const metronomeTimerRef = useRef(null);\n  const lastMetronomeTimeRef = useRef(0);\n\n  // Refs for circular function dependencies\n  const startPulseCountdownRef = useRef(null);\n  const startPauseCountdownRef = useRef(null);\n\n  // Platform detection\n  const isNative = Capacitor.isNativePlatform();\n  const isIOS = Capacitor.getPlatform() === 'ios';\n\n  // Audio path based on platform\n  const AUDIO_PATH = getAudioPath();\n\n  // Audio hooks - use the new native audio hook\n  const { initAudio, playSound, stopSound, setVolume, unlockAudio, releaseResources } = useNativeAudio();\n\n  // Initialize all audio files\n  useEffect(() => {\n    const audioPoolSize = isNative ? 1 : 5; // Native audio doesn't need pooling\n    \n    // Initialize audio pools for all sounds we'll use\n    initAudio('metronome', `${AUDIO_PATH}click.mp3`, audioPoolSize);\n    initAudio('ventilate', `${AUDIO_PATH}ventilate.mp3`, 3);\n    initAudio('chargeMonitor', `${AUDIO_PATH}charge_monitor.mp3`);\n    initAudio('stopCompression', `${AUDIO_PATH}stop_compression.mp3`);\n    initAudio('1', `${AUDIO_PATH}numbers/1.mp3`);\n    initAudio('2', `${AUDIO_PATH}numbers/2.mp3`);\n    initAudio('3', `${AUDIO_PATH}numbers/3.mp3`);\n    initAudio('4', `${AUDIO_PATH}numbers/4.mp3`);\n    initAudio('5', `${AUDIO_PATH}numbers/5.mp3`);\n    \n    // Set initial volumes\n    setVolume('metronome', metronomeVolume);\n    \n    // For native platforms, no need for manual unlocking\n    if (!isNative) {\n      // Unlock audio for web on first user interaction\n      document.addEventListener('click', unlockAudio, { once: true });\n    } else {\n      // For native platforms, set up app state listeners\n      const appStateListener = App.addListener('appStateChange', ({ isActive }) => {\n        console.log(`App state changed: ${isActive ? 'active' : 'inactive'}`);\n        \n        if (isActive) {\n          // App came to foreground, resume audio if needed\n          if (metronomeRunning) {\n            // Restart metronome if it was running\n            startMetronome();\n          }\n          \n          if (ventilationActive) {\n            // Restart ventilation if it was active\n            startVentilation();\n          }\n        } else {\n          // App went to background, pause audio to be nice\n          // But keep track of what was active\n          if (timerIntervalRef.current) {\n            clearInterval(timerIntervalRef.current);\n            timerIntervalRef.current = null;\n          }\n          \n          if (ventilationIntervalRef.current) {\n            clearInterval(ventilationIntervalRef.current);\n            ventilationIntervalRef.current = null;\n          }\n        }\n      });\n      \n      return () => {\n        appStateListener.remove();\n      };\n    }\n    \n    return () => {\n      if (!isNative) {\n        document.removeEventListener('click', unlockAudio);\n      }\n    };\n  }, [initAudio, unlockAudio, isNative, isIOS, metronomeVolume, metronomeRunning, ventilationActive]);\n\n  // Update volumes when state changes\n  useEffect(() => {\n    setVolume('metronome', metronomeVolume);\n  }, [metronomeVolume, setVolume]);\n  \n  useEffect(() => {\n    // Set volume for all voice prompts\n    ['ventilate', 'chargeMonitor', 'stopCompression', '1', '2', '3', '4', '5'].forEach(id => {\n      setVolume(id, voiceVolume);\n    });\n  }, [voiceVolume, setVolume]);\n\n  // Reset all features to their initial state\n  const resetAllFeatures = useCallback(() => {\n    console.log(\"RESET FUNCTION CALLED\");\n    \n    // 1. First, stop all sounds\n    try {\n      stopSound('metronome');\n      stopSound('ventilate');\n      stopSound('chargeMonitor');\n      stopSound('stopCompression');\n    } catch (e) {\n      console.error(\"Error stopping sounds:\", e);\n    }\n    \n    // 2. Clear all intervals\n    console.log(\"Clearing all intervals\");\n    \n    // Clear timer interval\n    if (timerIntervalRef.current) {\n      clearInterval(timerIntervalRef.current);\n      timerIntervalRef.current = null;\n    }\n    \n    if (metronomeTimerRef.current) {\n      clearInterval(metronomeTimerRef.current);\n      metronomeTimerRef.current = null;\n    }\n    \n    // Clear pulse interval\n    if (pulseIntervalRef.current) {\n      clearInterval(pulseIntervalRef.current);\n      pulseIntervalRef.current = null;\n    }\n    \n    // Clear ventilation interval\n    if (ventilationIntervalRef.current) {\n      clearInterval(ventilationIntervalRef.current);\n      ventilationIntervalRef.current = null;\n    }\n    \n    // Clear epi interval\n    if (epiIntervalRef.current) {\n      clearInterval(epiIntervalRef.current);\n      epiIntervalRef.current = null;\n    }\n    \n    // Clear clock interval\n    if (clockIntervalRef.current) {\n      clearInterval(clockIntervalRef.current);\n      clockIntervalRef.current = null;\n    }\n    \n    // 3. Reset all state variables\n    console.log(\"Resetting all state variables\");\n    \n    setActiveSection(initialState.activeSection);\n    setSeconds(initialState.seconds);\n    setPulseCheckTime(initialState.pulseCheckTime);\n    setPauseTime(initialState.pauseTime);\n    setMetronomeRunning(initialState.metronomeRunning);\n    setVentilationActive(initialState.ventilationActive);\n    setShowChargeMonitor(initialState.showChargeMonitor);\n    setEpiActive(initialState.epiActive);\n    setEpiTime(initialState.epiTime);\n    setEpiCycles(initialState.epiCycles);\n    setClockStarted(initialState.clockStarted);\n    setStartTime(initialState.startTime);\n    setCountdownAnnounced(initialState.countdownAnnounced);\n    setConfirmReset(initialState.confirmReset);\n    setPulseFlashing(initialState.pulseFlashing);\n    setEpiFlashing(initialState.epiFlashing);\n    \n    // 4. Trigger a UI refresh\n    setRefreshTrigger(prev => prev + 1);\n    \n    console.log(\"Reset completed\");\n  }, [stopSound]); // Only depend on stopSound\n\n  // Start the main clock\n  const startClock = useCallback(() => {\n    if (clockIntervalRef.current) {\n      clearInterval(clockIntervalRef.current);\n    }\n    \n    const interval = setInterval(() => {\n      setSeconds(prev => prev + 1);\n    }, 1000);\n    \n    clockIntervalRef.current = interval;\n    setClockStarted(true);\n  }, []);\n  \n  // Reset the main clock\n  const resetClock = useCallback(() => {\n    setSeconds(0);\n    setConfirmReset(false);\n    \n    // Only start the clock if there's an active feature\n    if (!clockStarted && (activeSection || ventilationActive || epiActive)) {\n      startClock();\n    } else if (!activeSection && !ventilationActive && !epiActive) {\n      // If everything is inactive, just reset without starting\n      if (clockIntervalRef.current) {\n        clearInterval(clockIntervalRef.current);\n        clockIntervalRef.current = null;\n      }\n      setClockStarted(false);\n    }\n  }, [clockStarted, startClock, activeSection, ventilationActive, epiActive]);\n  \n  // Handle timer click to show confirmation\n  const handleTimerClick = useCallback(() => {\n    // If timer is already at 0, no need for confirmation\n    if (seconds === 0) return;\n    \n    // Show confirmation dialog\n    setConfirmReset(true);\n  }, [seconds]);\n  \n  // Cancel reset\n  const cancelReset = useCallback(() => {\n    setConfirmReset(false);\n  }, []);\n\n  // Start metronome - improved timing for native\n  const startMetronome = useCallback(() => {\n    if (metronomeTimerRef.current) {\n      clearInterval(metronomeTimerRef.current);\n      metronomeTimerRef.current = null;\n    }\n  \n    const bpm = 110;\n    const intervalMs = 60000 / bpm;\n  \n    // 🎯 Play the first click immediately\n    playSound('metronome');\n  \n    // 🎯 Then schedule repeated clicks\n    metronomeTimerRef.current = setInterval(() => {\n      playSound('metronome');\n    }, intervalMs);\n  }, [playSound]);\n  \n  \n  // Stop metronome\n  const stopMetronome = useCallback(() => {\n    if (metronomeTimerRef.current) {\n      clearInterval(metronomeTimerRef.current);\n      metronomeTimerRef.current = null;\n    }\n    \n    stopSound('metronome');\n  }, [stopSound]);\n\n  // Start ventilation timer\n  const startVentilation = useCallback(() => {\n    if (ventilationIntervalRef.current) {\n      clearInterval(ventilationIntervalRef.current);\n      ventilationIntervalRef.current = null;\n    }\n    \n    // Play immediately on start\n    playSound('ventilate');\n    \n    const intervalTime = (60 / ventilationRate) * 1000;\n    \n    ventilationIntervalRef.current = setInterval(() => {\n      playSound('ventilate');\n    }, intervalTime);\n  }, [playSound, ventilationRate]);\n\n  // Toggle ventilation\n  const toggleVentilation = useCallback(() => {\n    // Start the main timer if this is the first feature activated\n    if (!clockStarted && !activeSection && !ventilationActive && !epiActive) {\n      startClock();\n      setStartTime(new Date());\n    }\n    \n    setVentilationActive(prev => {\n      const newState = !prev;\n      \n      if (newState) {\n        // Starting ventilation\n        startVentilation();\n      } else {\n        // Stopping ventilation\n        if (ventilationIntervalRef.current) {\n          clearInterval(ventilationIntervalRef.current);\n          ventilationIntervalRef.current = null;\n        }\n        stopSound('ventilate');\n      }\n      \n      return newState;\n    });\n  }, [clockStarted, startClock, activeSection, ventilationActive, epiActive, startVentilation, stopSound]);\n\n  // Metronome functions\n  const handleMetronomeClick = useCallback(() => {\n    // Start the main timer if this is the first feature activated\n    if (!clockStarted && !activeSection && !ventilationActive && !epiActive) {\n      startClock();\n      setStartTime(new Date());\n    }\n    \n    if (activeSection === 'metronome' || activeSection === 'pulse+metronome') {\n      if (activeSection === 'pulse+metronome') {\n        setActiveSection('pulse');\n        stopMetronome();\n      } else {\n        setActiveSection(null);\n        stopMetronome();\n      }\n    } else {\n      if (activeSection === 'pulse') {\n        setActiveSection('pulse+metronome');\n        startMetronome();\n      } else {\n        setActiveSection('metronome');\n        startMetronome();\n        // Only set start time if it hasn't been set yet\n        if (!startTime) {\n          setStartTime(new Date());\n        }\n      }\n    }\n  }, [activeSection, clockStarted, startClock, ventilationActive, epiActive, startTime, startMetronome, stopMetronome]);\n\n  // Define startPulseCountdown with reference to the ref instead of direct function\n  const startPulseCountdown = useCallback(() => {\n    // Clear any existing interval first\n    if (pulseIntervalRef.current) {\n      clearInterval(pulseIntervalRef.current);\n    }\n    \n    // Reset the counter to 0\n    setPulseCheckTime(0);\n    \n    pulseIntervalRef.current = setInterval(() => {\n      setPulseCheckTime(prevTime => {\n        const newTime = prevTime + 1;\n        \n        // Show charge monitor warning at 1:45 (105 seconds)\n        if (newTime === 105) {\n          setShowChargeMonitor(true);\n          playSound('chargeMonitor');\n          setPulseFlashing(true);\n        }\n\n        // Countdown for last 5 seconds - directly matching the timer display\n        if (newTime === 115) playSound('5'); // 1:55\n        if (newTime === 116) playSound('4'); // 1:56\n        if (newTime === 117) playSound('3'); // 1:57\n        if (newTime === 118) playSound('2'); // 1:58\n        if (newTime === 119) playSound('1'); // 1:59\n        \n        // Handle the \"stopCompression\" at exactly 2:00 (120 seconds)\n        if (newTime === 120) {\n          playSound('stopCompression');\n          setPulseFlashing(false);\n          \n          // Clear this interval and start the pause countdown\n          clearInterval(pulseIntervalRef.current);\n          startPauseCountdownRef.current();\n          \n          return 120; // Keep it at 120\n        }\n        \n        return newTime;\n      });\n    }, 1000);\n  }, [playSound]);\n\n  // Reimplemented to count up instead of down\n  const startPauseCountdown = useCallback(() => {\n    // Reset the pause counter to 0\n    setPauseTime(0);\n    \n    // Start a new interval for the pause countdown\n    pulseIntervalRef.current = setInterval(() => {\n      setPauseTime(prevPauseTime => {\n        const newTime = prevPauseTime + 1;\n        \n        // When pause countdown reaches 10 seconds\n        if (newTime >= 10) {\n          // Auto-restart the pulse check countdown\n          setPulseCheckTime(0);\n          setShowChargeMonitor(false);\n          setCountdownAnnounced({ 5: false, 4: false, 3: false, 2: false, 1: false });\n          \n          // Clear this interval and restart the pulse countdown\n          clearInterval(pulseIntervalRef.current);\n          startPulseCountdownRef.current();\n          \n          return 0; // Reset the pause time for next time\n        }\n        \n        return newTime;\n      });\n    }, 1000);\n  }, []);\n\n  // Assign the functions to the refs after they're defined\n  useEffect(() => {\n    startPulseCountdownRef.current = startPulseCountdown;\n    startPauseCountdownRef.current = startPauseCountdown;\n  }, [startPulseCountdown, startPauseCountdown]);\n\n  // Handle pulse check click\n  const handlePulseCheckClick = useCallback(() => {\n    // Start the main timer if this is the first feature activated\n    if (!clockStarted && !activeSection && !ventilationActive && !epiActive) {\n      startClock();\n      setStartTime(new Date());\n    }\n    \n    if (activeSection === 'pulse' || activeSection === 'pulse+metronome') {\n      if (activeSection === 'pulse+metronome') {\n        setActiveSection('metronome');\n      } else {\n        setActiveSection(null);\n      }\n      \n      // Clear both intervals to be safe\n      if (pulseIntervalRef.current) {\n        clearInterval(pulseIntervalRef.current);\n        pulseIntervalRef.current = null;\n      }\n      \n      setPulseFlashing(false); // Stop flashing\n    } else {\n      if (activeSection === 'metronome') {\n        setActiveSection('pulse+metronome');\n      } else {\n        setActiveSection('pulse');\n      }\n      \n      // Reset all values\n      setPulseCheckTime(0);    // Start at 0 for count up\n      setPauseTime(0);         // Start at 0 for count up\n      setShowChargeMonitor(false);\n      setCountdownAnnounced({5: false, 4: false, 3: false, 2: false, 1: false});\n      \n      // Start the main pulse check countdown using the ref\n      startPulseCountdownRef.current();\n    }\n  }, [activeSection, clockStarted, startClock, ventilationActive, epiActive]);\n\n  // Epinephrine functions - modified for count-up and cycle counting\n  const handleEpinephrineClick = useCallback(() => {\n    // Start the main timer if this is the first feature activated\n    if (!clockStarted && !activeSection && !ventilationActive && !epiActive) {\n      startClock();\n      setStartTime(new Date());\n    }\n    \n    // Toggle or reset epinephrine state\n    if (epiActive) {\n      // If already active, restart the timer and increment cycle count\n      setEpiTime(0);\n      setEpiCycles(prev => prev + 1);\n      setEpiFlashing(false);\n    } else {\n      // If turning on, set initial state with cycle count of 1 (first dose)\n      setEpiTime(0);\n      setEpiCycles(1); // Start at 1 instead of 0\n      setEpiActive(true);\n    }\n  }, [clockStarted, startClock, activeSection, ventilationActive, epiActive]);\n\n  // Add a function to turn off epinephrine completely (long press or separate button)\n  const turnOffEpinephrine = useCallback(() => {\n    setEpiActive(false);\n    setEpiTime(0);\n    setEpiCycles(0); // Reset cycles to 0 when turning off completely\n    setEpiFlashing(false);\n    \n    // Clear interval\n    if (epiIntervalRef.current) {\n      clearInterval(epiIntervalRef.current);\n      epiIntervalRef.current = null;\n    }\n  }, []);\n\n  // Update metronome state based on activeSection\n  useEffect(() => {\n    if (activeSection === 'metronome' || activeSection === 'pulse+metronome') {\n      setMetronomeRunning(true);\n      // Start metronome if not already running\n      if (!metronomeTimerRef.current) {\n        startMetronome();\n      }\n    } else {\n      setMetronomeRunning(false);\n      // Stop metronome if running\n      if (metronomeTimerRef.current) {\n        stopMetronome();\n      }\n    }\n    \n    if (!activeSection && !ventilationActive && !epiActive && clockStarted) {\n      if (clockIntervalRef.current) {\n        clearInterval(clockIntervalRef.current);\n        clockIntervalRef.current = null;\n      }\n      setSeconds(0);\n      setClockStarted(false);\n    }\n  }, [activeSection, ventilationActive, epiActive, clockStarted, startMetronome, stopMetronome]);\n\n  // Ventilation timer effect\n  useEffect(() => {\n    if (!ventilationActive) {\n      if (ventilationIntervalRef.current) {\n        clearInterval(ventilationIntervalRef.current);\n        ventilationIntervalRef.current = null;\n        stopSound('ventilate');\n      }\n      return;\n    }\n    \n    // If ventilation is active but interval isn't running, start it\n    if (!ventilationIntervalRef.current) {\n      startVentilation();\n    }\n    \n    // If ventilation rate changes, restart the interval\n    if (ventilationActive && ventilationIntervalRef.current) {\n      clearInterval(ventilationIntervalRef.current);\n      startVentilation();\n    }\n    \n  }, [ventilationActive, ventilationRate, startVentilation, stopSound]);\n\n  // Epinephrine timer effect - modified for count-up\n  useEffect(() => {\n    if (!epiActive) {\n      if (epiIntervalRef.current) {\n        clearInterval(epiIntervalRef.current);\n        epiIntervalRef.current = null;\n      }\n      setEpiFlashing(false); // Ensure flashing stops when deactivated\n      return;\n    }\n    \n    // Only start if not already running\n    if (!epiIntervalRef.current) {\n      epiIntervalRef.current = setInterval(() => {\n        setEpiTime(prevTime => {\n          const newTime = prevTime + 1;\n          \n          // Start flashing when we reach 4:45 (285 seconds)\n          if (newTime === 285) {\n            setEpiFlashing(true);\n          }\n          \n          // Continue counting up indefinitely until button is clicked again\n          // No automatic cycle increment based on time\n          return newTime;\n        });\n      }, 1000);\n    }\n    \n    return () => {\n      if (epiIntervalRef.current) {\n        clearInterval(epiIntervalRef.current);\n        epiIntervalRef.current = null;\n      }\n    };\n  }, [epiActive]); \n\n  // Format seconds to MM:SS\n  const formatTime = (totalSeconds) => {\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  };\n  \n  // Format time as 24-hour clock HH:MM\n  const formatClock = (date) => {\n    if (!date) return \"--:--\";\n    const hours = date.getHours().toString().padStart(2, '0');\n    const minutes = date.getMinutes().toString().padStart(2, '0');\n    return `${hours}:${minutes}`;\n  };\n\n  // Cleanup all intervals on unmount\n  useEffect(() => {\n    return () => {\n      [timerIntervalRef, pulseIntervalRef, ventilationIntervalRef, epiIntervalRef, clockIntervalRef, metronomeTimerRef].forEach(ref => {\n        if (ref && ref.current) {\n          clearInterval(ref.current);\n          ref.current = null;\n        }\n      });\n      \n      // Release audio resources\n      releaseResources();\n    };\n  }, [releaseResources]);\n\n  // Exposed context value\n  const contextValue = {\n    // State\n    activeSection,\n    seconds,\n    pulseCheckTime,\n    pauseTime,\n    metronomeRunning, \n    ventilationActive,\n    ventilationRate,\n    showChargeMonitor,\n    epiActive,\n    epiTime,\n    epiCycles,\n    clockStarted,\n    startTime,\n    countdownAnnounced,\n    confirmReset,\n    pulseFlashing,\n    epiFlashing,\n    refreshTrigger,\n    metronomeVolume,\n    voiceVolume,\n    isNative,\n    isIOS,\n    \n    // Actions\n    setVentilationRate,\n    handleTimerClick,\n    resetClock,\n    cancelReset,\n    toggleVentilation,\n    handleMetronomeClick,\n    handlePulseCheckClick,\n    handleEpinephrineClick,\n    turnOffEpinephrine,\n    resetAllFeatures,\n    setMetronomeVolume,\n    setVoiceVolume,\n    \n    // Utilities\n    formatTime,\n    formatClock,\n    COLORS\n  };\n\n  return (\n    <AppStateContext.Provider value={contextValue}>\n      {children}\n    </AppStateContext.Provider>\n  );\n};\n// This export needs to be OUTSIDE of the AppStateProvider component\nexport const useAppState = () => {\n  const context = useContext(AppStateContext);\n  if (context === undefined) {\n    throw new Error('useAppState must be used within an AppStateProvider');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}