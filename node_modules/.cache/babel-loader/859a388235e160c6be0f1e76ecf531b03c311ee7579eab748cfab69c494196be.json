{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useRef, useCallback, useEffect } from 'react';\n\n// Detection for iOS device\nconst isIOS = () => {\n  return /iPad|iPhone|iPod/.test(navigator.userAgent) || navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1;\n};\n\n// The AudioPool helps manage multiple audio instances for concurrent playback\nclass AudioPool {\n  constructor(src, poolSize = 3, volume = 1.0) {\n    this.src = src;\n    this.poolSize = poolSize;\n\n    // Set different volume levels based on platform\n    // Keep metronome louder on iOS since iOS is reducing volume\n    this.volume = isIOS() ? src.includes('click.mp3') ? 0.8 : 1.0 :\n    // On iOS: metronome at 80%, others at 100%\n    src.includes('click.mp3') ? 0.2 : 1.0; // On desktop: metronome at 20%, others at 100%\n\n    this.audioElements = [];\n    this.currentIndex = 0;\n    console.log(`Creating audio pool for ${src} with volume ${this.volume}`);\n\n    // Create the audio pool\n    for (let i = 0; i < poolSize; i++) {\n      const audio = new Audio(src);\n      audio.preload = 'auto';\n\n      // Force load the audio data\n      if (isIOS()) {\n        audio.load();\n      }\n\n      // Set the volume - ensuring it applies\n      audio.volume = this.volume;\n      this.audioElements.push(audio);\n    }\n  }\n  play() {\n    // Get the next audio element in the pool\n    const audio = this.audioElements[this.currentIndex];\n\n    // Reset the audio if it's already playing or has played\n    if (!audio.paused) {\n      audio.pause();\n      audio.currentTime = 0;\n    }\n\n    // Ensure volume is correct (in case it was changed)\n    audio.volume = this.volume;\n\n    // On iOS, we need a stronger reset before playing\n    if (isIOS()) {\n      try {\n        // This can help with iOS audio issues\n        audio.currentTime = 0;\n\n        // Double-check volume\n        audio.volume = this.volume;\n      } catch (e) {\n        console.warn('iOS audio reset error:', e);\n      }\n    }\n\n    // Play the audio and handle any errors for iOS\n    const playPromise = audio.play();\n    if (playPromise !== undefined) {\n      playPromise.catch(error => {\n        // Auto-play prevented (iOS often requires user interaction first)\n        console.warn('Audio play prevented:', error);\n      });\n    }\n\n    // Move to the next audio element for the next call\n    this.currentIndex = (this.currentIndex + 1) % this.poolSize;\n    return audio;\n  }\n  stop() {\n    this.audioElements.forEach(audio => {\n      audio.pause();\n      try {\n        audio.currentTime = 0;\n      } catch (e) {\n        // iOS sometimes throws errors on setting currentTime\n        console.warn('Error resetting audio time:', e);\n      }\n    });\n  }\n}\nconst useAudio = () => {\n  _s();\n  // Reference to hold our audio pools\n  const audioPoolsRef = useRef({});\n  const audioUnlockedRef = useRef(false);\n\n  // Initialize an audio pool for a specific sound\n  const initAudio = useCallback((id, src, poolSize = 3) => {\n    if (!audioPoolsRef.current[id]) {\n      audioPoolsRef.current[id] = new AudioPool(src, poolSize);\n\n      // For iOS, try to load all the audio immediately\n      if (isIOS() && !audioUnlockedRef.current) {\n        const audio = audioPoolsRef.current[id].audioElements[0];\n        audio.load();\n      }\n    }\n  }, []);\n\n  // Play a sound by its ID - with enhanced iOS handling\n  const playSound = useCallback(id => {\n    const pool = audioPoolsRef.current[id];\n    if (pool) {\n      try {\n        // Special handling for iOS devices\n        if (isIOS()) {\n          // This helps ensure audio plays reliably on iOS\n          const audio = pool.play();\n\n          // Return the audio element\n          return audio;\n        } else {\n          // Normal handling for other platforms\n          return pool.play();\n        }\n      } catch (e) {\n        console.error(`Error playing sound \"${id}\":`, e);\n        return null;\n      }\n    } else {\n      console.error(`Audio pool with ID \"${id}\" not found`);\n      return null;\n    }\n  }, []);\n\n  // Stop all instances of a sound\n  const stopSound = useCallback(id => {\n    const pool = audioPoolsRef.current[id];\n    if (pool) {\n      pool.stop();\n    }\n  }, []);\n\n  // Clean up all audio elements on unmount\n  useEffect(() => {\n    return () => {\n      // Store reference to current audio pools to avoid the React Hook warning\n      const currentAudioPools = audioPoolsRef.current;\n      Object.values(currentAudioPools).forEach(pool => {\n        pool.stop();\n      });\n    };\n  }, []);\n\n  // Improved iOS audio unlocking\n  const unlockAudio = useCallback(() => {\n    // More aggressive audio unlocking for iOS\n    if (isIOS() && !audioUnlockedRef.current) {\n      console.log(\"Attempting to unlock iOS audio...\");\n\n      // Array of different methods to try unlocking audio\n      const unlockMethods = [\n      // Method 1: Silent audio\n      () => {\n        const silentAudio = new Audio();\n        silentAudio.play().then(() => {\n          console.log(\"Unlocked audio with silent audio\");\n          audioUnlockedRef.current = true;\n        }).catch(e => console.warn(\"Silent audio unlock failed:\", e));\n      },\n      // Method 2: Play each audio source once at zero volume\n      () => {\n        Object.values(audioPoolsRef.current).forEach(pool => {\n          const audio = pool.audioElements[0];\n          const originalVolume = audio.volume;\n          audio.volume = 0;\n          audio.play().then(() => {\n            audio.pause();\n            audio.currentTime = 0;\n            audio.volume = originalVolume;\n            console.log(\"Unlocked audio by playing sample\");\n            audioUnlockedRef.current = true;\n          }).catch(e => console.warn(\"Sample audio unlock failed:\", e));\n        });\n      },\n      // Method 3: WebAudio context unlock\n      () => {\n        try {\n          // Create a web audio context\n          const AudioContext = window.AudioContext || window.webkitAudioContext;\n          if (AudioContext) {\n            const audioCtx = new AudioContext();\n\n            // Create and play a silent sound\n            const oscillator = audioCtx.createOscillator();\n            const gainNode = audioCtx.createGain();\n            gainNode.gain.value = 0;\n            oscillator.connect(gainNode);\n            gainNode.connect(audioCtx.destination);\n            oscillator.start(0);\n            oscillator.stop(0.001);\n            console.log(\"Attempted WebAudio context unlock\");\n            audioUnlockedRef.current = true;\n          }\n        } catch (e) {\n          console.warn(\"WebAudio unlock failed:\", e);\n        }\n      }];\n\n      // Try each method\n      unlockMethods.forEach(method => method());\n    }\n\n    // Mark as unlocked for non-iOS devices\n    if (!isIOS()) {\n      audioUnlockedRef.current = true;\n    }\n  }, []);\n  return {\n    initAudio,\n    playSound,\n    stopSound,\n    unlockAudio\n  };\n};\n_s(useAudio, \"9SYmIIbFnsLw4Og+pZ9HuX3owXw=\");\nexport default useAudio;","map":{"version":3,"names":["useRef","useCallback","useEffect","isIOS","test","navigator","userAgent","platform","maxTouchPoints","AudioPool","constructor","src","poolSize","volume","includes","audioElements","currentIndex","console","log","i","audio","Audio","preload","load","push","play","paused","pause","currentTime","e","warn","playPromise","undefined","catch","error","stop","forEach","useAudio","_s","audioPoolsRef","audioUnlockedRef","initAudio","id","current","playSound","pool","stopSound","currentAudioPools","Object","values","unlockAudio","unlockMethods","silentAudio","then","originalVolume","AudioContext","window","webkitAudioContext","audioCtx","oscillator","createOscillator","gainNode","createGain","gain","value","connect","destination","start","method"],"sources":["/Users/davidhelmers/arrestpro/src/hooks/useAudio.js"],"sourcesContent":["import { useRef, useCallback, useEffect } from 'react';\n\n// Detection for iOS device\nconst isIOS = () => {\n  return /iPad|iPhone|iPod/.test(navigator.userAgent) || \n    (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1);\n};\n\n// The AudioPool helps manage multiple audio instances for concurrent playback\nclass AudioPool {\n  constructor(src, poolSize = 3, volume = 1.0) {\n    this.src = src;\n    this.poolSize = poolSize;\n    \n    // Set different volume levels based on platform\n    // Keep metronome louder on iOS since iOS is reducing volume\n    this.volume = isIOS() ? \n      (src.includes('click.mp3') ? 0.8 : 1.0) :  // On iOS: metronome at 80%, others at 100%\n      (src.includes('click.mp3') ? 0.2 : 1.0);   // On desktop: metronome at 20%, others at 100%\n    \n    this.audioElements = [];\n    this.currentIndex = 0;\n    \n    console.log(`Creating audio pool for ${src} with volume ${this.volume}`);\n    \n    // Create the audio pool\n    for (let i = 0; i < poolSize; i++) {\n      const audio = new Audio(src);\n      audio.preload = 'auto';\n      \n      // Force load the audio data\n      if (isIOS()) {\n        audio.load();\n      }\n      \n      // Set the volume - ensuring it applies\n      audio.volume = this.volume;\n      \n      this.audioElements.push(audio);\n    }\n  }\n  \n  play() {\n    // Get the next audio element in the pool\n    const audio = this.audioElements[this.currentIndex];\n    \n    // Reset the audio if it's already playing or has played\n    if (!audio.paused) {\n      audio.pause();\n      audio.currentTime = 0;\n    }\n    \n    // Ensure volume is correct (in case it was changed)\n    audio.volume = this.volume;\n    \n    // On iOS, we need a stronger reset before playing\n    if (isIOS()) {\n      try {\n        // This can help with iOS audio issues\n        audio.currentTime = 0;\n        \n        // Double-check volume\n        audio.volume = this.volume;\n      } catch (e) {\n        console.warn('iOS audio reset error:', e);\n      }\n    }\n    \n    // Play the audio and handle any errors for iOS\n    const playPromise = audio.play();\n    if (playPromise !== undefined) {\n      playPromise.catch(error => {\n        // Auto-play prevented (iOS often requires user interaction first)\n        console.warn('Audio play prevented:', error);\n      });\n    }\n    \n    // Move to the next audio element for the next call\n    this.currentIndex = (this.currentIndex + 1) % this.poolSize;\n    \n    return audio;\n  }\n  \n  stop() {\n    this.audioElements.forEach(audio => {\n      audio.pause();\n      try {\n        audio.currentTime = 0;\n      } catch (e) {\n        // iOS sometimes throws errors on setting currentTime\n        console.warn('Error resetting audio time:', e);\n      }\n    });\n  }\n}\n\nconst useAudio = () => {\n  // Reference to hold our audio pools\n  const audioPoolsRef = useRef({});\n  const audioUnlockedRef = useRef(false);\n  \n  // Initialize an audio pool for a specific sound\n  const initAudio = useCallback((id, src, poolSize = 3) => {\n    if (!audioPoolsRef.current[id]) {\n      audioPoolsRef.current[id] = new AudioPool(src, poolSize);\n      \n      // For iOS, try to load all the audio immediately\n      if (isIOS() && !audioUnlockedRef.current) {\n        const audio = audioPoolsRef.current[id].audioElements[0];\n        audio.load();\n      }\n    }\n  }, []);\n  \n  // Play a sound by its ID - with enhanced iOS handling\n  const playSound = useCallback((id) => {\n    const pool = audioPoolsRef.current[id];\n    if (pool) {\n      try {\n        // Special handling for iOS devices\n        if (isIOS()) {\n          // This helps ensure audio plays reliably on iOS\n          const audio = pool.play();\n          \n          // Return the audio element\n          return audio;\n        } else {\n          // Normal handling for other platforms\n          return pool.play();\n        }\n      } catch (e) {\n        console.error(`Error playing sound \"${id}\":`, e);\n        return null;\n      }\n    } else {\n      console.error(`Audio pool with ID \"${id}\" not found`);\n      return null;\n    }\n  }, []);\n  \n  // Stop all instances of a sound\n  const stopSound = useCallback((id) => {\n    const pool = audioPoolsRef.current[id];\n    if (pool) {\n      pool.stop();\n    }\n  }, []);\n  \n  // Clean up all audio elements on unmount\n  useEffect(() => {\n    return () => {\n      // Store reference to current audio pools to avoid the React Hook warning\n      const currentAudioPools = audioPoolsRef.current;\n      Object.values(currentAudioPools).forEach(pool => {\n        pool.stop();\n      });\n    };\n  }, []);\n  \n  // Improved iOS audio unlocking\n  const unlockAudio = useCallback(() => {\n    // More aggressive audio unlocking for iOS\n    if (isIOS() && !audioUnlockedRef.current) {\n      console.log(\"Attempting to unlock iOS audio...\");\n      \n      // Array of different methods to try unlocking audio\n      const unlockMethods = [\n        // Method 1: Silent audio\n        () => {\n          const silentAudio = new Audio();\n          silentAudio.play().then(() => {\n            console.log(\"Unlocked audio with silent audio\");\n            audioUnlockedRef.current = true;\n          }).catch(e => console.warn(\"Silent audio unlock failed:\", e));\n        },\n        \n        // Method 2: Play each audio source once at zero volume\n        () => {\n          Object.values(audioPoolsRef.current).forEach(pool => {\n            const audio = pool.audioElements[0];\n            const originalVolume = audio.volume;\n            audio.volume = 0;\n            audio.play().then(() => {\n              audio.pause();\n              audio.currentTime = 0;\n              audio.volume = originalVolume;\n              console.log(\"Unlocked audio by playing sample\");\n              audioUnlockedRef.current = true;\n            }).catch(e => console.warn(\"Sample audio unlock failed:\", e));\n          });\n        },\n        \n        // Method 3: WebAudio context unlock\n        () => {\n          try {\n            // Create a web audio context\n            const AudioContext = window.AudioContext || window.webkitAudioContext;\n            if (AudioContext) {\n              const audioCtx = new AudioContext();\n              \n              // Create and play a silent sound\n              const oscillator = audioCtx.createOscillator();\n              const gainNode = audioCtx.createGain();\n              gainNode.gain.value = 0;\n              oscillator.connect(gainNode);\n              gainNode.connect(audioCtx.destination);\n              oscillator.start(0);\n              oscillator.stop(0.001);\n              \n              console.log(\"Attempted WebAudio context unlock\");\n              audioUnlockedRef.current = true;\n            }\n          } catch (e) {\n            console.warn(\"WebAudio unlock failed:\", e);\n          }\n        }\n      ];\n      \n      // Try each method\n      unlockMethods.forEach(method => method());\n    }\n    \n    // Mark as unlocked for non-iOS devices\n    if (!isIOS()) {\n      audioUnlockedRef.current = true;\n    }\n  }, []);\n  \n  return {\n    initAudio,\n    playSound,\n    stopSound,\n    unlockAudio\n  };\n};\n\nexport default useAudio;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}