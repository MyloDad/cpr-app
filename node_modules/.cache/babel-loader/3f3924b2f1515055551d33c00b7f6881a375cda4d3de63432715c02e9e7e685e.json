{"ast":null,"code":"var _jsxFileName = \"/Users/davidhelmers/arrestpro/src/CPRTempoApp.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { HeartPulse, Timer, Clock, Syringe } from 'lucide-react';\nimport styles from './CPRTempoApp.module.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CPRTempoApp = () => {\n  _s();\n  // State variables\n  const [activeSection, setActiveSection] = useState(null);\n  const [seconds, setSeconds] = useState(0);\n  const [pulseCheckTime, setPulseCheckTime] = useState(120); // 2 minutes countdown\n  const [pauseTime, setPauseTime] = useState(10); // 10 second pause countdown\n  const [metronomeRunning, setMetronomeRunning] = useState(false);\n  const [ventilationActive, setVentilationActive] = useState(false);\n  const [isVentilating, setIsVentilating] = useState(false);\n  const [ventilationProgress, setVentilationProgress] = useState(100);\n  const [bpm, setBpm] = useState(110); // Standard CPR compression rate\n  const [ventilationRate, setVentilationRate] = useState(11); // Default ventilation rate\n  const [showChargeMonitor, setShowChargeMonitor] = useState(false);\n  const [epiActive, setEpiActive] = useState(false);\n  const [epiTime, setEpiTime] = useState(300); // 5 minutes countdown\n  const [clockStarted, setClockStarted] = useState(false);\n\n  // Refs for safer interval handling\n  const audioContextRef = useRef(null);\n  const timerIntervalRef = useRef(null);\n  const pulseIntervalRef = useRef(null);\n  const ventilationIntervalRef = useRef(null);\n  const epiIntervalRef = useRef(null);\n  const clockIntervalRef = useRef(null);\n\n  // Create audio context safely\n  const createAudioContext = useCallback(() => {\n    if (!audioContextRef.current) {\n      try {\n        audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n      } catch (e) {\n        console.error(\"Failed to create audio context:\", e);\n      }\n    }\n    return audioContextRef.current;\n  }, []);\n\n  // Safely get current audio context\n  const getAudioContext = useCallback(() => {\n    return audioContextRef.current;\n  }, []);\n\n  // Start the main clock\n  const startClock = useCallback(() => {\n    // Clear any existing interval first\n    if (clockIntervalRef.current) {\n      clearInterval(clockIntervalRef.current);\n    }\n\n    // Create new interval\n    const interval = setInterval(() => {\n      setSeconds(prev => prev + 1);\n    }, 1000);\n\n    // Save reference and mark as started\n    clockIntervalRef.current = interval;\n    setClockStarted(true);\n  }, []);\n\n  // Reset the main clock\n  const resetClock = useCallback(() => {\n    setSeconds(0);\n    // Only start the clock if there's an active feature\n    if (!clockStarted && (activeSection || ventilationActive || epiActive)) {\n      startClock();\n    } else if (!activeSection && !ventilationActive && !epiActive) {\n      // If everything is inactive, just reset without starting\n      if (clockIntervalRef.current) {\n        clearInterval(clockIntervalRef.current);\n        clockIntervalRef.current = null;\n      }\n      setClockStarted(false);\n    }\n  }, [clockStarted, startClock, activeSection, ventilationActive, epiActive]);\n\n  // Toggle ventilation\n  const toggleVentilation = useCallback(() => {\n    setIsVentilating(prev => !prev);\n    setVentilationActive(prev => !prev);\n  }, []);\n\n  // Play metronome click with useCallback to avoid recreation on each render\n  const playMetronomeClick = useCallback(() => {\n    try {\n      // Create audio context if needed\n      const ctx = getAudioContext() || createAudioContext();\n      if (!ctx) return;\n\n      // Make sure context is running\n      if (ctx.state === 'suspended') {\n        ctx.resume();\n      }\n\n      // Create and play metronome sound\n      const oscillator = ctx.createOscillator();\n      oscillator.type = 'sine';\n      oscillator.frequency.value = 800;\n      oscillator.connect(ctx.destination);\n      oscillator.start();\n      oscillator.stop(ctx.currentTime + 0.05);\n    } catch (e) {\n      console.error(\"Error playing metronome sound:\", e);\n    }\n  }, [getAudioContext, createAudioContext]);\n\n  // Play ventilation sound with useCallback\n  const playVentilateSound = useCallback(() => {\n    try {\n      // Try speech synthesis first\n      if ('speechSynthesis' in window) {\n        try {\n          const utterance = new SpeechSynthesisUtterance(\"ventilate\");\n          utterance.rate = 1.0;\n          utterance.pitch = 1.0;\n          utterance.volume = 1.0;\n          window.speechSynthesis.speak(utterance);\n          return;\n        } catch (e) {\n          console.error(\"Speech synthesis failed:\", e);\n        }\n      }\n\n      // Fallback to audio tone\n      const ctx = getAudioContext() || createAudioContext();\n      if (!ctx) return;\n\n      // Make sure context is running\n      if (ctx.state === 'suspended') {\n        ctx.resume();\n      }\n\n      // Create and play ventilation sound\n      const oscillator = ctx.createOscillator();\n      const gainNode = ctx.createGain();\n      oscillator.connect(gainNode);\n      gainNode.connect(ctx.destination);\n      oscillator.type = 'sine';\n      oscillator.frequency.value = 400;\n      gainNode.gain.value = 0.6;\n      oscillator.start();\n      oscillator.stop(ctx.currentTime + 0.2);\n    } catch (e) {\n      console.error(\"Error playing ventilation sound:\", e);\n    }\n  }, [getAudioContext, createAudioContext]);\n\n  // Update metronome state based on activeSection\n  useEffect(() => {\n    if (activeSection === 'metronome' || activeSection === 'pulse+metronome') {\n      setMetronomeRunning(true);\n    } else {\n      setMetronomeRunning(false);\n    }\n\n    // Check if all features are inactive and reset/stop clock if needed\n    if (!activeSection && !ventilationActive && !epiActive && clockStarted) {\n      // Clear the clock interval to stop it\n      if (clockIntervalRef.current) {\n        clearInterval(clockIntervalRef.current);\n        clockIntervalRef.current = null;\n      }\n      // Reset the clock to 0\n      setSeconds(0);\n      setClockStarted(false);\n    }\n  }, [activeSection, ventilationActive, epiActive, clockStarted]);\n\n  // Metronome timer effect\n  useEffect(() => {\n    if (!metronomeRunning) return;\n\n    // Clear any existing timer\n    if (timerIntervalRef.current) {\n      clearInterval(timerIntervalRef.current);\n      timerIntervalRef.current = null;\n    }\n\n    // Safety check\n    if (bpm <= 0) return;\n\n    // Calculate interval and start metronome\n    const intervalTime = 60 / bpm * 1000;\n    timerIntervalRef.current = setInterval(playMetronomeClick, intervalTime);\n\n    // Play first beat immediately\n    playMetronomeClick();\n\n    // Cleanup function\n    return () => {\n      if (timerIntervalRef.current) {\n        clearInterval(timerIntervalRef.current);\n        timerIntervalRef.current = null;\n      }\n    };\n  }, [metronomeRunning, bpm, playMetronomeClick]);\n\n  // Ventilation timer effect\n  useEffect(() => {\n    if (!ventilationActive) return;\n\n    // Clear any existing ventilation timer\n    if (ventilationIntervalRef.current) {\n      clearInterval(ventilationIntervalRef.current);\n      ventilationIntervalRef.current = null;\n    }\n\n    // Safety check\n    if (ventilationRate <= 0) return;\n\n    // Calculate interval and start ventilation prompts\n    const intervalTime = 60 / ventilationRate * 1000;\n    ventilationIntervalRef.current = setInterval(playVentilateSound, intervalTime);\n\n    // Play first ventilation prompt immediately\n    playVentilateSound();\n\n    // Cleanup function\n    return () => {\n      if (ventilationIntervalRef.current) {\n        clearInterval(ventilationIntervalRef.current);\n        ventilationIntervalRef.current = null;\n      }\n    };\n  }, [ventilationActive, ventilationRate, playVentilateSound]);\n\n  // Epinephrine timer effect\n  useEffect(() => {\n    if (!epiActive) {\n      if (epiIntervalRef.current) {\n        clearInterval(epiIntervalRef.current);\n        epiIntervalRef.current = null;\n      }\n      return;\n    }\n\n    // Start countdown\n    epiIntervalRef.current = setInterval(() => {\n      setEpiTime(prevTime => {\n        if (prevTime <= 0) {\n          setEpiTime(300);\n          return 300;\n        }\n        return prevTime - 1;\n      });\n    }, 1000);\n\n    // Cleanup function\n    return () => {\n      if (epiIntervalRef.current) {\n        clearInterval(epiIntervalRef.current);\n        epiIntervalRef.current = null;\n      }\n    };\n  }, [epiActive]);\n\n  // Format seconds to MM:SS\n  const formatTime = totalSeconds => {\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  };\n\n  // Handle Metronome button click\n  const handleMetronomeClick = useCallback(() => {\n    // Initialize audio on first click\n    createAudioContext();\n\n    // Make sure clock is started\n    if (!clockStarted) {\n      startClock();\n    }\n\n    // Handle state toggling with composite states\n    if (activeSection === 'metronome' || activeSection === 'pulse+metronome') {\n      // Turn off metronome - preserve pulse if active\n      if (activeSection === 'pulse+metronome') {\n        setActiveSection('pulse');\n      } else {\n        setActiveSection(null);\n      }\n    } else {\n      // Turn on metronome - preserve pulse if active\n      if (activeSection === 'pulse') {\n        setActiveSection('pulse+metronome');\n      } else {\n        setActiveSection('metronome');\n      }\n    }\n  }, [activeSection, createAudioContext, clockStarted, startClock]);\n\n  // Handle Pulse check button click\n  const handlePulseCheckClick = useCallback(() => {\n    // Toggle pulse check state\n    if (activeSection === 'pulse' || activeSection === 'pulse+metronome') {\n      // Turning off pulse check - preserve other active states\n      if (activeSection === 'pulse+metronome') {\n        setActiveSection('metronome');\n      } else {\n        setActiveSection(null);\n      }\n\n      // Clear interval\n      if (pulseIntervalRef.current) {\n        clearInterval(pulseIntervalRef.current);\n        pulseIntervalRef.current = null;\n      }\n    } else {\n      // Turning on pulse check - preserve other active states\n      if (activeSection === 'metronome') {\n        setActiveSection('pulse+metronome');\n      } else {\n        setActiveSection('pulse');\n      }\n\n      // Reset countdown times\n      setPulseCheckTime(120);\n      setPauseTime(10);\n      setShowChargeMonitor(false);\n\n      // Start countdown\n      pulseIntervalRef.current = setInterval(() => {\n        setPulseCheckTime(prevTime => {\n          // Show charge monitor warning at 15 seconds\n          if (prevTime === 15) {\n            setShowChargeMonitor(true);\n          }\n\n          // Handle timeout\n          if (prevTime === 0) {\n            // Start pause countdown\n            setPauseTime(pauseTime => {\n              if (pauseTime <= 1) {\n                // Auto-restart when pause countdown finishes\n                setPulseCheckTime(120);\n                setShowChargeMonitor(false);\n                return 10;\n              }\n              return pauseTime - 1;\n            });\n            return 0;\n          }\n\n          // Normal countdown\n          return prevTime - 1;\n        });\n      }, 1000);\n    }\n  }, [activeSection]);\n\n  // Handle Epinephrine button click\n  const handleEpinephrineClick = useCallback(() => {\n    // Toggle epinephrine state\n    setEpiActive(prev => {\n      if (prev) {\n        // If turning off, reset time\n        setEpiTime(300);\n      }\n      return !prev;\n    });\n  }, []);\n\n  // Cleanup all intervals on unmount\n  useEffect(() => {\n    return () => {\n      // Close audio context\n      if (audioContextRef.current) {\n        audioContextRef.current.close();\n      }\n\n      // Clear all intervals\n      [timerIntervalRef, pulseIntervalRef, ventilationIntervalRef, epiIntervalRef, clockIntervalRef].forEach(ref => {\n        if (ref && ref.current) {\n          clearInterval(ref.current);\n          ref.current = null;\n        }\n      });\n    };\n  }, []);\n\n  // Render the UI\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: styles.header,\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: styles.title,\n        children: \"ArrestPro\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.appContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.timerDisplay,\n        onClick: resetClock,\n        title: \"Click to reset timer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.timerText,\n          children: formatTime(seconds)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.statusIndicators,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.statusContainer,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Metronome: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `${styles.statusDot} ${metronomeRunning ? styles.dotActive : styles.dotInactive}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: styles.statusLabel,\n              children: \"Ventilation: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `${styles.statusDot} ${ventilationActive ? styles.dotActive : styles.dotInactive}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.buttonGrid,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleMetronomeClick,\n          className: `${styles.button} ${activeSection === 'metronome' || activeSection === 'pulse+metronome' ? styles.metronomeButtonActive : styles.metronomeButton}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.buttonContent,\n            children: [/*#__PURE__*/_jsxDEV(Clock, {\n              className: styles.buttonIcon,\n              size: 24\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 423,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.buttonTextContainer,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.buttonTitle,\n                children: \"Metronome\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 425,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.buttonSubtext,\n                children: \"110 BPM - Start Compressions\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 426,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 424,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleVentilation,\n          className: `${styles.button} ${ventilationActive ? styles.ventilationButtonActive : styles.ventilationButton}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.buttonContent,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: `${styles.buttonIcon} relative w-8 h-8 flex items-center justify-center`,\n              children: ventilationActive ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"absolute\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: styles.ventilationCircle,\n                  style: {\n                    width: `${ventilationProgress}%`,\n                    height: `${ventilationProgress}%`\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 442,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 441,\n                columnNumber: 19\n              }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-2xl\",\n                children: \"\\uD83E\\uDEC1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 451,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 439,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.buttonTextContainer,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.buttonTitle,\n                children: \"Ventilation\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 455,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.buttonSubtext,\n                children: [ventilationRate, \" breaths/min\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 456,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 454,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePulseCheckClick,\n          className: `${styles.button} ${activeSection === 'pulse' || activeSection === 'pulse+metronome' ? styles.pulseButtonActive : styles.pulseButton}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.buttonContent,\n            children: [/*#__PURE__*/_jsxDEV(HeartPulse, {\n              className: styles.buttonIcon,\n              size: 24\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 471,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.buttonTextContainer,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.buttonTitle,\n                children: \"Pulse Check\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 473,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.buttonSubtext,\n                children: \"2-Minute Countdown\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 474,\n                columnNumber: 17\n              }, this), (activeSection === 'pulse' || activeSection === 'pulse+metronome') && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `${styles.countdownDisplay} ${showChargeMonitor ? styles.chargeMonitor : ''}`,\n                children: pulseCheckTime > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    children: Math.floor(pulseCheckTime / 60) + \":\" + (pulseCheckTime % 60).toString().padStart(2, '0')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 481,\n                    columnNumber: 25\n                  }, this), showChargeMonitor && /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: styles.chargeMonitor,\n                    children: \"CHARGE MONITOR\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 482,\n                    columnNumber: 47\n                  }, this)]\n                }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: styles.pauseIndicator,\n                  children: [\"PAUSE \", pauseTime]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 485,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 476,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 472,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleEpinephrineClick,\n          className: `${styles.button} ${epiActive ? styles.epiButtonActive : styles.epiButton}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.buttonContent,\n            children: [/*#__PURE__*/_jsxDEV(Syringe, {\n              className: styles.buttonIcon,\n              size: 24\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 503,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.buttonTextContainer,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.buttonTitle,\n                children: \"Epinephrine\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 505,\n                columnNumber: 17\n              }, this), epiActive && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.countdownDisplay,\n                children: [Math.floor(epiTime / 60), \":\", (epiTime % 60).toString().padStart(2, '0')]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 507,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 504,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 9\n      }, this), (activeSection === 'metronome' || activeSection === 'pulse+metronome') && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.sliderContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.sliderHeader,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: styles.sliderLabel,\n            children: [\"Compression Rate: \", bpm, \" BPM\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 520,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"80\",\n          max: \"120\",\n          value: bpm,\n          onChange: e => setBpm(parseInt(e.target.value)),\n          className: `${styles.slider} ${styles.metronomeSlider}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 522,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.sliderTicks,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"80\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 531,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"100\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"120\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 533,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 530,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 11\n      }, this), ventilationActive && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.sliderContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.sliderHeader,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: styles.sliderLabel,\n            children: [\"Ventilation Rate: \", ventilationRate, \" breaths/min\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 542,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 541,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"5\",\n          max: \"20\",\n          value: ventilationRate,\n          onChange: e => setVentilationRate(parseInt(e.target.value)),\n          className: `${styles.slider} ${styles.ventilationSlider}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.sliderTicks,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 553,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"10\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 554,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"15\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 555,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"20\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 556,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 386,\n    columnNumber: 5\n  }, this);\n};\n_s(CPRTempoApp, \"rFWnyc4f0wFunEx2bRbQkBAHEBo=\");\n_c = CPRTempoApp;\nexport default CPRTempoApp;\nvar _c;\n$RefreshReg$(_c, \"CPRTempoApp\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","HeartPulse","Timer","Clock","Syringe","styles","jsxDEV","_jsxDEV","Fragment","_Fragment","CPRTempoApp","_s","activeSection","setActiveSection","seconds","setSeconds","pulseCheckTime","setPulseCheckTime","pauseTime","setPauseTime","metronomeRunning","setMetronomeRunning","ventilationActive","setVentilationActive","isVentilating","setIsVentilating","ventilationProgress","setVentilationProgress","bpm","setBpm","ventilationRate","setVentilationRate","showChargeMonitor","setShowChargeMonitor","epiActive","setEpiActive","epiTime","setEpiTime","clockStarted","setClockStarted","audioContextRef","timerIntervalRef","pulseIntervalRef","ventilationIntervalRef","epiIntervalRef","clockIntervalRef","createAudioContext","current","window","AudioContext","webkitAudioContext","e","console","error","getAudioContext","startClock","clearInterval","interval","setInterval","prev","resetClock","toggleVentilation","playMetronomeClick","ctx","state","resume","oscillator","createOscillator","type","frequency","value","connect","destination","start","stop","currentTime","playVentilateSound","utterance","SpeechSynthesisUtterance","rate","pitch","volume","speechSynthesis","speak","gainNode","createGain","gain","intervalTime","prevTime","formatTime","totalSeconds","minutes","Math","floor","toString","padStart","handleMetronomeClick","handlePulseCheckClick","handleEpinephrineClick","close","forEach","ref","className","container","children","header","title","fileName","_jsxFileName","lineNumber","columnNumber","appContainer","timerDisplay","onClick","timerText","statusIndicators","statusContainer","statusDot","dotActive","dotInactive","statusLabel","buttonGrid","button","metronomeButtonActive","metronomeButton","buttonContent","buttonIcon","size","buttonTextContainer","buttonTitle","buttonSubtext","ventilationButtonActive","ventilationButton","ventilationCircle","style","width","height","pulseButtonActive","pulseButton","countdownDisplay","chargeMonitor","pauseIndicator","epiButtonActive","epiButton","sliderContainer","sliderHeader","sliderLabel","min","max","onChange","parseInt","target","slider","metronomeSlider","sliderTicks","ventilationSlider","_c","$RefreshReg$"],"sources":["/Users/davidhelmers/arrestpro/src/CPRTempoApp.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { HeartPulse, Timer, Clock, Syringe } from 'lucide-react';\nimport styles from './CPRTempoApp.module.css';\n\nconst CPRTempoApp = () => {\n  // State variables\n  const [activeSection, setActiveSection] = useState(null);\n  const [seconds, setSeconds] = useState(0);\n  const [pulseCheckTime, setPulseCheckTime] = useState(120); // 2 minutes countdown\n  const [pauseTime, setPauseTime] = useState(10); // 10 second pause countdown\n  const [metronomeRunning, setMetronomeRunning] = useState(false);\n  const [ventilationActive, setVentilationActive] = useState(false);\n  const [isVentilating, setIsVentilating] = useState(false);\n  const [ventilationProgress, setVentilationProgress] = useState(100);\n  const [bpm, setBpm] = useState(110); // Standard CPR compression rate\n  const [ventilationRate, setVentilationRate] = useState(11); // Default ventilation rate\n  const [showChargeMonitor, setShowChargeMonitor] = useState(false);\n  const [epiActive, setEpiActive] = useState(false);\n  const [epiTime, setEpiTime] = useState(300); // 5 minutes countdown\n  const [clockStarted, setClockStarted] = useState(false);\n\n  // Refs for safer interval handling\n  const audioContextRef = useRef(null);\n  const timerIntervalRef = useRef(null);\n  const pulseIntervalRef = useRef(null);\n  const ventilationIntervalRef = useRef(null);\n  const epiIntervalRef = useRef(null);\n  const clockIntervalRef = useRef(null);\n\n  // Create audio context safely\n  const createAudioContext = useCallback(() => {\n    if (!audioContextRef.current) {\n      try {\n        audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n      } catch (e) {\n        console.error(\"Failed to create audio context:\", e);\n      }\n    }\n    return audioContextRef.current;\n  }, []);\n\n  // Safely get current audio context\n  const getAudioContext = useCallback(() => {\n    return audioContextRef.current;\n  }, []);\n\n  // Start the main clock\n  const startClock = useCallback(() => {\n    // Clear any existing interval first\n    if (clockIntervalRef.current) {\n      clearInterval(clockIntervalRef.current);\n    }\n   \n    // Create new interval\n    const interval = setInterval(() => {\n      setSeconds(prev => prev + 1);\n    }, 1000);\n   \n    // Save reference and mark as started\n    clockIntervalRef.current = interval;\n    setClockStarted(true);\n  }, []);\n\n  // Reset the main clock\n  const resetClock = useCallback(() => {\n    setSeconds(0);\n    // Only start the clock if there's an active feature\n    if (!clockStarted && (activeSection || ventilationActive || epiActive)) {\n      startClock();\n    } else if (!activeSection && !ventilationActive && !epiActive) {\n      // If everything is inactive, just reset without starting\n      if (clockIntervalRef.current) {\n        clearInterval(clockIntervalRef.current);\n        clockIntervalRef.current = null;\n      }\n      setClockStarted(false);\n    }\n  }, [clockStarted, startClock, activeSection, ventilationActive, epiActive]);\n\n  // Toggle ventilation\n  const toggleVentilation = useCallback(() => {\n    setIsVentilating(prev => !prev);\n    setVentilationActive(prev => !prev);\n  }, []);\n\n  // Play metronome click with useCallback to avoid recreation on each render\n  const playMetronomeClick = useCallback(() => {\n    try {\n      // Create audio context if needed\n      const ctx = getAudioContext() || createAudioContext();\n      if (!ctx) return;\n     \n      // Make sure context is running\n      if (ctx.state === 'suspended') {\n        ctx.resume();\n      }\n     \n      // Create and play metronome sound\n      const oscillator = ctx.createOscillator();\n      oscillator.type = 'sine';\n      oscillator.frequency.value = 800;\n      oscillator.connect(ctx.destination);\n      oscillator.start();\n      oscillator.stop(ctx.currentTime + 0.05);\n    } catch (e) {\n      console.error(\"Error playing metronome sound:\", e);\n    }\n  }, [getAudioContext, createAudioContext]);\n\n  // Play ventilation sound with useCallback\n  const playVentilateSound = useCallback(() => {\n    try {\n      // Try speech synthesis first\n      if ('speechSynthesis' in window) {\n        try {\n          const utterance = new SpeechSynthesisUtterance(\"ventilate\");\n          utterance.rate = 1.0;\n          utterance.pitch = 1.0;\n          utterance.volume = 1.0;\n          window.speechSynthesis.speak(utterance);\n          return;\n        } catch (e) {\n          console.error(\"Speech synthesis failed:\", e);\n        }\n      }\n     \n      // Fallback to audio tone\n      const ctx = getAudioContext() || createAudioContext();\n      if (!ctx) return;\n     \n      // Make sure context is running\n      if (ctx.state === 'suspended') {\n        ctx.resume();\n      }\n     \n      // Create and play ventilation sound\n      const oscillator = ctx.createOscillator();\n      const gainNode = ctx.createGain();\n      oscillator.connect(gainNode);\n      gainNode.connect(ctx.destination);\n      oscillator.type = 'sine';\n      oscillator.frequency.value = 400;\n      gainNode.gain.value = 0.6;\n      oscillator.start();\n      oscillator.stop(ctx.currentTime + 0.2);\n    } catch (e) {\n      console.error(\"Error playing ventilation sound:\", e);\n    }\n  }, [getAudioContext, createAudioContext]);\n\n  // Update metronome state based on activeSection\n  useEffect(() => {\n    if (activeSection === 'metronome' || activeSection === 'pulse+metronome') {\n      setMetronomeRunning(true);\n    } else {\n      setMetronomeRunning(false);\n    }\n    \n    // Check if all features are inactive and reset/stop clock if needed\n    if (!activeSection && !ventilationActive && !epiActive && clockStarted) {\n      // Clear the clock interval to stop it\n      if (clockIntervalRef.current) {\n        clearInterval(clockIntervalRef.current);\n        clockIntervalRef.current = null;\n      }\n      // Reset the clock to 0\n      setSeconds(0);\n      setClockStarted(false);\n    }\n  }, [activeSection, ventilationActive, epiActive, clockStarted]);\n\n  // Metronome timer effect\n  useEffect(() => {\n    if (!metronomeRunning) return;\n   \n    // Clear any existing timer\n    if (timerIntervalRef.current) {\n      clearInterval(timerIntervalRef.current);\n      timerIntervalRef.current = null;\n    }\n   \n    // Safety check\n    if (bpm <= 0) return;\n   \n    // Calculate interval and start metronome\n    const intervalTime = (60 / bpm) * 1000;\n    timerIntervalRef.current = setInterval(playMetronomeClick, intervalTime);\n   \n    // Play first beat immediately\n    playMetronomeClick();\n   \n    // Cleanup function\n    return () => {\n      if (timerIntervalRef.current) {\n        clearInterval(timerIntervalRef.current);\n        timerIntervalRef.current = null;\n      }\n    };\n  }, [metronomeRunning, bpm, playMetronomeClick]);\n\n  // Ventilation timer effect\n  useEffect(() => {\n    if (!ventilationActive) return;\n   \n    // Clear any existing ventilation timer\n    if (ventilationIntervalRef.current) {\n      clearInterval(ventilationIntervalRef.current);\n      ventilationIntervalRef.current = null;\n    }\n   \n    // Safety check\n    if (ventilationRate <= 0) return;\n    \n    // Calculate interval and start ventilation prompts\n    const intervalTime = (60 / ventilationRate) * 1000;\n    ventilationIntervalRef.current = setInterval(playVentilateSound, intervalTime);\n   \n    // Play first ventilation prompt immediately\n    playVentilateSound();\n   \n    // Cleanup function\n    return () => {\n      if (ventilationIntervalRef.current) {\n        clearInterval(ventilationIntervalRef.current);\n        ventilationIntervalRef.current = null;\n      }\n    };\n  }, [ventilationActive, ventilationRate, playVentilateSound]);\n\n  // Epinephrine timer effect\n  useEffect(() => {\n    if (!epiActive) {\n      if (epiIntervalRef.current) {\n        clearInterval(epiIntervalRef.current);\n        epiIntervalRef.current = null;\n      }\n      return;\n    }\n   \n    // Start countdown\n    epiIntervalRef.current = setInterval(() => {\n      setEpiTime(prevTime => {\n        if (prevTime <= 0) {\n          setEpiTime(300);\n          return 300;\n        }\n        return prevTime - 1;\n      });\n    }, 1000);\n   \n    // Cleanup function\n    return () => {\n      if (epiIntervalRef.current) {\n        clearInterval(epiIntervalRef.current);\n        epiIntervalRef.current = null;\n      }\n    };\n  }, [epiActive]);\n\n  // Format seconds to MM:SS\n  const formatTime = (totalSeconds) => {\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  };\n\n  // Handle Metronome button click\n  const handleMetronomeClick = useCallback(() => {\n    // Initialize audio on first click\n    createAudioContext();\n   \n    // Make sure clock is started\n    if (!clockStarted) {\n      startClock();\n    }\n   \n    // Handle state toggling with composite states\n    if (activeSection === 'metronome' || activeSection === 'pulse+metronome') {\n      // Turn off metronome - preserve pulse if active\n      if (activeSection === 'pulse+metronome') {\n        setActiveSection('pulse');\n      } else {\n        setActiveSection(null);\n      }\n    } else {\n      // Turn on metronome - preserve pulse if active\n      if (activeSection === 'pulse') {\n        setActiveSection('pulse+metronome');\n      } else {\n        setActiveSection('metronome');\n      }\n    }\n  }, [activeSection, createAudioContext, clockStarted, startClock]);\n\n  // Handle Pulse check button click\n  const handlePulseCheckClick = useCallback(() => {\n    // Toggle pulse check state\n    if (activeSection === 'pulse' || activeSection === 'pulse+metronome') {\n      // Turning off pulse check - preserve other active states\n      if (activeSection === 'pulse+metronome') {\n        setActiveSection('metronome');\n      } else {\n        setActiveSection(null);\n      }\n     \n      // Clear interval\n      if (pulseIntervalRef.current) {\n        clearInterval(pulseIntervalRef.current);\n        pulseIntervalRef.current = null;\n      }\n    } else {\n      // Turning on pulse check - preserve other active states\n      if (activeSection === 'metronome') {\n        setActiveSection('pulse+metronome');\n      } else {\n        setActiveSection('pulse');\n      }\n     \n      // Reset countdown times\n      setPulseCheckTime(120);\n      setPauseTime(10);\n      setShowChargeMonitor(false);\n     \n      // Start countdown\n      pulseIntervalRef.current = setInterval(() => {\n        setPulseCheckTime(prevTime => {\n          // Show charge monitor warning at 15 seconds\n          if (prevTime === 15) {\n            setShowChargeMonitor(true);\n          }\n         \n          // Handle timeout\n          if (prevTime === 0) {\n            // Start pause countdown\n            setPauseTime(pauseTime => {\n              if (pauseTime <= 1) {\n                // Auto-restart when pause countdown finishes\n                setPulseCheckTime(120);\n                setShowChargeMonitor(false);\n                return 10;\n              }\n              return pauseTime - 1;\n            });\n            return 0;\n          }\n         \n          // Normal countdown\n          return prevTime - 1;\n        });\n      }, 1000);\n    }\n  }, [activeSection]);\n\n  // Handle Epinephrine button click\n  const handleEpinephrineClick = useCallback(() => {\n    // Toggle epinephrine state\n    setEpiActive(prev => {\n      if (prev) {\n        // If turning off, reset time\n        setEpiTime(300);\n      }\n      return !prev;\n    });\n  }, []);\n\n  // Cleanup all intervals on unmount\n  useEffect(() => {\n    return () => {\n      // Close audio context\n      if (audioContextRef.current) {\n        audioContextRef.current.close();\n      }\n     \n      // Clear all intervals\n      [timerIntervalRef, pulseIntervalRef, ventilationIntervalRef, epiIntervalRef, clockIntervalRef].forEach(ref => {\n        if (ref && ref.current) {\n          clearInterval(ref.current);\n          ref.current = null;\n        }\n      });\n    };\n  }, []);\n\n  // Render the UI\n  return (\n    <div className={styles.container}>\n      <header className={styles.header}>\n        <h1 className={styles.title}>ArrestPro</h1>\n      </header>\n\n      <div className={styles.appContainer}>\n        {/* Timer Display with click to reset */}\n        <div\n          className={styles.timerDisplay}\n          onClick={resetClock}\n          title=\"Click to reset timer\"\n        >\n          <div className={styles.timerText}>\n            {formatTime(seconds)}\n          </div>\n          <div className={styles.statusIndicators}>\n            <div className={styles.statusContainer}>\n              <span>Metronome: </span>\n              <span className={`${styles.statusDot} ${metronomeRunning ? styles.dotActive : styles.dotInactive}`}></span>\n              <span className={styles.statusLabel}>Ventilation: </span>\n              <span className={`${styles.statusDot} ${ventilationActive ? styles.dotActive : styles.dotInactive}`}></span>\n            </div>\n          </div>\n        </div>\n\n        {/* Main Buttons */}\n        <div className={styles.buttonGrid}>\n          {/* Metronome Button */}\n          <button\n            onClick={handleMetronomeClick}\n            className={`${styles.button} ${\n              (activeSection === 'metronome' || activeSection === 'pulse+metronome') \n                ? styles.metronomeButtonActive \n                : styles.metronomeButton\n            }`}\n          >\n            <div className={styles.buttonContent}>\n              <Clock className={styles.buttonIcon} size={24} />\n              <div className={styles.buttonTextContainer}>\n                <div className={styles.buttonTitle}>Metronome</div>\n                <div className={styles.buttonSubtext}>110 BPM - Start Compressions</div>\n              </div>\n            </div>\n          </button>\n         \n          {/* Ventilation Button */}\n          <button\n            onClick={toggleVentilation}\n            className={`${styles.button} ${\n              ventilationActive ? styles.ventilationButtonActive : styles.ventilationButton\n            }`}\n          >\n            <div className={styles.buttonContent}>\n              <div className={`${styles.buttonIcon} relative w-8 h-8 flex items-center justify-center`}>\n                {ventilationActive ? (\n                  <div className=\"absolute\">\n                    <div\n                      className={styles.ventilationCircle}\n                      style={{\n                        width: `${ventilationProgress}%`,\n                        height: `${ventilationProgress}%`\n                      }}\n                    ></div>\n                  </div>\n                ) : (\n                  <div className=\"text-2xl\">🫁</div>\n                )}\n              </div>\n              <div className={styles.buttonTextContainer}>\n                <div className={styles.buttonTitle}>Ventilation</div>\n                <div className={styles.buttonSubtext}>{ventilationRate} breaths/min</div>\n              </div>\n            </div>\n          </button>\n         \n          {/* Pulse Check Button */}\n          <button\n            onClick={handlePulseCheckClick}\n            className={`${styles.button} ${\n              (activeSection === 'pulse' || activeSection === 'pulse+metronome')\n                ? styles.pulseButtonActive \n                : styles.pulseButton\n            }`}\n          >\n            <div className={styles.buttonContent}>\n              <HeartPulse className={styles.buttonIcon} size={24} />\n              <div className={styles.buttonTextContainer}>\n                <div className={styles.buttonTitle}>Pulse Check</div>\n                <div className={styles.buttonSubtext}>2-Minute Countdown</div>\n                {(activeSection === 'pulse' || activeSection === 'pulse+metronome') && (\n                  <div className={`${styles.countdownDisplay} ${\n                    showChargeMonitor ? styles.chargeMonitor : ''\n                  }`}>\n                    {pulseCheckTime > 0 ? (\n                      <>\n                        <div>{Math.floor(pulseCheckTime / 60) + \":\" + (pulseCheckTime % 60).toString().padStart(2, '0')}</div>\n                        {showChargeMonitor && <div className={styles.chargeMonitor}>CHARGE MONITOR</div>}\n                      </>\n                    ) : (\n                      <div className={styles.pauseIndicator}>\n                        PAUSE {pauseTime}\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n            </div>\n          </button>\n         \n          {/* Epinephrine Button */}\n          <button\n            onClick={handleEpinephrineClick}\n            className={`${styles.button} ${\n              epiActive ? styles.epiButtonActive : styles.epiButton\n            }`}\n          >\n            <div className={styles.buttonContent}>\n              <Syringe className={styles.buttonIcon} size={24} />\n              <div className={styles.buttonTextContainer}>\n                <div className={styles.buttonTitle}>Epinephrine</div>\n                {epiActive && (\n                  <div className={styles.countdownDisplay}>\n                    {Math.floor(epiTime / 60)}:{(epiTime % 60).toString().padStart(2, '0')}\n                  </div>\n                )}\n              </div>\n            </div>\n          </button>\n        </div>\n\n        {/* Metronome Rate Control */}\n        {(activeSection === 'metronome' || activeSection === 'pulse+metronome') && (\n          <div className={styles.sliderContainer}>\n            <div className={styles.sliderHeader}>\n              <span className={styles.sliderLabel}>Compression Rate: {bpm} BPM</span>\n            </div>\n            <input\n              type=\"range\"\n              min=\"80\"\n              max=\"120\"\n              value={bpm}\n              onChange={(e) => setBpm(parseInt(e.target.value))}\n              className={`${styles.slider} ${styles.metronomeSlider}`}\n            />\n            <div className={styles.sliderTicks}>\n              <span>80</span>\n              <span>100</span>\n              <span>120</span>\n            </div>\n          </div>\n        )}\n       \n        {/* Ventilation Rate Control */}\n        {ventilationActive && (\n          <div className={styles.sliderContainer}>\n            <div className={styles.sliderHeader}>\n              <span className={styles.sliderLabel}>Ventilation Rate: {ventilationRate} breaths/min</span>\n            </div>\n            <input\n              type=\"range\"\n              min=\"5\"\n              max=\"20\"\n              value={ventilationRate}\n              onChange={(e) => setVentilationRate(parseInt(e.target.value))}\n              className={`${styles.slider} ${styles.ventilationSlider}`}\n            />\n            <div className={styles.sliderTicks}>\n              <span>5</span>\n              <span>10</span>\n              <span>15</span>\n              <span>20</span>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default CPRTempoApp;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}