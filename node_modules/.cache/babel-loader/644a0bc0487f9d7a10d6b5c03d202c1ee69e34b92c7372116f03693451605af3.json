{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useRef, useCallback, useEffect } from 'react';\n\n// The AudioPool helps manage multiple audio instances for concurrent playback\nclass AudioPool {\n  constructor(src, poolSize = 3, volume = 1.0) {\n    this.src = src;\n    this.poolSize = poolSize;\n    this.audioElements = [];\n    this.currentIndex = 0;\n\n    // Create the audio pool\n    for (let i = 0; i < poolSize; i++) {\n      const audio = new Audio(src);\n      audio.preload = 'auto';\n\n      // Set the volume based on the sound type\n      audio.volume = volume;\n      this.audioElements.push(audio);\n    }\n  }\n  play() {\n    // Get the next audio element in the pool\n    const audio = this.audioElements[this.currentIndex];\n\n    // Reset the audio if it's already playing or has played\n    if (!audio.paused) {\n      audio.pause();\n      audio.currentTime = 0;\n    }\n\n    // Play the audio and handle any errors for iOS\n    const playPromise = audio.play();\n    if (playPromise !== undefined) {\n      playPromise.catch(error => {\n        // Auto-play prevented (iOS often requires user interaction first)\n        console.warn('Audio play prevented:', error);\n      });\n    }\n\n    // Move to the next audio element for the next call\n    this.currentIndex = (this.currentIndex + 1) % this.poolSize;\n    return audio;\n  }\n  stop() {\n    this.audioElements.forEach(audio => {\n      audio.pause();\n      audio.currentTime = 0;\n    });\n  }\n}\nconst useAudio = () => {\n  _s();\n  // Reference to hold our audio pools\n  const audioPoolsRef = useRef({});\n\n  // Predefined balanced volumes for each sound type\n  // Moved inside the hook to be accessible by callbacks\n  const soundVolumesRef = useRef({\n    metronome: 0.2,\n    // Reduce metronome volume to 20%\n    ventilate: 1.0,\n    // Keep ventilate at full volume\n    chargeMonitor: 1.0,\n    // Keep charge monitor at full volume\n    stopCompression: 1.0,\n    // Keep stop compression at full volume\n    '1': 1.0,\n    // Keep number audio at full volume\n    '2': 1.0,\n    '3': 1.0,\n    '4': 1.0,\n    '5': 1.0\n  });\n\n  // Initialize an audio pool for a specific sound\n  const initAudio = useCallback((id, src, poolSize = 3) => {\n    if (!audioPoolsRef.current[id]) {\n      // Get the predefined volume for this sound type, or default to 1.0\n      const volume = soundVolumesRef.current[id] || 1.0;\n      audioPoolsRef.current[id] = new AudioPool(src, poolSize, volume);\n    }\n  }, []);\n\n  // Play a sound by its ID\n  const playSound = useCallback(id => {\n    const pool = audioPoolsRef.current[id];\n    if (pool) {\n      return pool.play();\n    } else {\n      console.error(`Audio pool with ID \"${id}\" not found`);\n      return null;\n    }\n  }, []);\n\n  // Stop all instances of a sound\n  const stopSound = useCallback(id => {\n    const pool = audioPoolsRef.current[id];\n    if (pool) {\n      pool.stop();\n    }\n  }, []);\n\n  // Clean up all audio elements on unmount\n  useEffect(() => {\n    return () => {\n      // Store reference to current audio pools to avoid the React Hook warning\n      const currentAudioPools = audioPoolsRef.current;\n      Object.values(currentAudioPools).forEach(pool => {\n        pool.stop();\n      });\n    };\n  }, []);\n\n  // iOS requires user interaction to play sounds\n  // This function can be called in response to any user interaction\n  // to initialize audio playback capability\n  const unlockAudio = useCallback(() => {\n    // Create and play a silent audio element\n    const audio = new Audio();\n    audio.play().catch(() => {\n      // Silent catch - this is expected on first call before user interaction\n    });\n  }, []);\n  return {\n    initAudio,\n    playSound,\n    stopSound,\n    unlockAudio\n  };\n};\n_s(useAudio, \"DYmlMPwIUfZsTi1MpWUr8QldANM=\");\nexport default useAudio;","map":{"version":3,"names":["useRef","useCallback","useEffect","AudioPool","constructor","src","poolSize","volume","audioElements","currentIndex","i","audio","Audio","preload","push","play","paused","pause","currentTime","playPromise","undefined","catch","error","console","warn","stop","forEach","useAudio","_s","audioPoolsRef","soundVolumesRef","metronome","ventilate","chargeMonitor","stopCompression","initAudio","id","current","playSound","pool","stopSound","currentAudioPools","Object","values","unlockAudio"],"sources":["/Users/davidhelmers/arrestpro/src/hooks/useAudio.js"],"sourcesContent":["import { useRef, useCallback, useEffect } from 'react';\n\n// The AudioPool helps manage multiple audio instances for concurrent playback\nclass AudioPool {\n  constructor(src, poolSize = 3, volume = 1.0) {\n    this.src = src;\n    this.poolSize = poolSize;\n    this.audioElements = [];\n    this.currentIndex = 0;\n    \n    // Create the audio pool\n    for (let i = 0; i < poolSize; i++) {\n      const audio = new Audio(src);\n      audio.preload = 'auto';\n      \n      // Set the volume based on the sound type\n      audio.volume = volume;\n      \n      this.audioElements.push(audio);\n    }\n  }\n  \n  play() {\n    // Get the next audio element in the pool\n    const audio = this.audioElements[this.currentIndex];\n    \n    // Reset the audio if it's already playing or has played\n    if (!audio.paused) {\n      audio.pause();\n      audio.currentTime = 0;\n    }\n    \n    // Play the audio and handle any errors for iOS\n    const playPromise = audio.play();\n    if (playPromise !== undefined) {\n      playPromise.catch(error => {\n        // Auto-play prevented (iOS often requires user interaction first)\n        console.warn('Audio play prevented:', error);\n      });\n    }\n    \n    // Move to the next audio element for the next call\n    this.currentIndex = (this.currentIndex + 1) % this.poolSize;\n    \n    return audio;\n  }\n  \n  stop() {\n    this.audioElements.forEach(audio => {\n      audio.pause();\n      audio.currentTime = 0;\n    });\n  }\n}\n\nconst useAudio = () => {\n  // Reference to hold our audio pools\n  const audioPoolsRef = useRef({});\n  \n  // Predefined balanced volumes for each sound type\n  // Moved inside the hook to be accessible by callbacks\n  const soundVolumesRef = useRef({\n    metronome: 0.2,            // Reduce metronome volume to 20%\n    ventilate: 1.0,            // Keep ventilate at full volume\n    chargeMonitor: 1.0,        // Keep charge monitor at full volume\n    stopCompression: 1.0,      // Keep stop compression at full volume\n    '1': 1.0,                  // Keep number audio at full volume\n    '2': 1.0,\n    '3': 1.0,\n    '4': 1.0,\n    '5': 1.0\n  });\n  \n  // Initialize an audio pool for a specific sound\n  const initAudio = useCallback((id, src, poolSize = 3) => {\n    if (!audioPoolsRef.current[id]) {\n      // Get the predefined volume for this sound type, or default to 1.0\n      const volume = soundVolumesRef.current[id] || 1.0;\n      audioPoolsRef.current[id] = new AudioPool(src, poolSize, volume);\n    }\n  }, []);\n  \n  // Play a sound by its ID\n  const playSound = useCallback((id) => {\n    const pool = audioPoolsRef.current[id];\n    if (pool) {\n      return pool.play();\n    } else {\n      console.error(`Audio pool with ID \"${id}\" not found`);\n      return null;\n    }\n  }, []);\n  \n  // Stop all instances of a sound\n  const stopSound = useCallback((id) => {\n    const pool = audioPoolsRef.current[id];\n    if (pool) {\n      pool.stop();\n    }\n  }, []);\n  \n  // Clean up all audio elements on unmount\n  useEffect(() => {\n    return () => {\n      // Store reference to current audio pools to avoid the React Hook warning\n      const currentAudioPools = audioPoolsRef.current;\n      Object.values(currentAudioPools).forEach(pool => {\n        pool.stop();\n      });\n    };\n  }, []);\n  \n  // iOS requires user interaction to play sounds\n  // This function can be called in response to any user interaction\n  // to initialize audio playback capability\n  const unlockAudio = useCallback(() => {\n    // Create and play a silent audio element\n    const audio = new Audio();\n    audio.play().catch(() => {\n      // Silent catch - this is expected on first call before user interaction\n    });\n  }, []);\n  \n  return {\n    initAudio,\n    playSound,\n    stopSound,\n    unlockAudio\n  };\n};\n\nexport default useAudio;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}