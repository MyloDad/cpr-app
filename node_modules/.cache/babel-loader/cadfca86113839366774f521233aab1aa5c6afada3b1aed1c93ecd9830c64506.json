{"ast":null,"code":"import{useRef,useCallback,useEffect}from'react';import{Capacitor}from'@capacitor/core';import{NativeAudio}from'@capacitor-community/native-audio';// Constants\nconst CLICK_VOLUME=0.5;const VOICE_VOLUME=1.0;const useNativeAudio=()=>{const initialized=useRef(false);const audioMap=useRef({});// Check if running on native platform\nconst isNative=Capacitor.isNativePlatform();const isIOS=Capacitor.getPlatform()==='ios';// Initialize all audio files\nconst initAudio=useCallback(async function(id,src){let poolSize=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;if(audioMap.current[id])return;// Already loaded\ntry{if(isNative){// Use native audio for iOS/Android\n// Strip directory path and file extension for asset ID\nconst assetId=id;// Configure volume based on sound type\nconst volume=src.includes('click.mp3')?CLICK_VOLUME:VOICE_VOLUME;// For metronome clicks, use preload complete to ensure lowest latency\nif(id==='metronome'){await NativeAudio.preload({assetId,assetPath:src,volume:volume,audioChannelNum:1,// Use a dedicated audio channel\nisUrl:false});}else{// For other sounds, standard preload is fine\nawait NativeAudio.preload({assetId,assetPath:src,volume:volume,isUrl:false});}audioMap.current[id]={id:assetId,native:true,volume:volume};console.log(`Native audio loaded: ${id} (${src})`);}else{// Fallback to web audio for browser development\nconst audioPool=Array(poolSize).fill(null).map(()=>{const audio=new Audio(src);audio.preload='auto';// Set the appropriate volume\nconst volume=src.includes('click.mp3')?CLICK_VOLUME:VOICE_VOLUME;audio.volume=volume;return audio;});audioMap.current[id]={pool:audioPool,currentIndex:0,native:false,volume:audioPool[0].volume};console.log(`Web audio pool created: ${id} (${src}), size: ${poolSize}`);}}catch(error){console.error(`Failed to initialize audio: ${id}`,error);}},[isNative,isIOS]);// Set volume for a specific sound\nconst setVolume=useCallback(async(id,volume)=>{const audio=audioMap.current[id];if(!audio)return;try{if(audio.native){await NativeAudio.setVolume({assetId:audio.id,volume});audio.volume=volume;}else{// For web audio\naudio.pool.forEach(element=>{element.volume=volume;});audio.volume=volume;}}catch(error){console.error(`Failed to set volume for ${id}`,error);}},[]);// Play a sound\nconst playSound=useCallback(async id=>{const audio=audioMap.current[id];if(!audio){console.warn(`Audio not found: ${id}`);return null;}try{if(audio.native){// Use native audio plugin\nawait NativeAudio.play({assetId:audio.id,time:0// Play from the beginning\n});// Native audio doesn't return an element, but return something for consistency\nreturn{id:audio.id};}else{// Web audio fallback\nconst pool=audio.pool;const currentIndex=audio.currentIndex;const element=pool[currentIndex];// Reset if playing\nif(!element.paused){element.pause();element.currentTime=0;}// Play the sound\nelement.play().catch(e=>console.warn('Audio play prevented:',e));// Update index for next play\naudio.currentIndex=(currentIndex+1)%pool.length;return element;}}catch(error){console.error(`Failed to play sound: ${id}`,error);return null;}},[]);// Stop a sound\nconst stopSound=useCallback(async id=>{const audio=audioMap.current[id];if(!audio)return;try{if(audio.native){await NativeAudio.stop({assetId:audio.id});}else{// Web audio fallback\naudio.pool.forEach(element=>{element.pause();element.currentTime=0;});}}catch(error){console.error(`Failed to stop sound: ${id}`,error);}},[]);// Unlock audio for web (not needed for native, but kept for compatibility)\nconst unlockAudio=useCallback(()=>{if(isNative){// Native platforms don't need audio unlocking\nconsole.log('Audio unlocking not needed on native platforms');return;}console.log('Unlocking web audio...');// On web, create a silent sound and play it to unlock audio\nconst silentSound=new Audio();silentSound.play().catch(e=>console.warn('Silent sound play prevented:',e));// Also try to play each audio once\nObject.values(audioMap.current).forEach(audio=>{if(!audio.native&&audio.pool&&audio.pool.length>0){const element=audio.pool[0];const originalVolume=element.volume;element.volume=0;element.play().then(()=>{element.pause();element.currentTime=0;element.volume=originalVolume;}).catch(e=>console.warn('Audio unlock failed:',e));}});},[isNative]);// Clean up all audio resources\nconst releaseResources=useCallback(async()=>{try{if(isNative){// Unload all native audio\nfor(const id in audioMap.current){if(audioMap.current[id].native){await NativeAudio.unload({assetId:audioMap.current[id].id});}}}else{// Stop all web audio\nfor(const id in audioMap.current){if(!audioMap.current[id].native&&audioMap.current[id].pool){audioMap.current[id].pool.forEach(element=>{element.pause();element.src='';});}}}// Clear the audio map\naudioMap.current={};initialized.current=false;}catch(error){console.error('Failed to release audio resources',error);}},[isNative]);// Initialize global audio config when component mounts\nuseEffect(()=>{if(initialized.current)return;const initializeAudio=async()=>{if(isNative){try{// Configure native audio\nconsole.log('Initializing native audio system');// Add app state change listener to handle audio interruptions\nif(Capacitor.getPlatform()==='ios'){// Make sure audio continues if app goes to background\n// This would be handled in AppDelegate.swift - we'll add that code separately\n}initialized.current=true;}catch(error){console.error('Failed to initialize native audio',error);}}else{console.log('Initializing web audio system');initialized.current=true;}};initializeAudio();// Cleanup on unmount\nreturn()=>{releaseResources();};},[isNative,releaseResources]);return{initAudio,playSound,stopSound,setVolume,unlockAudio,releaseResources,isNative};};export default useNativeAudio;","map":{"version":3,"names":["useRef","useCallback","useEffect","Capacitor","NativeAudio","CLICK_VOLUME","VOICE_VOLUME","useNativeAudio","initialized","audioMap","isNative","isNativePlatform","isIOS","getPlatform","initAudio","id","src","poolSize","arguments","length","undefined","current","assetId","volume","includes","preload","assetPath","audioChannelNum","isUrl","native","console","log","audioPool","Array","fill","map","audio","Audio","pool","currentIndex","error","setVolume","forEach","element","playSound","warn","play","time","paused","pause","currentTime","catch","e","stopSound","stop","unlockAudio","silentSound","Object","values","originalVolume","then","releaseResources","unload","initializeAudio"],"sources":["/Users/davidhelmers/arrestpro/src/hooks/useNativeAudio.js"],"sourcesContent":["import { useRef, useCallback, useEffect } from 'react';\nimport { Capacitor } from '@capacitor/core';\nimport { NativeAudio } from '@capacitor-community/native-audio';\n\n// Constants\nconst CLICK_VOLUME = 0.5;\nconst VOICE_VOLUME = 1.0;\n\nconst useNativeAudio = () => {\n  const initialized = useRef(false);\n  const audioMap = useRef({});\n  \n  // Check if running on native platform\n  const isNative = Capacitor.isNativePlatform();\n  const isIOS = Capacitor.getPlatform() === 'ios';\n  \n  // Initialize all audio files\n  const initAudio = useCallback(async (id, src, poolSize = 1) => {\n    if (audioMap.current[id]) return; // Already loaded\n    \n    try {\n      if (isNative) {\n        // Use native audio for iOS/Android\n        // Strip directory path and file extension for asset ID\n        const assetId = id;\n        \n        // Configure volume based on sound type\n        const volume = src.includes('click.mp3') ? CLICK_VOLUME : VOICE_VOLUME;\n        \n        // For metronome clicks, use preload complete to ensure lowest latency\n        if (id === 'metronome') {\n          await NativeAudio.preload({\n            assetId,\n            assetPath: src,\n            volume: volume,\n            audioChannelNum: 1, // Use a dedicated audio channel\n            isUrl: false\n          });\n        } else {\n          // For other sounds, standard preload is fine\n          await NativeAudio.preload({\n            assetId,\n            assetPath: src,\n            volume: volume,\n            isUrl: false\n          });\n        }\n        \n        audioMap.current[id] = { \n          id: assetId, \n          native: true,\n          volume: volume\n        };\n        \n        console.log(`Native audio loaded: ${id} (${src})`);\n      } else {\n        // Fallback to web audio for browser development\n        const audioPool = Array(poolSize).fill(null).map(() => {\n          const audio = new Audio(src);\n          audio.preload = 'auto';\n          \n          // Set the appropriate volume\n          const volume = src.includes('click.mp3') ? CLICK_VOLUME : VOICE_VOLUME;\n          audio.volume = volume;\n          \n          return audio;\n        });\n        \n        audioMap.current[id] = { \n          pool: audioPool, \n          currentIndex: 0,\n          native: false,\n          volume: audioPool[0].volume\n        };\n        \n        console.log(`Web audio pool created: ${id} (${src}), size: ${poolSize}`);\n      }\n    } catch (error) {\n      console.error(`Failed to initialize audio: ${id}`, error);\n    }\n  }, [isNative, isIOS]);\n  \n  // Set volume for a specific sound\n  const setVolume = useCallback(async (id, volume) => {\n    const audio = audioMap.current[id];\n    if (!audio) return;\n    \n    try {\n      if (audio.native) {\n        await NativeAudio.setVolume({ \n          assetId: audio.id, \n          volume \n        });\n        audio.volume = volume;\n      } else {\n        // For web audio\n        audio.pool.forEach(element => {\n          element.volume = volume;\n        });\n        audio.volume = volume;\n      }\n    } catch (error) {\n      console.error(`Failed to set volume for ${id}`, error);\n    }\n  }, []);\n  \n  // Play a sound\n  const playSound = useCallback(async (id) => {\n    const audio = audioMap.current[id];\n    if (!audio) {\n      console.warn(`Audio not found: ${id}`);\n      return null;\n    }\n    \n    try {\n      if (audio.native) {\n        // Use native audio plugin\n        await NativeAudio.play({\n          assetId: audio.id,\n          time: 0 // Play from the beginning\n        });\n        \n        // Native audio doesn't return an element, but return something for consistency\n        return { id: audio.id };\n      } else {\n        // Web audio fallback\n        const pool = audio.pool;\n        const currentIndex = audio.currentIndex;\n        \n        const element = pool[currentIndex];\n        \n        // Reset if playing\n        if (!element.paused) {\n          element.pause();\n          element.currentTime = 0;\n        }\n        \n        // Play the sound\n        element.play().catch(e => console.warn('Audio play prevented:', e));\n        \n        // Update index for next play\n        audio.currentIndex = (currentIndex + 1) % pool.length;\n        \n        return element;\n      }\n    } catch (error) {\n      console.error(`Failed to play sound: ${id}`, error);\n      return null;\n    }\n  }, []);\n  \n  // Stop a sound\n  const stopSound = useCallback(async (id) => {\n    const audio = audioMap.current[id];\n    if (!audio) return;\n    \n    try {\n      if (audio.native) {\n        await NativeAudio.stop({\n          assetId: audio.id\n        });\n      } else {\n        // Web audio fallback\n        audio.pool.forEach(element => {\n          element.pause();\n          element.currentTime = 0;\n        });\n      }\n    } catch (error) {\n      console.error(`Failed to stop sound: ${id}`, error);\n    }\n  }, []);\n  \n  // Unlock audio for web (not needed for native, but kept for compatibility)\n  const unlockAudio = useCallback(() => {\n    if (isNative) {\n      // Native platforms don't need audio unlocking\n      console.log('Audio unlocking not needed on native platforms');\n      return;\n    }\n    \n    console.log('Unlocking web audio...');\n    \n    // On web, create a silent sound and play it to unlock audio\n    const silentSound = new Audio();\n    silentSound.play().catch(e => console.warn('Silent sound play prevented:', e));\n    \n    // Also try to play each audio once\n    Object.values(audioMap.current).forEach(audio => {\n      if (!audio.native && audio.pool && audio.pool.length > 0) {\n        const element = audio.pool[0];\n        const originalVolume = element.volume;\n        element.volume = 0;\n        element.play()\n          .then(() => {\n            element.pause();\n            element.currentTime = 0;\n            element.volume = originalVolume;\n          })\n          .catch(e => console.warn('Audio unlock failed:', e));\n      }\n    });\n  }, [isNative]);\n  \n  // Clean up all audio resources\n  const releaseResources = useCallback(async () => {\n    try {\n      if (isNative) {\n        // Unload all native audio\n        for (const id in audioMap.current) {\n          if (audioMap.current[id].native) {\n            await NativeAudio.unload({\n              assetId: audioMap.current[id].id\n            });\n          }\n        }\n      } else {\n        // Stop all web audio\n        for (const id in audioMap.current) {\n          if (!audioMap.current[id].native && audioMap.current[id].pool) {\n            audioMap.current[id].pool.forEach(element => {\n              element.pause();\n              element.src = '';\n            });\n          }\n        }\n      }\n      \n      // Clear the audio map\n      audioMap.current = {};\n      initialized.current = false;\n    } catch (error) {\n      console.error('Failed to release audio resources', error);\n    }\n  }, [isNative]);\n  \n  // Initialize global audio config when component mounts\n  useEffect(() => {\n    if (initialized.current) return;\n    \n    const initializeAudio = async () => {\n      if (isNative) {\n        try {\n          // Configure native audio\n          console.log('Initializing native audio system');\n          \n          // Add app state change listener to handle audio interruptions\n          if (Capacitor.getPlatform() === 'ios') {\n            // Make sure audio continues if app goes to background\n            // This would be handled in AppDelegate.swift - we'll add that code separately\n          }\n          \n          initialized.current = true;\n        } catch (error) {\n          console.error('Failed to initialize native audio', error);\n        }\n      } else {\n        console.log('Initializing web audio system');\n        initialized.current = true;\n      }\n    };\n    \n    initializeAudio();\n    \n    // Cleanup on unmount\n    return () => {\n      releaseResources();\n    };\n  }, [isNative, releaseResources]);\n  \n  return {\n    initAudio,\n    playSound,\n    stopSound,\n    setVolume,\n    unlockAudio,\n    releaseResources,\n    isNative\n  };\n};\n\nexport default useNativeAudio;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}