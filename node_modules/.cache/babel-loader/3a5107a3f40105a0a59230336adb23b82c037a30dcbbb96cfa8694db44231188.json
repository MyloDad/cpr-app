{"ast":null,"code":"var _jsxFileName = \"/Users/davidhelmers/arrestpro/src/context/AppStateContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback, useRef } from 'react';\nimport useAudio from '../hooks/useAudio';\n\n// App constants\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const COLORS = {\n  background: '#1e2126',\n  // Dark background\n  logoRed: '#ff4136',\n  // Red from logo\n  logoYellow: '#f4eb00ff',\n  // Yellow from logo\n  pulseBlue: '#3498db',\n  // Blue for pulse check\n  ventGreen: '#2ecc40',\n  // Green for ventilation\n  white: '#ffffff',\n  // White text\n  darkText: '#1a1a1a',\n  // Dark text for yellow buttons\n  timerBg: '#2c3e50',\n  // Timer background\n  sliderBg: '#ecf0f1' // Slider background\n};\n\n// Create the context\nconst AppStateContext = /*#__PURE__*/createContext();\n\n// Path to audio files\nconst AUDIO_PATH = '/audio/';\n\n// Initial state - used for reset\nconst initialState = {\n  activeSection: null,\n  seconds: 0,\n  pulseCheckTime: 0,\n  pauseTime: 0,\n  metronomeRunning: false,\n  ventilationActive: false,\n  ventilationRate: 11,\n  showChargeMonitor: false,\n  epiActive: false,\n  epiTime: 0,\n  epiCycles: 0,\n  clockStarted: false,\n  startTime: null,\n  countdownAnnounced: {\n    5: false,\n    4: false,\n    3: false,\n    2: false,\n    1: false\n  },\n  confirmReset: false,\n  pulseFlashing: false,\n  epiFlashing: false\n};\nexport const AppStateProvider = ({\n  children\n}) => {\n  _s();\n  // State variables\n  const [activeSection, setActiveSection] = useState(initialState.activeSection);\n  const [seconds, setSeconds] = useState(initialState.seconds);\n  const [pulseCheckTime, setPulseCheckTime] = useState(initialState.pulseCheckTime);\n  const [pauseTime, setPauseTime] = useState(initialState.pauseTime);\n  const [metronomeRunning, setMetronomeRunning] = useState(initialState.metronomeRunning);\n  const [ventilationActive, setVentilationActive] = useState(initialState.ventilationActive);\n  const [ventilationRate, setVentilationRate] = useState(initialState.ventilationRate);\n  const [showChargeMonitor, setShowChargeMonitor] = useState(initialState.showChargeMonitor);\n  const [epiActive, setEpiActive] = useState(initialState.epiActive);\n  const [epiTime, setEpiTime] = useState(initialState.epiTime);\n  const [epiCycles, setEpiCycles] = useState(initialState.epiCycles);\n  const [clockStarted, setClockStarted] = useState(initialState.clockStarted);\n  const [startTime, setStartTime] = useState(initialState.startTime);\n  const [countdownAnnounced, setCountdownAnnounced] = useState(initialState.countdownAnnounced);\n  const [confirmReset, setConfirmReset] = useState(initialState.confirmReset);\n  const [pulseFlashing, setPulseFlashing] = useState(initialState.pulseFlashing);\n  const [epiFlashing, setEpiFlashing] = useState(initialState.epiFlashing);\n\n  // Force UI refresh - Add this new state\n  const [refreshTrigger, setRefreshTrigger] = useState(0);\n\n  // Refs for safer interval handling\n  const timerIntervalRef = useRef(null);\n  const pulseIntervalRef = useRef(null);\n  const ventilationIntervalRef = useRef(null);\n  const epiIntervalRef = useRef(null);\n  const clockIntervalRef = useRef(null);\n\n  // Refs for circular function dependencies\n  const startPulseCountdownRef = useRef(null);\n  const startPauseCountdownRef = useRef(null);\n\n  // Audio hooks\n  const {\n    initAudio,\n    playSound,\n    stopSound,\n    unlockAudio\n  } = useAudio();\n\n  // Initialize all audio files\n  useEffect(() => {\n    // Initialize audio pools for all sounds we'll use\n    initAudio('metronome', `${AUDIO_PATH}click.mp3`, 5); // More instances for rapid clicks\n    initAudio('ventilate', `${AUDIO_PATH}ventilate.mp3`, 3);\n    initAudio('chargeMonitor', `${AUDIO_PATH}charge_monitor.mp3`);\n    initAudio('stopCompression', `${AUDIO_PATH}stop_compression.mp3`);\n    initAudio('1', `${AUDIO_PATH}numbers/1.mp3`);\n    initAudio('2', `${AUDIO_PATH}numbers/2.mp3`);\n    initAudio('3', `${AUDIO_PATH}numbers/3.mp3`);\n    initAudio('4', `${AUDIO_PATH}numbers/4.mp3`);\n    initAudio('5', `${AUDIO_PATH}numbers/5.mp3`);\n\n    // Unlock audio for iOS on first user interaction\n    document.addEventListener('click', unlockAudio, {\n      once: true\n    });\n    return () => {\n      document.removeEventListener('click', unlockAudio);\n    };\n  }, [initAudio, unlockAudio]);\n\n  // Reset all features to their initial state - ENHANCED RESET FUNCTION\n  const resetAllFeatures = useCallback(() => {\n    console.log(\"RESET FUNCTION CALLED\");\n\n    // 1. First, stop all sounds\n    try {\n      if (typeof stopSound === 'function') {\n        stopSound('metronome');\n        stopSound('ventilate');\n        stopSound('chargeMonitor');\n        stopSound('stopCompression');\n      }\n    } catch (e) {\n      console.error(\"Error stopping sounds:\", e);\n    }\n\n    // 2. Clear all intervals\n    console.log(\"Clearing all intervals\");\n\n    // Clear timer interval\n    if (timerIntervalRef.current) {\n      clearInterval(timerIntervalRef.current);\n      timerIntervalRef.current = null;\n    }\n\n    // Clear pulse interval\n    if (pulseIntervalRef.current) {\n      clearInterval(pulseIntervalRef.current);\n      pulseIntervalRef.current = null;\n    }\n\n    // Clear ventilation interval\n    if (ventilationIntervalRef.current) {\n      clearInterval(ventilationIntervalRef.current);\n      ventilationIntervalRef.current = null;\n    }\n\n    // Clear epi interval\n    if (epiIntervalRef.current) {\n      clearInterval(epiIntervalRef.current);\n      epiIntervalRef.current = null;\n    }\n\n    // Clear clock interval\n    if (clockIntervalRef.current) {\n      clearInterval(clockIntervalRef.current);\n      clockIntervalRef.current = null;\n    }\n\n    // 3. Reset all state variables\n    console.log(\"Resetting all state variables\");\n    setActiveSection(initialState.activeSection);\n    setSeconds(initialState.seconds);\n    setPulseCheckTime(initialState.pulseCheckTime);\n    setPauseTime(initialState.pauseTime);\n    setMetronomeRunning(initialState.metronomeRunning);\n    setVentilationActive(initialState.ventilationActive);\n    setShowChargeMonitor(initialState.showChargeMonitor);\n    setEpiActive(initialState.epiActive);\n    setEpiTime(initialState.epiTime);\n    setEpiCycles(initialState.epiCycles);\n    setClockStarted(initialState.clockStarted);\n    setStartTime(initialState.startTime);\n    setCountdownAnnounced(initialState.countdownAnnounced);\n    setConfirmReset(initialState.confirmReset);\n    setPulseFlashing(initialState.pulseFlashing);\n    setEpiFlashing(initialState.epiFlashing);\n\n    // 4. Trigger a UI refresh\n    setRefreshTrigger(prev => prev + 1);\n    console.log(\"Reset completed\");\n  }, [stopSound]); // Only depend on stopSound\n\n  // Start the main clock\n  const startClock = useCallback(() => {\n    if (clockIntervalRef.current) {\n      clearInterval(clockIntervalRef.current);\n    }\n    const interval = setInterval(() => {\n      setSeconds(prev => prev + 1);\n    }, 1000);\n    clockIntervalRef.current = interval;\n    setClockStarted(true);\n  }, []);\n\n  // Reset the main clock\n  const resetClock = useCallback(() => {\n    setSeconds(0);\n    setConfirmReset(false);\n\n    // Only start the clock if there's an active feature\n    if (!clockStarted && (activeSection || ventilationActive || epiActive)) {\n      startClock();\n    } else if (!activeSection && !ventilationActive && !epiActive) {\n      // If everything is inactive, just reset without starting\n      if (clockIntervalRef.current) {\n        clearInterval(clockIntervalRef.current);\n        clockIntervalRef.current = null;\n      }\n      setClockStarted(false);\n    }\n  }, [clockStarted, startClock, activeSection, ventilationActive, epiActive]);\n\n  // Handle timer click to show confirmation\n  const handleTimerClick = useCallback(() => {\n    // If timer is already at 0, no need for confirmation\n    if (seconds === 0) return;\n\n    // Show confirmation dialog\n    setConfirmReset(true);\n  }, [seconds]);\n\n  // Cancel reset\n  const cancelReset = useCallback(() => {\n    setConfirmReset(false);\n  }, []);\n\n  // Toggle ventilation\n  const toggleVentilation = useCallback(() => {\n    // Start the main timer if this is the first feature activated\n    if (!clockStarted && !activeSection && !ventilationActive && !epiActive) {\n      startClock();\n      setStartTime(new Date());\n    }\n    setVentilationActive(prev => !prev);\n  }, [clockStarted, startClock, activeSection, ventilationActive, epiActive]);\n\n  // Metronome functions\n  const handleMetronomeClick = useCallback(() => {\n    // Start the main timer if this is the first feature activated\n    if (!clockStarted && !activeSection && !ventilationActive && !epiActive) {\n      startClock();\n      setStartTime(new Date());\n    }\n    if (activeSection === 'metronome' || activeSection === 'pulse+metronome') {\n      if (activeSection === 'pulse+metronome') {\n        setActiveSection('pulse');\n      } else {\n        setActiveSection(null);\n      }\n    } else {\n      if (activeSection === 'pulse') {\n        setActiveSection('pulse+metronome');\n      } else {\n        setActiveSection('metronome');\n        // Only set start time if it hasn't been set yet\n        if (!startTime) {\n          setStartTime(new Date());\n        }\n      }\n    }\n  }, [activeSection, clockStarted, startClock, ventilationActive, epiActive, startTime]);\n\n  // Define startPulseCountdown with reference to the ref instead of direct function\n  const startPulseCountdown = useCallback(() => {\n    // Clear any existing interval first\n    if (pulseIntervalRef.current) {\n      clearInterval(pulseIntervalRef.current);\n    }\n\n    // Reset the counter to 0\n    setPulseCheckTime(0);\n    pulseIntervalRef.current = setInterval(() => {\n      setPulseCheckTime(prevTime => {\n        const newTime = prevTime + 1;\n\n        // Show charge monitor warning at 1:45 (105 seconds)\n        if (newTime === 105) {\n          setShowChargeMonitor(true);\n          playSound('chargeMonitor');\n          setPulseFlashing(true);\n        }\n\n        // Countdown for last 5 seconds - directly matching the timer display\n        if (newTime === 115) playSound('5'); // 1:55\n        if (newTime === 116) playSound('4'); // 1:56\n        if (newTime === 117) playSound('3'); // 1:57\n        if (newTime === 118) playSound('2'); // 1:58\n        if (newTime === 119) playSound('1'); // 1:59\n\n        // Handle the \"stopCompression\" at exactly 2:00 (120 seconds)\n        if (newTime === 120) {\n          playSound('stopCompression');\n          setPulseFlashing(false);\n\n          // Clear this interval and start the pause countdown\n          clearInterval(pulseIntervalRef.current);\n          startPauseCountdownRef.current();\n          return 120; // Keep it at 120\n        }\n        return newTime;\n      });\n    }, 1000);\n  }, [playSound]);\n\n  // Reimplemented to count up instead of down\n  const startPauseCountdown = useCallback(() => {\n    // Reset the pause counter to 0\n    setPauseTime(0);\n\n    // Start a new interval for the pause countdown\n    pulseIntervalRef.current = setInterval(() => {\n      setPauseTime(prevPauseTime => {\n        const newTime = prevPauseTime + 1;\n\n        // When pause countdown reaches 10 seconds\n        if (newTime >= 10) {\n          // Auto-restart the pulse check countdown\n          setPulseCheckTime(0);\n          setShowChargeMonitor(false);\n          setCountdownAnnounced({\n            5: false,\n            4: false,\n            3: false,\n            2: false,\n            1: false\n          });\n\n          // Clear this interval and restart the pulse countdown\n          clearInterval(pulseIntervalRef.current);\n          startPulseCountdownRef.current();\n          return 0; // Reset the pause time for next time\n        }\n        return newTime;\n      });\n    }, 1000);\n  }, []);\n\n  // Assign the functions to the refs after they're defined\n  useEffect(() => {\n    startPulseCountdownRef.current = startPulseCountdown;\n    startPauseCountdownRef.current = startPauseCountdown;\n  }, [startPulseCountdown, startPauseCountdown]);\n\n  // Handle pulse check click\n  const handlePulseCheckClick = useCallback(() => {\n    // Start the main timer if this is the first feature activated\n    if (!clockStarted && !activeSection && !ventilationActive && !epiActive) {\n      startClock();\n      setStartTime(new Date());\n    }\n    if (activeSection === 'pulse' || activeSection === 'pulse+metronome') {\n      if (activeSection === 'pulse+metronome') {\n        setActiveSection('metronome');\n      } else {\n        setActiveSection(null);\n      }\n\n      // Clear both intervals to be safe\n      if (pulseIntervalRef.current) {\n        clearInterval(pulseIntervalRef.current);\n        pulseIntervalRef.current = null;\n      }\n      setPulseFlashing(false); // Stop flashing\n    } else {\n      if (activeSection === 'metronome') {\n        setActiveSection('pulse+metronome');\n      } else {\n        setActiveSection('pulse');\n      }\n\n      // Reset all values\n      setPulseCheckTime(0); // Start at 0 for count up\n      setPauseTime(0); // Start at 0 for count up\n      setShowChargeMonitor(false);\n      setCountdownAnnounced({\n        5: false,\n        4: false,\n        3: false,\n        2: false,\n        1: false\n      });\n\n      // Start the main pulse check countdown using the ref\n      startPulseCountdownRef.current();\n    }\n  }, [activeSection, clockStarted, startClock, ventilationActive, epiActive]);\n\n  // Epinephrine functions - modified for count-up and cycle counting\n  const handleEpinephrineClick = useCallback(() => {\n    // Start the main timer if this is the first feature activated\n    if (!clockStarted && !activeSection && !ventilationActive && !epiActive) {\n      startClock();\n      setStartTime(new Date());\n    }\n\n    // Toggle or reset epinephrine state\n    if (epiActive) {\n      // If already active, restart the timer and increment cycle count\n      setEpiTime(0);\n      setEpiCycles(prev => prev + 1);\n      setEpiFlashing(false);\n    } else {\n      // If turning on, set initial state with cycle count of 1 (first dose)\n      setEpiTime(0);\n      setEpiCycles(1); // Start at 1 instead of 0\n      setEpiActive(true);\n    }\n  }, [clockStarted, startClock, activeSection, ventilationActive, epiActive]);\n\n  // Add a function to turn off epinephrine completely (long press or separate button)\n  const turnOffEpinephrine = useCallback(() => {\n    setEpiActive(false);\n    setEpiTime(0);\n    setEpiCycles(0); // Reset cycles to 0 when turning off completely\n    setEpiFlashing(false);\n\n    // Clear interval\n    if (epiIntervalRef.current) {\n      clearInterval(epiIntervalRef.current);\n      epiIntervalRef.current = null;\n    }\n  }, []);\n\n  // Update metronome state based on activeSection\n  useEffect(() => {\n    if (activeSection === 'metronome' || activeSection === 'pulse+metronome') {\n      setMetronomeRunning(true);\n    } else {\n      setMetronomeRunning(false);\n    }\n    if (!activeSection && !ventilationActive && !epiActive && clockStarted) {\n      if (clockIntervalRef.current) {\n        clearInterval(clockIntervalRef.current);\n        clockIntervalRef.current = null;\n      }\n      setSeconds(0);\n      setClockStarted(false);\n    }\n  }, [activeSection, ventilationActive, epiActive, clockStarted]);\n\n  // Metronome timer effect\n  useEffect(() => {\n    if (!metronomeRunning) return;\n    if (timerIntervalRef.current) {\n      clearInterval(timerIntervalRef.current);\n      timerIntervalRef.current = null;\n    }\n    const bpm = 110; // Fixed BPM\n    if (bpm <= 0) return;\n    const intervalTime = 60 / bpm * 1000;\n\n    // Play immediately on start\n    playSound('metronome');\n    timerIntervalRef.current = setInterval(() => {\n      playSound('metronome');\n    }, intervalTime);\n    return () => {\n      if (timerIntervalRef.current) {\n        clearInterval(timerIntervalRef.current);\n        timerIntervalRef.current = null;\n      }\n    };\n  }, [metronomeRunning, playSound]);\n\n  // Ventilation timer effect\n  useEffect(() => {\n    if (!ventilationActive) return;\n    if (ventilationIntervalRef.current) {\n      clearInterval(ventilationIntervalRef.current);\n      ventilationIntervalRef.current = null;\n    }\n    if (ventilationRate <= 0) return;\n    const intervalTime = 60 / ventilationRate * 1000;\n\n    // Play immediately on start\n    playSound('ventilate');\n    ventilationIntervalRef.current = setInterval(() => {\n      playSound('ventilate');\n    }, intervalTime);\n    return () => {\n      if (ventilationIntervalRef.current) {\n        clearInterval(ventilationIntervalRef.current);\n        ventilationIntervalRef.current = null;\n      }\n    };\n  }, [ventilationActive, ventilationRate, playSound]);\n\n  // Epinephrine timer effect - modified for count-up\n  useEffect(() => {\n    if (!epiActive) {\n      if (epiIntervalRef.current) {\n        clearInterval(epiIntervalRef.current);\n        epiIntervalRef.current = null;\n      }\n      setEpiFlashing(false); // Ensure flashing stops when deactivated\n      return;\n    }\n\n    // Reset timer to 0 when activated (only if it was just activated)\n    if (epiTime === 0 && epiIntervalRef.current === null) {\n      setEpiTime(0);\n    }\n    epiIntervalRef.current = setInterval(() => {\n      setEpiTime(prevTime => {\n        const newTime = prevTime + 1;\n\n        // Start flashing when we reach 4:45 (285 seconds)\n        if (newTime === 285) {\n          setEpiFlashing(true);\n        }\n\n        // Continue counting up indefinitely until button is clicked again\n        // No automatic cycle increment based on time\n        return newTime;\n      });\n    }, 1000);\n    return () => {\n      if (epiIntervalRef.current) {\n        clearInterval(epiIntervalRef.current);\n        epiIntervalRef.current = null;\n      }\n    };\n  }, [epiActive]);\n\n  // Format seconds to MM:SS\n  const formatTime = totalSeconds => {\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  };\n\n  // Format time as 24-hour clock HH:MM\n  const formatClock = date => {\n    if (!date) return \"--:--\";\n    const hours = date.getHours().toString().padStart(2, '0');\n    const minutes = date.getMinutes().toString().padStart(2, '0');\n    return `${hours}:${minutes}`;\n  };\n\n  // Cleanup all intervals on unmount\n  useEffect(() => {\n    return () => {\n      [timerIntervalRef, pulseIntervalRef, ventilationIntervalRef, epiIntervalRef, clockIntervalRef].forEach(ref => {\n        if (ref && ref.current) {\n          clearInterval(ref.current);\n          ref.current = null;\n        }\n      });\n    };\n  }, []);\n\n  // Effect to monitor key state changes for debugging\n  useEffect(() => {\n    console.log(\"State update:\", {\n      activeSection,\n      seconds,\n      clockStarted,\n      ventilationActive,\n      epiActive,\n      refreshTrigger\n    });\n  }, [activeSection, seconds, clockStarted, ventilationActive, epiActive, refreshTrigger]);\n\n  // Exposed context value\n  const contextValue = {\n    // State\n    activeSection,\n    seconds,\n    pulseCheckTime,\n    pauseTime,\n    metronomeRunning,\n    ventilationActive,\n    ventilationRate,\n    showChargeMonitor,\n    epiActive,\n    epiTime,\n    epiCycles,\n    clockStarted,\n    startTime,\n    countdownAnnounced,\n    confirmReset,\n    pulseFlashing,\n    epiFlashing,\n    refreshTrigger,\n    // Add the refresh trigger to the context\n\n    // Actions\n    setVentilationRate,\n    handleTimerClick,\n    resetClock,\n    cancelReset,\n    toggleVentilation,\n    handleMetronomeClick,\n    handlePulseCheckClick,\n    handleEpinephrineClick,\n    turnOffEpinephrine,\n    resetAllFeatures,\n    // Utilities\n    formatTime,\n    formatClock,\n    COLORS\n  };\n  return /*#__PURE__*/_jsxDEV(AppStateContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 611,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the app state\n_s(AppStateProvider, \"fWZaNCTgMnRKgidpcM/X1uuzhMA=\", false, function () {\n  return [useAudio];\n});\n_c = AppStateProvider;\nexport const useAppState = () => {\n  _s2();\n  const context = useContext(AppStateContext);\n  if (context === undefined) {\n    throw new Error('useAppState must be used within an AppStateProvider');\n  }\n  return context;\n};\n_s2(useAppState, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AppStateProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","useRef","useAudio","jsxDEV","_jsxDEV","COLORS","background","logoRed","logoYellow","pulseBlue","ventGreen","white","darkText","timerBg","sliderBg","AppStateContext","AUDIO_PATH","initialState","activeSection","seconds","pulseCheckTime","pauseTime","metronomeRunning","ventilationActive","ventilationRate","showChargeMonitor","epiActive","epiTime","epiCycles","clockStarted","startTime","countdownAnnounced","confirmReset","pulseFlashing","epiFlashing","AppStateProvider","children","_s","setActiveSection","setSeconds","setPulseCheckTime","setPauseTime","setMetronomeRunning","setVentilationActive","setVentilationRate","setShowChargeMonitor","setEpiActive","setEpiTime","setEpiCycles","setClockStarted","setStartTime","setCountdownAnnounced","setConfirmReset","setPulseFlashing","setEpiFlashing","refreshTrigger","setRefreshTrigger","timerIntervalRef","pulseIntervalRef","ventilationIntervalRef","epiIntervalRef","clockIntervalRef","startPulseCountdownRef","startPauseCountdownRef","initAudio","playSound","stopSound","unlockAudio","document","addEventListener","once","removeEventListener","resetAllFeatures","console","log","e","error","current","clearInterval","prev","startClock","interval","setInterval","resetClock","handleTimerClick","cancelReset","toggleVentilation","Date","handleMetronomeClick","startPulseCountdown","prevTime","newTime","startPauseCountdown","prevPauseTime","handlePulseCheckClick","handleEpinephrineClick","turnOffEpinephrine","bpm","intervalTime","formatTime","totalSeconds","minutes","Math","floor","toString","padStart","formatClock","date","hours","getHours","getMinutes","forEach","ref","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAppState","_s2","context","undefined","Error","$RefreshReg$"],"sources":["/Users/davidhelmers/arrestpro/src/context/AppStateContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback, useRef } from 'react';\nimport useAudio from '../hooks/useAudio';\n\n// App constants\nexport const COLORS = {\n  background: '#1e2126',     // Dark background\n  logoRed: '#ff4136',        // Red from logo\n  logoYellow: '#f4eb00ff',   // Yellow from logo\n  pulseBlue: '#3498db',      // Blue for pulse check\n  ventGreen: '#2ecc40',      // Green for ventilation\n  white: '#ffffff',          // White text\n  darkText: '#1a1a1a',       // Dark text for yellow buttons\n  timerBg: '#2c3e50',        // Timer background\n  sliderBg: '#ecf0f1',       // Slider background\n};\n\n// Create the context\nconst AppStateContext = createContext();\n\n// Path to audio files\nconst AUDIO_PATH = '/audio/';\n\n// Initial state - used for reset\nconst initialState = {\n  activeSection: null,\n  seconds: 0,\n  pulseCheckTime: 0,\n  pauseTime: 0,\n  metronomeRunning: false,\n  ventilationActive: false,\n  ventilationRate: 11,\n  showChargeMonitor: false,\n  epiActive: false,\n  epiTime: 0,\n  epiCycles: 0,\n  clockStarted: false,\n  startTime: null,\n  countdownAnnounced: {5: false, 4: false, 3: false, 2: false, 1: false},\n  confirmReset: false,\n  pulseFlashing: false,\n  epiFlashing: false\n};\n\nexport const AppStateProvider = ({ children }) => {\n  // State variables\n  const [activeSection, setActiveSection] = useState(initialState.activeSection);\n  const [seconds, setSeconds] = useState(initialState.seconds);\n  const [pulseCheckTime, setPulseCheckTime] = useState(initialState.pulseCheckTime);\n  const [pauseTime, setPauseTime] = useState(initialState.pauseTime);\n  const [metronomeRunning, setMetronomeRunning] = useState(initialState.metronomeRunning);\n  const [ventilationActive, setVentilationActive] = useState(initialState.ventilationActive);\n  const [ventilationRate, setVentilationRate] = useState(initialState.ventilationRate);\n  const [showChargeMonitor, setShowChargeMonitor] = useState(initialState.showChargeMonitor);\n  const [epiActive, setEpiActive] = useState(initialState.epiActive);\n  const [epiTime, setEpiTime] = useState(initialState.epiTime);\n  const [epiCycles, setEpiCycles] = useState(initialState.epiCycles);\n  const [clockStarted, setClockStarted] = useState(initialState.clockStarted);\n  const [startTime, setStartTime] = useState(initialState.startTime);\n  const [countdownAnnounced, setCountdownAnnounced] = useState(initialState.countdownAnnounced);\n  const [confirmReset, setConfirmReset] = useState(initialState.confirmReset);\n  const [pulseFlashing, setPulseFlashing] = useState(initialState.pulseFlashing);\n  const [epiFlashing, setEpiFlashing] = useState(initialState.epiFlashing);\n  \n  // Force UI refresh - Add this new state\n  const [refreshTrigger, setRefreshTrigger] = useState(0);\n\n  // Refs for safer interval handling\n  const timerIntervalRef = useRef(null);\n  const pulseIntervalRef = useRef(null);\n  const ventilationIntervalRef = useRef(null);\n  const epiIntervalRef = useRef(null);\n  const clockIntervalRef = useRef(null);\n\n  // Refs for circular function dependencies\n  const startPulseCountdownRef = useRef(null);\n  const startPauseCountdownRef = useRef(null);\n\n  // Audio hooks\n  const { initAudio, playSound, stopSound, unlockAudio } = useAudio();\n\n  // Initialize all audio files\n  useEffect(() => {\n    // Initialize audio pools for all sounds we'll use\n    initAudio('metronome', `${AUDIO_PATH}click.mp3`, 5);  // More instances for rapid clicks\n    initAudio('ventilate', `${AUDIO_PATH}ventilate.mp3`, 3);\n    initAudio('chargeMonitor', `${AUDIO_PATH}charge_monitor.mp3`);\n    initAudio('stopCompression', `${AUDIO_PATH}stop_compression.mp3`);\n    initAudio('1', `${AUDIO_PATH}numbers/1.mp3`);\n    initAudio('2', `${AUDIO_PATH}numbers/2.mp3`);\n    initAudio('3', `${AUDIO_PATH}numbers/3.mp3`);\n    initAudio('4', `${AUDIO_PATH}numbers/4.mp3`);\n    initAudio('5', `${AUDIO_PATH}numbers/5.mp3`);\n    \n    // Unlock audio for iOS on first user interaction\n    document.addEventListener('click', unlockAudio, { once: true });\n    \n    return () => {\n      document.removeEventListener('click', unlockAudio);\n    };\n  }, [initAudio, unlockAudio]);\n\n  // Reset all features to their initial state - ENHANCED RESET FUNCTION\n  const resetAllFeatures = useCallback(() => {\n    console.log(\"RESET FUNCTION CALLED\");\n    \n    // 1. First, stop all sounds\n    try {\n      if (typeof stopSound === 'function') {\n        stopSound('metronome');\n        stopSound('ventilate');\n        stopSound('chargeMonitor');\n        stopSound('stopCompression');\n      }\n    } catch (e) {\n      console.error(\"Error stopping sounds:\", e);\n    }\n    \n    // 2. Clear all intervals\n    console.log(\"Clearing all intervals\");\n    \n    // Clear timer interval\n    if (timerIntervalRef.current) {\n      clearInterval(timerIntervalRef.current);\n      timerIntervalRef.current = null;\n    }\n    \n    // Clear pulse interval\n    if (pulseIntervalRef.current) {\n      clearInterval(pulseIntervalRef.current);\n      pulseIntervalRef.current = null;\n    }\n    \n    // Clear ventilation interval\n    if (ventilationIntervalRef.current) {\n      clearInterval(ventilationIntervalRef.current);\n      ventilationIntervalRef.current = null;\n    }\n    \n    // Clear epi interval\n    if (epiIntervalRef.current) {\n      clearInterval(epiIntervalRef.current);\n      epiIntervalRef.current = null;\n    }\n    \n    // Clear clock interval\n    if (clockIntervalRef.current) {\n      clearInterval(clockIntervalRef.current);\n      clockIntervalRef.current = null;\n    }\n    \n    // 3. Reset all state variables\n    console.log(\"Resetting all state variables\");\n    \n    setActiveSection(initialState.activeSection);\n    setSeconds(initialState.seconds);\n    setPulseCheckTime(initialState.pulseCheckTime);\n    setPauseTime(initialState.pauseTime);\n    setMetronomeRunning(initialState.metronomeRunning);\n    setVentilationActive(initialState.ventilationActive);\n    setShowChargeMonitor(initialState.showChargeMonitor);\n    setEpiActive(initialState.epiActive);\n    setEpiTime(initialState.epiTime);\n    setEpiCycles(initialState.epiCycles);\n    setClockStarted(initialState.clockStarted);\n    setStartTime(initialState.startTime);\n    setCountdownAnnounced(initialState.countdownAnnounced);\n    setConfirmReset(initialState.confirmReset);\n    setPulseFlashing(initialState.pulseFlashing);\n    setEpiFlashing(initialState.epiFlashing);\n    \n    // 4. Trigger a UI refresh\n    setRefreshTrigger(prev => prev + 1);\n    \n    console.log(\"Reset completed\");\n  }, [stopSound]); // Only depend on stopSound\n\n  // Start the main clock\n  const startClock = useCallback(() => {\n    if (clockIntervalRef.current) {\n      clearInterval(clockIntervalRef.current);\n    }\n    \n    const interval = setInterval(() => {\n      setSeconds(prev => prev + 1);\n    }, 1000);\n    \n    clockIntervalRef.current = interval;\n    setClockStarted(true);\n  }, []);\n  \n  // Reset the main clock\n  const resetClock = useCallback(() => {\n    setSeconds(0);\n    setConfirmReset(false);\n    \n    // Only start the clock if there's an active feature\n    if (!clockStarted && (activeSection || ventilationActive || epiActive)) {\n      startClock();\n    } else if (!activeSection && !ventilationActive && !epiActive) {\n      // If everything is inactive, just reset without starting\n      if (clockIntervalRef.current) {\n        clearInterval(clockIntervalRef.current);\n        clockIntervalRef.current = null;\n      }\n      setClockStarted(false);\n    }\n  }, [clockStarted, startClock, activeSection, ventilationActive, epiActive]);\n  \n  // Handle timer click to show confirmation\n  const handleTimerClick = useCallback(() => {\n    // If timer is already at 0, no need for confirmation\n    if (seconds === 0) return;\n    \n    // Show confirmation dialog\n    setConfirmReset(true);\n  }, [seconds]);\n  \n  // Cancel reset\n  const cancelReset = useCallback(() => {\n    setConfirmReset(false);\n  }, []);\n\n  // Toggle ventilation\n  const toggleVentilation = useCallback(() => {\n    // Start the main timer if this is the first feature activated\n    if (!clockStarted && !activeSection && !ventilationActive && !epiActive) {\n      startClock();\n      setStartTime(new Date());\n    }\n    \n    setVentilationActive(prev => !prev);\n  }, [clockStarted, startClock, activeSection, ventilationActive, epiActive]);\n\n  // Metronome functions\n  const handleMetronomeClick = useCallback(() => {\n    // Start the main timer if this is the first feature activated\n    if (!clockStarted && !activeSection && !ventilationActive && !epiActive) {\n      startClock();\n      setStartTime(new Date());\n    }\n    \n    if (activeSection === 'metronome' || activeSection === 'pulse+metronome') {\n      if (activeSection === 'pulse+metronome') {\n        setActiveSection('pulse');\n      } else {\n        setActiveSection(null);\n      }\n    } else {\n      if (activeSection === 'pulse') {\n        setActiveSection('pulse+metronome');\n      } else {\n        setActiveSection('metronome');\n        // Only set start time if it hasn't been set yet\n        if (!startTime) {\n          setStartTime(new Date());\n        }\n      }\n    }\n  }, [activeSection, clockStarted, startClock, ventilationActive, epiActive, startTime]);\n\n  // Define startPulseCountdown with reference to the ref instead of direct function\n  const startPulseCountdown = useCallback(() => {\n    // Clear any existing interval first\n    if (pulseIntervalRef.current) {\n      clearInterval(pulseIntervalRef.current);\n    }\n    \n    // Reset the counter to 0\n    setPulseCheckTime(0);\n    \n    pulseIntervalRef.current = setInterval(() => {\n      setPulseCheckTime(prevTime => {\n        const newTime = prevTime + 1;\n        \n        // Show charge monitor warning at 1:45 (105 seconds)\n        if (newTime === 105) {\n          setShowChargeMonitor(true);\n          playSound('chargeMonitor');\n          setPulseFlashing(true);\n        }\n\n        // Countdown for last 5 seconds - directly matching the timer display\n        if (newTime === 115) playSound('5'); // 1:55\n        if (newTime === 116) playSound('4'); // 1:56\n        if (newTime === 117) playSound('3'); // 1:57\n        if (newTime === 118) playSound('2'); // 1:58\n        if (newTime === 119) playSound('1'); // 1:59\n        \n        // Handle the \"stopCompression\" at exactly 2:00 (120 seconds)\n        if (newTime === 120) {\n          playSound('stopCompression');\n          setPulseFlashing(false);\n          \n          // Clear this interval and start the pause countdown\n          clearInterval(pulseIntervalRef.current);\n          startPauseCountdownRef.current();\n          \n          return 120; // Keep it at 120\n        }\n        \n        return newTime;\n      });\n    }, 1000);\n  }, [playSound]);\n\n  // Reimplemented to count up instead of down\n  const startPauseCountdown = useCallback(() => {\n    // Reset the pause counter to 0\n    setPauseTime(0);\n    \n    // Start a new interval for the pause countdown\n    pulseIntervalRef.current = setInterval(() => {\n      setPauseTime(prevPauseTime => {\n        const newTime = prevPauseTime + 1;\n        \n        // When pause countdown reaches 10 seconds\n        if (newTime >= 10) {\n          // Auto-restart the pulse check countdown\n          setPulseCheckTime(0);\n          setShowChargeMonitor(false);\n          setCountdownAnnounced({ 5: false, 4: false, 3: false, 2: false, 1: false });\n          \n          // Clear this interval and restart the pulse countdown\n          clearInterval(pulseIntervalRef.current);\n          startPulseCountdownRef.current();\n          \n          return 0; // Reset the pause time for next time\n        }\n        \n        return newTime;\n      });\n    }, 1000);\n  }, []);\n\n  // Assign the functions to the refs after they're defined\n  useEffect(() => {\n    startPulseCountdownRef.current = startPulseCountdown;\n    startPauseCountdownRef.current = startPauseCountdown;\n  }, [startPulseCountdown, startPauseCountdown]);\n\n  // Handle pulse check click\n  const handlePulseCheckClick = useCallback(() => {\n    // Start the main timer if this is the first feature activated\n    if (!clockStarted && !activeSection && !ventilationActive && !epiActive) {\n      startClock();\n      setStartTime(new Date());\n    }\n    \n    if (activeSection === 'pulse' || activeSection === 'pulse+metronome') {\n      if (activeSection === 'pulse+metronome') {\n        setActiveSection('metronome');\n      } else {\n        setActiveSection(null);\n      }\n      \n      // Clear both intervals to be safe\n      if (pulseIntervalRef.current) {\n        clearInterval(pulseIntervalRef.current);\n        pulseIntervalRef.current = null;\n      }\n      \n      setPulseFlashing(false); // Stop flashing\n    } else {\n      if (activeSection === 'metronome') {\n        setActiveSection('pulse+metronome');\n      } else {\n        setActiveSection('pulse');\n      }\n      \n      // Reset all values\n      setPulseCheckTime(0);    // Start at 0 for count up\n      setPauseTime(0);         // Start at 0 for count up\n      setShowChargeMonitor(false);\n      setCountdownAnnounced({5: false, 4: false, 3: false, 2: false, 1: false});\n      \n      // Start the main pulse check countdown using the ref\n      startPulseCountdownRef.current();\n    }\n  }, [activeSection, clockStarted, startClock, ventilationActive, epiActive]);\n\n  // Epinephrine functions - modified for count-up and cycle counting\n  const handleEpinephrineClick = useCallback(() => {\n    // Start the main timer if this is the first feature activated\n    if (!clockStarted && !activeSection && !ventilationActive && !epiActive) {\n      startClock();\n      setStartTime(new Date());\n    }\n    \n    // Toggle or reset epinephrine state\n    if (epiActive) {\n      // If already active, restart the timer and increment cycle count\n      setEpiTime(0);\n      setEpiCycles(prev => prev + 1);\n      setEpiFlashing(false);\n    } else {\n      // If turning on, set initial state with cycle count of 1 (first dose)\n      setEpiTime(0);\n      setEpiCycles(1); // Start at 1 instead of 0\n      setEpiActive(true);\n    }\n  }, [clockStarted, startClock, activeSection, ventilationActive, epiActive]);\n\n  // Add a function to turn off epinephrine completely (long press or separate button)\n  const turnOffEpinephrine = useCallback(() => {\n    setEpiActive(false);\n    setEpiTime(0);\n    setEpiCycles(0); // Reset cycles to 0 when turning off completely\n    setEpiFlashing(false);\n    \n    // Clear interval\n    if (epiIntervalRef.current) {\n      clearInterval(epiIntervalRef.current);\n      epiIntervalRef.current = null;\n    }\n  }, []);\n\n  // Update metronome state based on activeSection\n  useEffect(() => {\n    if (activeSection === 'metronome' || activeSection === 'pulse+metronome') {\n      setMetronomeRunning(true);\n    } else {\n      setMetronomeRunning(false);\n    }\n    \n    if (!activeSection && !ventilationActive && !epiActive && clockStarted) {\n      if (clockIntervalRef.current) {\n        clearInterval(clockIntervalRef.current);\n        clockIntervalRef.current = null;\n      }\n      setSeconds(0);\n      setClockStarted(false);\n    }\n  }, [activeSection, ventilationActive, epiActive, clockStarted]);\n\n  // Metronome timer effect\n  useEffect(() => {\n    if (!metronomeRunning) return;\n    \n    if (timerIntervalRef.current) {\n      clearInterval(timerIntervalRef.current);\n      timerIntervalRef.current = null;\n    }\n    \n    const bpm = 110; // Fixed BPM\n    if (bpm <= 0) return;\n    \n    const intervalTime = (60 / bpm) * 1000;\n    \n    // Play immediately on start\n    playSound('metronome');\n    \n    timerIntervalRef.current = setInterval(() => {\n      playSound('metronome');\n    }, intervalTime);\n    \n    return () => {\n      if (timerIntervalRef.current) {\n        clearInterval(timerIntervalRef.current);\n        timerIntervalRef.current = null;\n      }\n    };\n  }, [metronomeRunning, playSound]);\n\n  // Ventilation timer effect\n  useEffect(() => {\n    if (!ventilationActive) return;\n    \n    if (ventilationIntervalRef.current) {\n      clearInterval(ventilationIntervalRef.current);\n      ventilationIntervalRef.current = null;\n    }\n    \n    if (ventilationRate <= 0) return;\n    \n    const intervalTime = (60 / ventilationRate) * 1000;\n    \n    // Play immediately on start\n    playSound('ventilate');\n    \n    ventilationIntervalRef.current = setInterval(() => {\n      playSound('ventilate');\n    }, intervalTime);\n    \n    return () => {\n      if (ventilationIntervalRef.current) {\n        clearInterval(ventilationIntervalRef.current);\n        ventilationIntervalRef.current = null;\n      }\n    };\n  }, [ventilationActive, ventilationRate, playSound]);\n\n  // Epinephrine timer effect - modified for count-up\n  useEffect(() => {\n    if (!epiActive) {\n      if (epiIntervalRef.current) {\n        clearInterval(epiIntervalRef.current);\n        epiIntervalRef.current = null;\n      }\n      setEpiFlashing(false); // Ensure flashing stops when deactivated\n      return;\n    }\n    \n    // Reset timer to 0 when activated (only if it was just activated)\n    if (epiTime === 0 && epiIntervalRef.current === null) {\n      setEpiTime(0);\n    }\n    \n    epiIntervalRef.current = setInterval(() => {\n      setEpiTime(prevTime => {\n        const newTime = prevTime + 1;\n        \n        // Start flashing when we reach 4:45 (285 seconds)\n        if (newTime === 285) {\n          setEpiFlashing(true);\n        }\n        \n        // Continue counting up indefinitely until button is clicked again\n        // No automatic cycle increment based on time\n        return newTime;\n      });\n    }, 1000);\n    \n    return () => {\n      if (epiIntervalRef.current) {\n        clearInterval(epiIntervalRef.current);\n        epiIntervalRef.current = null;\n      }\n    };\n  }, [epiActive]);\n\n  // Format seconds to MM:SS\n  const formatTime = (totalSeconds) => {\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  };\n  \n  // Format time as 24-hour clock HH:MM\n  const formatClock = (date) => {\n    if (!date) return \"--:--\";\n    const hours = date.getHours().toString().padStart(2, '0');\n    const minutes = date.getMinutes().toString().padStart(2, '0');\n    return `${hours}:${minutes}`;\n  };\n\n  // Cleanup all intervals on unmount\n  useEffect(() => {\n    return () => {\n      [timerIntervalRef, pulseIntervalRef, ventilationIntervalRef, epiIntervalRef, clockIntervalRef].forEach(ref => {\n        if (ref && ref.current) {\n          clearInterval(ref.current);\n          ref.current = null;\n        }\n      });\n    };\n  }, []);\n\n  // Effect to monitor key state changes for debugging\n  useEffect(() => {\n    console.log(\"State update:\", {\n      activeSection,\n      seconds,\n      clockStarted,\n      ventilationActive,\n      epiActive,\n      refreshTrigger\n    });\n  }, [activeSection, seconds, clockStarted, ventilationActive, epiActive, refreshTrigger]);\n\n  // Exposed context value\n  const contextValue = {\n    // State\n    activeSection,\n    seconds,\n    pulseCheckTime,\n    pauseTime,\n    metronomeRunning, \n    ventilationActive,\n    ventilationRate,\n    showChargeMonitor,\n    epiActive,\n    epiTime,\n    epiCycles,\n    clockStarted,\n    startTime,\n    countdownAnnounced,\n    confirmReset,\n    pulseFlashing,\n    epiFlashing,\n    refreshTrigger, // Add the refresh trigger to the context\n    \n    // Actions\n    setVentilationRate,\n    handleTimerClick,\n    resetClock,\n    cancelReset,\n    toggleVentilation,\n    handleMetronomeClick,\n    handlePulseCheckClick,\n    handleEpinephrineClick,\n    turnOffEpinephrine,\n    resetAllFeatures,\n    \n    // Utilities\n    formatTime,\n    formatClock,\n    COLORS\n  };\n\n  return (\n    <AppStateContext.Provider value={contextValue}>\n      {children}\n    </AppStateContext.Provider>\n  );\n};\n\n// Custom hook to use the app state\nexport const useAppState = () => {\n  const context = useContext(AppStateContext);\n  if (context === undefined) {\n    throw new Error('useAppState must be used within an AppStateProvider');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}