{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect,useCallback,useRef}from'react';import{Capacitor}from'@capacitor/core';import{App}from'@capacitor/app';import useNativeAudio from'../hooks/useNativeAudio';// App constants\nimport{jsx as _jsx}from\"react/jsx-runtime\";export const COLORS={background:'#1e2126',// Dark background\nlogoRed:'#ff4136',// Red from logo\nlogoYellow:'#f4eb00ff',// Yellow from logo\npulseBlue:'#3498db',// Blue for pulse check\nventGreen:'#2ecc40',// Green for ventilation\nwhite:'#ffffff',// White text\ndarkText:'#1a1a1a',// Dark text for yellow buttons\ntimerBg:'#2c3e50',// Timer background\nsliderBg:'#ecf0f1'// Slider background\n};// Create the context\nconst AppStateContext=/*#__PURE__*/createContext();// Get the correct audio path based on platform\nconst getAudioPath=()=>{if(Capacitor.isNativePlatform()){// For native platforms, use relative paths to the assets directory\nreturn'';// The path will be handled by Capacitor's asset system\n}else{// For web, use the public folder path\nreturn'/audio/';}};// Initial state - used for reset\nconst initialState={activeSection:null,seconds:0,pulseCheckTime:0,pauseTime:0,metronomeRunning:false,ventilationActive:false,ventilationRate:11,showChargeMonitor:false,epiActive:false,epiTime:0,epiCycles:0,clockStarted:false,startTime:null,countdownAnnounced:{5:false,4:false,3:false,2:false,1:false},confirmReset:false,pulseFlashing:false,epiFlashing:false,metronomeVolume:0.5,voiceVolume:1.0};export const AppStateProvider=_ref=>{let{children}=_ref;// State variables\nconst[activeSection,setActiveSection]=useState(initialState.activeSection);const[seconds,setSeconds]=useState(initialState.seconds);const[pulseCheckTime,setPulseCheckTime]=useState(initialState.pulseCheckTime);const[pauseTime,setPauseTime]=useState(initialState.pauseTime);const[metronomeRunning,setMetronomeRunning]=useState(initialState.metronomeRunning);const[ventilationActive,setVentilationActive]=useState(initialState.ventilationActive);const[ventilationRate,setVentilationRate]=useState(initialState.ventilationRate);const[showChargeMonitor,setShowChargeMonitor]=useState(initialState.showChargeMonitor);const[epiActive,setEpiActive]=useState(initialState.epiActive);const[epiTime,setEpiTime]=useState(initialState.epiTime);const[epiCycles,setEpiCycles]=useState(initialState.epiCycles);const[clockStarted,setClockStarted]=useState(initialState.clockStarted);const[startTime,setStartTime]=useState(initialState.startTime);const[countdownAnnounced,setCountdownAnnounced]=useState(initialState.countdownAnnounced);const[confirmReset,setConfirmReset]=useState(initialState.confirmReset);const[pulseFlashing,setPulseFlashing]=useState(initialState.pulseFlashing);const[epiFlashing,setEpiFlashing]=useState(initialState.epiFlashing);const[metronomeVolume,setMetronomeVolume]=useState(initialState.metronomeVolume);const[voiceVolume,setVoiceVolume]=useState(initialState.voiceVolume);// Force UI refresh - Add this new state\nconst[refreshTrigger,setRefreshTrigger]=useState(0);// Refs for safer interval handling\nconst timerIntervalRef=useRef(null);const pulseIntervalRef=useRef(null);const ventilationIntervalRef=useRef(null);const epiIntervalRef=useRef(null);const clockIntervalRef=useRef(null);const metronomeTimerRef=useRef(null);const lastMetronomeTimeRef=useRef(0);// Refs for circular function dependencies\nconst startPulseCountdownRef=useRef(null);const startPauseCountdownRef=useRef(null);// Platform detection\nconst isNative=Capacitor.isNativePlatform();const isIOS=Capacitor.getPlatform()==='ios';// Audio path based on platform\nconst AUDIO_PATH=getAudioPath();// Audio hooks - use the new native audio hook\nconst{initAudio,playSound,stopSound,setVolume,unlockAudio,releaseResources}=useNativeAudio();// Initialize all audio files\nuseEffect(()=>{const audioPoolSize=isNative?1:5;// Native audio doesn't need pooling\n// Initialize audio pools for all sounds we'll use\ninitAudio('metronome',`${AUDIO_PATH}click.mp3`,audioPoolSize);initAudio('ventilate',`${AUDIO_PATH}ventilate.mp3`,3);initAudio('chargeMonitor',`${AUDIO_PATH}charge_monitor.mp3`);initAudio('stopCompression',`${AUDIO_PATH}stop_compression.mp3`);initAudio('1',`${AUDIO_PATH}numbers/1.mp3`);initAudio('2',`${AUDIO_PATH}numbers/2.mp3`);initAudio('3',`${AUDIO_PATH}numbers/3.mp3`);initAudio('4',`${AUDIO_PATH}numbers/4.mp3`);initAudio('5',`${AUDIO_PATH}numbers/5.mp3`);// Set initial volumes\nsetVolume('metronome',metronomeVolume);// For native platforms, no need for manual unlocking\nif(!isNative){// Unlock audio for web on first user interaction\ndocument.addEventListener('click',unlockAudio,{once:true});}else{// For native platforms, set up app state listeners\nconst appStateListener=App.addListener('appStateChange',_ref2=>{let{isActive}=_ref2;console.log(`App state changed: ${isActive?'active':'inactive'}`);if(isActive){// App came to foreground, resume audio if needed\nif(metronomeRunning){// Restart metronome if it was running\nstartMetronome();}if(ventilationActive){// Restart ventilation if it was active\nstartVentilation();}}else{// App went to background, pause audio to be nice\n// But keep track of what was active\nif(timerIntervalRef.current){clearInterval(timerIntervalRef.current);timerIntervalRef.current=null;}if(ventilationIntervalRef.current){clearInterval(ventilationIntervalRef.current);ventilationIntervalRef.current=null;}}});return()=>{appStateListener.remove();};}return()=>{if(!isNative){document.removeEventListener('click',unlockAudio);}};},[initAudio,unlockAudio,isNative,isIOS,metronomeVolume,metronomeRunning,ventilationActive]);// Update volumes when state changes\nuseEffect(()=>{setVolume('metronome',metronomeVolume);},[metronomeVolume,setVolume]);useEffect(()=>{// Set volume for all voice prompts\n['ventilate','chargeMonitor','stopCompression','1','2','3','4','5'].forEach(id=>{setVolume(id,voiceVolume);});},[voiceVolume,setVolume]);// Reset all features to their initial state\nconst resetAllFeatures=useCallback(()=>{console.log(\"RESET FUNCTION CALLED\");// 1. First, stop all sounds\ntry{stopSound('metronome');stopSound('ventilate');stopSound('chargeMonitor');stopSound('stopCompression');}catch(e){console.error(\"Error stopping sounds:\",e);}// 2. Clear all intervals\nconsole.log(\"Clearing all intervals\");// Clear timer interval\nif(timerIntervalRef.current){clearInterval(timerIntervalRef.current);timerIntervalRef.current=null;}if(metronomeTimerRef.current){clearInterval(metronomeTimerRef.current);metronomeTimerRef.current=null;}// Clear pulse interval\nif(pulseIntervalRef.current){clearInterval(pulseIntervalRef.current);pulseIntervalRef.current=null;}// Clear ventilation interval\nif(ventilationIntervalRef.current){clearInterval(ventilationIntervalRef.current);ventilationIntervalRef.current=null;}// Clear epi interval\nif(epiIntervalRef.current){clearInterval(epiIntervalRef.current);epiIntervalRef.current=null;}// Clear clock interval\nif(clockIntervalRef.current){clearInterval(clockIntervalRef.current);clockIntervalRef.current=null;}// 3. Reset all state variables\nconsole.log(\"Resetting all state variables\");setActiveSection(initialState.activeSection);setSeconds(initialState.seconds);setPulseCheckTime(initialState.pulseCheckTime);setPauseTime(initialState.pauseTime);setMetronomeRunning(initialState.metronomeRunning);setVentilationActive(initialState.ventilationActive);setShowChargeMonitor(initialState.showChargeMonitor);setEpiActive(initialState.epiActive);setEpiTime(initialState.epiTime);setEpiCycles(initialState.epiCycles);setClockStarted(initialState.clockStarted);setStartTime(initialState.startTime);setCountdownAnnounced(initialState.countdownAnnounced);setConfirmReset(initialState.confirmReset);setPulseFlashing(initialState.pulseFlashing);setEpiFlashing(initialState.epiFlashing);// 4. Trigger a UI refresh\nsetRefreshTrigger(prev=>prev+1);console.log(\"Reset completed\");},[stopSound]);// Only depend on stopSound\n// Start the main clock\nconst startClock=useCallback(()=>{if(clockIntervalRef.current){clearInterval(clockIntervalRef.current);}const interval=setInterval(()=>{setSeconds(prev=>prev+1);},1000);clockIntervalRef.current=interval;setClockStarted(true);},[]);// Reset the main clock\nconst resetClock=useCallback(()=>{setSeconds(0);setConfirmReset(false);// Only start the clock if there's an active feature\nif(!clockStarted&&(activeSection||ventilationActive||epiActive)){startClock();}else if(!activeSection&&!ventilationActive&&!epiActive){// If everything is inactive, just reset without starting\nif(clockIntervalRef.current){clearInterval(clockIntervalRef.current);clockIntervalRef.current=null;}setClockStarted(false);}},[clockStarted,startClock,activeSection,ventilationActive,epiActive]);// Handle timer click to show confirmation\nconst handleTimerClick=useCallback(()=>{// If timer is already at 0, no need for confirmation\nif(seconds===0)return;// Show confirmation dialog\nsetConfirmReset(true);},[seconds]);// Cancel reset\nconst cancelReset=useCallback(()=>{setConfirmReset(false);},[]);// Start metronome - improved timing for native\nconst startMetronome=useCallback(()=>{// Clear any existing metronome timer\nif(metronomeTimerRef.current){clearInterval(metronomeTimerRef.current);metronomeTimerRef.current=null;}// Play immediately\nplaySound('metronome');// Calculate interval (110 BPM)\nconst bpm=110;const intervalMs=60000/bpm;if(isNative){// For native platforms, a simple interval is actually more reliable\n// since the native audio APIs handle timing better\nmetronomeTimerRef.current=setInterval(()=>{playSound('metronome');},intervalMs);}else{// For web, use the more precise scheduling technique\nlastMetronomeTimeRef.current=performance.now();// Drift compensation for web\nmetronomeTimerRef.current=setInterval(()=>{const now=performance.now();const elapsed=now-lastMetronomeTimeRef.current;const drift=elapsed-intervalMs;playSound('metronome');// Adjust for drift\nif(Math.abs(drift)>10){// Drift is significant, compensate on next interval\nclearInterval(metronomeTimerRef.current);metronomeTimerRef.current=setInterval(()=>{playSound('metronome');},intervalMs);}lastMetronomeTimeRef.current=now;},intervalMs);}},[playSound,isNative]);// Stop metronome\nconst stopMetronome=useCallback(()=>{if(metronomeTimerRef.current){clearInterval(metronomeTimerRef.current);metronomeTimerRef.current=null;}stopSound('metronome');},[stopSound]);// Start ventilation timer\nconst startVentilation=useCallback(()=>{if(ventilationIntervalRef.current){clearInterval(ventilationIntervalRef.current);ventilationIntervalRef.current=null;}// Play immediately on start\nplaySound('ventilate');const intervalTime=60/ventilationRate*1000;ventilationIntervalRef.current=setInterval(()=>{playSound('ventilate');},intervalTime);},[playSound,ventilationRate]);// Toggle ventilation\nconst toggleVentilation=useCallback(()=>{// Start the main timer if this is the first feature activated\nif(!clockStarted&&!activeSection&&!ventilationActive&&!epiActive){startClock();setStartTime(new Date());}setVentilationActive(prev=>{const newState=!prev;if(newState){// Starting ventilation\nstartVentilation();}else{// Stopping ventilation\nif(ventilationIntervalRef.current){clearInterval(ventilationIntervalRef.current);ventilationIntervalRef.current=null;}stopSound('ventilate');}return newState;});},[clockStarted,startClock,activeSection,ventilationActive,epiActive,startVentilation,stopSound]);// Metronome functions\nconst handleMetronomeClick=useCallback(()=>{// Start the main timer if this is the first feature activated\nif(!clockStarted&&!activeSection&&!ventilationActive&&!epiActive){startClock();setStartTime(new Date());}if(activeSection==='metronome'||activeSection==='pulse+metronome'){if(activeSection==='pulse+metronome'){setActiveSection('pulse');stopMetronome();}else{setActiveSection(null);stopMetronome();}}else{if(activeSection==='pulse'){setActiveSection('pulse+metronome');startMetronome();}else{setActiveSection('metronome');startMetronome();// Only set start time if it hasn't been set yet\nif(!startTime){setStartTime(new Date());}}}},[activeSection,clockStarted,startClock,ventilationActive,epiActive,startTime,startMetronome,stopMetronome]);// Define startPulseCountdown with reference to the ref instead of direct function\nconst startPulseCountdown=useCallback(()=>{// Clear any existing interval first\nif(pulseIntervalRef.current){clearInterval(pulseIntervalRef.current);}// Reset the counter to 0\nsetPulseCheckTime(0);pulseIntervalRef.current=setInterval(()=>{setPulseCheckTime(prevTime=>{const newTime=prevTime+1;// Show charge monitor warning at 1:45 (105 seconds)\nif(newTime===105){setShowChargeMonitor(true);playSound('chargeMonitor');setPulseFlashing(true);}// Countdown for last 5 seconds - directly matching the timer display\nif(newTime===115)playSound('5');// 1:55\nif(newTime===116)playSound('4');// 1:56\nif(newTime===117)playSound('3');// 1:57\nif(newTime===118)playSound('2');// 1:58\nif(newTime===119)playSound('1');// 1:59\n// Handle the \"stopCompression\" at exactly 2:00 (120 seconds)\nif(newTime===120){playSound('stopCompression');setPulseFlashing(false);// Clear this interval and start the pause countdown\nclearInterval(pulseIntervalRef.current);startPauseCountdownRef.current();return 120;// Keep it at 120\n}return newTime;});},1000);},[playSound]);// Reimplemented to count up instead of down\nconst startPauseCountdown=useCallback(()=>{// Reset the pause counter to 0\nsetPauseTime(0);// Start a new interval for the pause countdown\npulseIntervalRef.current=setInterval(()=>{setPauseTime(prevPauseTime=>{const newTime=prevPauseTime+1;// When pause countdown reaches 10 seconds\nif(newTime>=10){// Auto-restart the pulse check countdown\nsetPulseCheckTime(0);setShowChargeMonitor(false);setCountdownAnnounced({5:false,4:false,3:false,2:false,1:false});// Clear this interval and restart the pulse countdown\nclearInterval(pulseIntervalRef.current);startPulseCountdownRef.current();return 0;// Reset the pause time for next time\n}return newTime;});},1000);},[]);// Assign the functions to the refs after they're defined\nuseEffect(()=>{startPulseCountdownRef.current=startPulseCountdown;startPauseCountdownRef.current=startPauseCountdown;},[startPulseCountdown,startPauseCountdown]);// Handle pulse check click\nconst handlePulseCheckClick=useCallback(()=>{// Start the main timer if this is the first feature activated\nif(!clockStarted&&!activeSection&&!ventilationActive&&!epiActive){startClock();setStartTime(new Date());}if(activeSection==='pulse'||activeSection==='pulse+metronome'){if(activeSection==='pulse+metronome'){setActiveSection('metronome');}else{setActiveSection(null);}// Clear both intervals to be safe\nif(pulseIntervalRef.current){clearInterval(pulseIntervalRef.current);pulseIntervalRef.current=null;}setPulseFlashing(false);// Stop flashing\n}else{if(activeSection==='metronome'){setActiveSection('pulse+metronome');}else{setActiveSection('pulse');}// Reset all values\nsetPulseCheckTime(0);// Start at 0 for count up\nsetPauseTime(0);// Start at 0 for count up\nsetShowChargeMonitor(false);setCountdownAnnounced({5:false,4:false,3:false,2:false,1:false});// Start the main pulse check countdown using the ref\nstartPulseCountdownRef.current();}},[activeSection,clockStarted,startClock,ventilationActive,epiActive]);// Epinephrine functions - modified for count-up and cycle counting\nconst handleEpinephrineClick=useCallback(()=>{// Start the main timer if this is the first feature activated\nif(!clockStarted&&!activeSection&&!ventilationActive&&!epiActive){startClock();setStartTime(new Date());}// Toggle or reset epinephrine state\nif(epiActive){// If already active, restart the timer and increment cycle count\nsetEpiTime(0);setEpiCycles(prev=>prev+1);setEpiFlashing(false);}else{// If turning on, set initial state with cycle count of 1 (first dose)\nsetEpiTime(0);setEpiCycles(1);// Start at 1 instead of 0\nsetEpiActive(true);}},[clockStarted,startClock,activeSection,ventilationActive,epiActive]);// Add a function to turn off epinephrine completely (long press or separate button)\nconst turnOffEpinephrine=useCallback(()=>{setEpiActive(false);setEpiTime(0);setEpiCycles(0);// Reset cycles to 0 when turning off completely\nsetEpiFlashing(false);// Clear interval\nif(epiIntervalRef.current){clearInterval(epiIntervalRef.current);epiIntervalRef.current=null;}},[]);// Update metronome state based on activeSection\nuseEffect(()=>{if(activeSection==='metronome'||activeSection==='pulse+metronome'){setMetronomeRunning(true);// Start metronome if not already running\nif(!metronomeTimerRef.current){startMetronome();}}else{setMetronomeRunning(false);// Stop metronome if running\nif(metronomeTimerRef.current){stopMetronome();}}if(!activeSection&&!ventilationActive&&!epiActive&&clockStarted){if(clockIntervalRef.current){clearInterval(clockIntervalRef.current);clockIntervalRef.current=null;}setSeconds(0);setClockStarted(false);}},[activeSection,ventilationActive,epiActive,clockStarted,startMetronome,stopMetronome]);// Ventilation timer effect\nuseEffect(()=>{if(!ventilationActive){if(ventilationIntervalRef.current){clearInterval(ventilationIntervalRef.current);ventilationIntervalRef.current=null;stopSound('ventilate');}return;}// If ventilation is active but interval isn't running, start it\nif(!ventilationIntervalRef.current){startVentilation();}// If ventilation rate changes, restart the interval\nif(ventilationActive&&ventilationIntervalRef.current){clearInterval(ventilationIntervalRef.current);startVentilation();}},[ventilationActive,ventilationRate,startVentilation,stopSound]);// Epinephrine timer effect - modified for count-up\nuseEffect(()=>{if(!epiActive){if(epiIntervalRef.current){clearInterval(epiIntervalRef.current);epiIntervalRef.current=null;}setEpiFlashing(false);// Ensure flashing stops when deactivated\nreturn;}// Only start if not already running\nif(!epiIntervalRef.current){epiIntervalRef.current=setInterval(()=>{setEpiTime(prevTime=>{const newTime=prevTime+1;// Start flashing when we reach 4:45 (285 seconds)\nif(newTime===285){setEpiFlashing(true);}// Continue counting up indefinitely until button is clicked again\n// No automatic cycle increment based on time\nreturn newTime;});},1000);}return()=>{if(epiIntervalRef.current){clearInterval(epiIntervalRef.current);epiIntervalRef.current=null;}};},[epiActive]);// Format seconds to MM:SS\nconst formatTime=totalSeconds=>{const minutes=Math.floor(totalSeconds/60);const seconds=totalSeconds%60;return`${minutes.toString().padStart(2,'0')}:${seconds.toString().padStart(2,'0')}`;};// Format time as 24-hour clock HH:MM\nconst formatClock=date=>{if(!date)return\"--:--\";const hours=date.getHours().toString().padStart(2,'0');const minutes=date.getMinutes().toString().padStart(2,'0');return`${hours}:${minutes}`;};// Cleanup all intervals on unmount\nuseEffect(()=>{return()=>{[timerIntervalRef,pulseIntervalRef,ventilationIntervalRef,epiIntervalRef,clockIntervalRef,metronomeTimerRef].forEach(ref=>{if(ref&&ref.current){clearInterval(ref.current);ref.current=null;}});// Release audio resources\nreleaseResources();};},[releaseResources]);// Exposed context value\nconst contextValue={// State\nactiveSection,seconds,pulseCheckTime,pauseTime,metronomeRunning,ventilationActive,ventilationRate,showChargeMonitor,epiActive,epiTime,epiCycles,clockStarted,startTime,countdownAnnounced,confirmReset,pulseFlashing,epiFlashing,refreshTrigger,metronomeVolume,voiceVolume,isNative,isIOS,// Actions\nsetVentilationRate,handleTimerClick,resetClock,cancelReset,toggleVentilation,handleMetronomeClick,handlePulseCheckClick,handleEpinephrineClick,turnOffEpinephrine,resetAllFeatures,setMetronomeVolume,setVoiceVolume,// Utilities\nformatTime,formatClock,COLORS};return/*#__PURE__*/_jsx(AppStateContext.Provider,{value:contextValue,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","useRef","Capacitor","App","useNativeAudio","jsx","_jsx","COLORS","background","logoRed","logoYellow","pulseBlue","ventGreen","white","darkText","timerBg","sliderBg","AppStateContext","getAudioPath","isNativePlatform","initialState","activeSection","seconds","pulseCheckTime","pauseTime","metronomeRunning","ventilationActive","ventilationRate","showChargeMonitor","epiActive","epiTime","epiCycles","clockStarted","startTime","countdownAnnounced","confirmReset","pulseFlashing","epiFlashing","metronomeVolume","voiceVolume","AppStateProvider","_ref","children","setActiveSection","setSeconds","setPulseCheckTime","setPauseTime","setMetronomeRunning","setVentilationActive","setVentilationRate","setShowChargeMonitor","setEpiActive","setEpiTime","setEpiCycles","setClockStarted","setStartTime","setCountdownAnnounced","setConfirmReset","setPulseFlashing","setEpiFlashing","setMetronomeVolume","setVoiceVolume","refreshTrigger","setRefreshTrigger","timerIntervalRef","pulseIntervalRef","ventilationIntervalRef","epiIntervalRef","clockIntervalRef","metronomeTimerRef","lastMetronomeTimeRef","startPulseCountdownRef","startPauseCountdownRef","isNative","isIOS","getPlatform","AUDIO_PATH","initAudio","playSound","stopSound","setVolume","unlockAudio","releaseResources","audioPoolSize","document","addEventListener","once","appStateListener","addListener","_ref2","isActive","console","log","startMetronome","startVentilation","current","clearInterval","remove","removeEventListener","forEach","id","resetAllFeatures","e","error","prev","startClock","interval","setInterval","resetClock","handleTimerClick","cancelReset","bpm","intervalMs","performance","now","elapsed","drift","Math","abs","stopMetronome","intervalTime","toggleVentilation","Date","newState","handleMetronomeClick","startPulseCountdown","prevTime","newTime","startPauseCountdown","prevPauseTime","handlePulseCheckClick","handleEpinephrineClick","turnOffEpinephrine","formatTime","totalSeconds","minutes","floor","toString","padStart","formatClock","date","hours","getHours","getMinutes","ref","contextValue","Provider","value"],"sources":["/Users/davidhelmers/arrestpro/src/context/AppStateContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback, useRef } from 'react';\nimport { Capacitor } from '@capacitor/core';\nimport { App } from '@capacitor/app';\nimport useNativeAudio from '../hooks/useNativeAudio';\n\n// App constants\nexport const COLORS = {\n  background: '#1e2126',     // Dark background\n  logoRed: '#ff4136',        // Red from logo\n  logoYellow: '#f4eb00ff',   // Yellow from logo\n  pulseBlue: '#3498db',      // Blue for pulse check\n  ventGreen: '#2ecc40',      // Green for ventilation\n  white: '#ffffff',          // White text\n  darkText: '#1a1a1a',       // Dark text for yellow buttons\n  timerBg: '#2c3e50',        // Timer background\n  sliderBg: '#ecf0f1',       // Slider background\n};\n\n// Create the context\nconst AppStateContext = createContext();\n\n// Get the correct audio path based on platform\nconst getAudioPath = () => {\n  if (Capacitor.isNativePlatform()) {\n    // For native platforms, use relative paths to the assets directory\n    return ''; // The path will be handled by Capacitor's asset system\n  } else {\n    // For web, use the public folder path\n    return '/audio/';\n  }\n};\n\n// Initial state - used for reset\nconst initialState = {\n  activeSection: null,\n  seconds: 0,\n  pulseCheckTime: 0,\n  pauseTime: 0,\n  metronomeRunning: false,\n  ventilationActive: false,\n  ventilationRate: 11,\n  showChargeMonitor: false,\n  epiActive: false,\n  epiTime: 0,\n  epiCycles: 0,\n  clockStarted: false,\n  startTime: null,\n  countdownAnnounced: {5: false, 4: false, 3: false, 2: false, 1: false},\n  confirmReset: false,\n  pulseFlashing: false,\n  epiFlashing: false,\n  metronomeVolume: 0.5,\n  voiceVolume: 1.0\n};\n\nexport const AppStateProvider = ({ children }) => {\n  // State variables\n  const [activeSection, setActiveSection] = useState(initialState.activeSection);\n  const [seconds, setSeconds] = useState(initialState.seconds);\n  const [pulseCheckTime, setPulseCheckTime] = useState(initialState.pulseCheckTime);\n  const [pauseTime, setPauseTime] = useState(initialState.pauseTime);\n  const [metronomeRunning, setMetronomeRunning] = useState(initialState.metronomeRunning);\n  const [ventilationActive, setVentilationActive] = useState(initialState.ventilationActive);\n  const [ventilationRate, setVentilationRate] = useState(initialState.ventilationRate);\n  const [showChargeMonitor, setShowChargeMonitor] = useState(initialState.showChargeMonitor);\n  const [epiActive, setEpiActive] = useState(initialState.epiActive);\n  const [epiTime, setEpiTime] = useState(initialState.epiTime);\n  const [epiCycles, setEpiCycles] = useState(initialState.epiCycles);\n  const [clockStarted, setClockStarted] = useState(initialState.clockStarted);\n  const [startTime, setStartTime] = useState(initialState.startTime);\n  const [countdownAnnounced, setCountdownAnnounced] = useState(initialState.countdownAnnounced);\n  const [confirmReset, setConfirmReset] = useState(initialState.confirmReset);\n  const [pulseFlashing, setPulseFlashing] = useState(initialState.pulseFlashing);\n  const [epiFlashing, setEpiFlashing] = useState(initialState.epiFlashing);\n  const [metronomeVolume, setMetronomeVolume] = useState(initialState.metronomeVolume);\n  const [voiceVolume, setVoiceVolume] = useState(initialState.voiceVolume);\n  \n  // Force UI refresh - Add this new state\n  const [refreshTrigger, setRefreshTrigger] = useState(0);\n\n  // Refs for safer interval handling\n  const timerIntervalRef = useRef(null);\n  const pulseIntervalRef = useRef(null);\n  const ventilationIntervalRef = useRef(null);\n  const epiIntervalRef = useRef(null);\n  const clockIntervalRef = useRef(null);\n  const metronomeTimerRef = useRef(null);\n  const lastMetronomeTimeRef = useRef(0);\n\n  // Refs for circular function dependencies\n  const startPulseCountdownRef = useRef(null);\n  const startPauseCountdownRef = useRef(null);\n\n  // Platform detection\n  const isNative = Capacitor.isNativePlatform();\n  const isIOS = Capacitor.getPlatform() === 'ios';\n\n  // Audio path based on platform\n  const AUDIO_PATH = getAudioPath();\n\n  // Audio hooks - use the new native audio hook\n  const { initAudio, playSound, stopSound, setVolume, unlockAudio, releaseResources } = useNativeAudio();\n\n  // Initialize all audio files\n  useEffect(() => {\n    const audioPoolSize = isNative ? 1 : 5; // Native audio doesn't need pooling\n    \n    // Initialize audio pools for all sounds we'll use\n    initAudio('metronome', `${AUDIO_PATH}click.mp3`, audioPoolSize);\n    initAudio('ventilate', `${AUDIO_PATH}ventilate.mp3`, 3);\n    initAudio('chargeMonitor', `${AUDIO_PATH}charge_monitor.mp3`);\n    initAudio('stopCompression', `${AUDIO_PATH}stop_compression.mp3`);\n    initAudio('1', `${AUDIO_PATH}numbers/1.mp3`);\n    initAudio('2', `${AUDIO_PATH}numbers/2.mp3`);\n    initAudio('3', `${AUDIO_PATH}numbers/3.mp3`);\n    initAudio('4', `${AUDIO_PATH}numbers/4.mp3`);\n    initAudio('5', `${AUDIO_PATH}numbers/5.mp3`);\n    \n    // Set initial volumes\n    setVolume('metronome', metronomeVolume);\n    \n    // For native platforms, no need for manual unlocking\n    if (!isNative) {\n      // Unlock audio for web on first user interaction\n      document.addEventListener('click', unlockAudio, { once: true });\n    } else {\n      // For native platforms, set up app state listeners\n      const appStateListener = App.addListener('appStateChange', ({ isActive }) => {\n        console.log(`App state changed: ${isActive ? 'active' : 'inactive'}`);\n        \n        if (isActive) {\n          // App came to foreground, resume audio if needed\n          if (metronomeRunning) {\n            // Restart metronome if it was running\n            startMetronome();\n          }\n          \n          if (ventilationActive) {\n            // Restart ventilation if it was active\n            startVentilation();\n          }\n        } else {\n          // App went to background, pause audio to be nice\n          // But keep track of what was active\n          if (timerIntervalRef.current) {\n            clearInterval(timerIntervalRef.current);\n            timerIntervalRef.current = null;\n          }\n          \n          if (ventilationIntervalRef.current) {\n            clearInterval(ventilationIntervalRef.current);\n            ventilationIntervalRef.current = null;\n          }\n        }\n      });\n      \n      return () => {\n        appStateListener.remove();\n      };\n    }\n    \n    return () => {\n      if (!isNative) {\n        document.removeEventListener('click', unlockAudio);\n      }\n    };\n  }, [initAudio, unlockAudio, isNative, isIOS, metronomeVolume, metronomeRunning, ventilationActive]);\n\n  // Update volumes when state changes\n  useEffect(() => {\n    setVolume('metronome', metronomeVolume);\n  }, [metronomeVolume, setVolume]);\n  \n  useEffect(() => {\n    // Set volume for all voice prompts\n    ['ventilate', 'chargeMonitor', 'stopCompression', '1', '2', '3', '4', '5'].forEach(id => {\n      setVolume(id, voiceVolume);\n    });\n  }, [voiceVolume, setVolume]);\n\n  // Reset all features to their initial state\n  const resetAllFeatures = useCallback(() => {\n    console.log(\"RESET FUNCTION CALLED\");\n    \n    // 1. First, stop all sounds\n    try {\n      stopSound('metronome');\n      stopSound('ventilate');\n      stopSound('chargeMonitor');\n      stopSound('stopCompression');\n    } catch (e) {\n      console.error(\"Error stopping sounds:\", e);\n    }\n    \n    // 2. Clear all intervals\n    console.log(\"Clearing all intervals\");\n    \n    // Clear timer interval\n    if (timerIntervalRef.current) {\n      clearInterval(timerIntervalRef.current);\n      timerIntervalRef.current = null;\n    }\n    \n    if (metronomeTimerRef.current) {\n      clearInterval(metronomeTimerRef.current);\n      metronomeTimerRef.current = null;\n    }\n    \n    // Clear pulse interval\n    if (pulseIntervalRef.current) {\n      clearInterval(pulseIntervalRef.current);\n      pulseIntervalRef.current = null;\n    }\n    \n    // Clear ventilation interval\n    if (ventilationIntervalRef.current) {\n      clearInterval(ventilationIntervalRef.current);\n      ventilationIntervalRef.current = null;\n    }\n    \n    // Clear epi interval\n    if (epiIntervalRef.current) {\n      clearInterval(epiIntervalRef.current);\n      epiIntervalRef.current = null;\n    }\n    \n    // Clear clock interval\n    if (clockIntervalRef.current) {\n      clearInterval(clockIntervalRef.current);\n      clockIntervalRef.current = null;\n    }\n    \n    // 3. Reset all state variables\n    console.log(\"Resetting all state variables\");\n    \n    setActiveSection(initialState.activeSection);\n    setSeconds(initialState.seconds);\n    setPulseCheckTime(initialState.pulseCheckTime);\n    setPauseTime(initialState.pauseTime);\n    setMetronomeRunning(initialState.metronomeRunning);\n    setVentilationActive(initialState.ventilationActive);\n    setShowChargeMonitor(initialState.showChargeMonitor);\n    setEpiActive(initialState.epiActive);\n    setEpiTime(initialState.epiTime);\n    setEpiCycles(initialState.epiCycles);\n    setClockStarted(initialState.clockStarted);\n    setStartTime(initialState.startTime);\n    setCountdownAnnounced(initialState.countdownAnnounced);\n    setConfirmReset(initialState.confirmReset);\n    setPulseFlashing(initialState.pulseFlashing);\n    setEpiFlashing(initialState.epiFlashing);\n    \n    // 4. Trigger a UI refresh\n    setRefreshTrigger(prev => prev + 1);\n    \n    console.log(\"Reset completed\");\n  }, [stopSound]); // Only depend on stopSound\n\n  // Start the main clock\n  const startClock = useCallback(() => {\n    if (clockIntervalRef.current) {\n      clearInterval(clockIntervalRef.current);\n    }\n    \n    const interval = setInterval(() => {\n      setSeconds(prev => prev + 1);\n    }, 1000);\n    \n    clockIntervalRef.current = interval;\n    setClockStarted(true);\n  }, []);\n  \n  // Reset the main clock\n  const resetClock = useCallback(() => {\n    setSeconds(0);\n    setConfirmReset(false);\n    \n    // Only start the clock if there's an active feature\n    if (!clockStarted && (activeSection || ventilationActive || epiActive)) {\n      startClock();\n    } else if (!activeSection && !ventilationActive && !epiActive) {\n      // If everything is inactive, just reset without starting\n      if (clockIntervalRef.current) {\n        clearInterval(clockIntervalRef.current);\n        clockIntervalRef.current = null;\n      }\n      setClockStarted(false);\n    }\n  }, [clockStarted, startClock, activeSection, ventilationActive, epiActive]);\n  \n  // Handle timer click to show confirmation\n  const handleTimerClick = useCallback(() => {\n    // If timer is already at 0, no need for confirmation\n    if (seconds === 0) return;\n    \n    // Show confirmation dialog\n    setConfirmReset(true);\n  }, [seconds]);\n  \n  // Cancel reset\n  const cancelReset = useCallback(() => {\n    setConfirmReset(false);\n  }, []);\n\n  // Start metronome - improved timing for native\n  const startMetronome = useCallback(() => {\n    // Clear any existing metronome timer\n    if (metronomeTimerRef.current) {\n      clearInterval(metronomeTimerRef.current);\n      metronomeTimerRef.current = null;\n    }\n    \n    // Play immediately\n    playSound('metronome');\n    \n    // Calculate interval (110 BPM)\n    const bpm = 110;\n    const intervalMs = 60000 / bpm;\n    \n    if (isNative) {\n      // For native platforms, a simple interval is actually more reliable\n      // since the native audio APIs handle timing better\n      metronomeTimerRef.current = setInterval(() => {\n        playSound('metronome');\n      }, intervalMs);\n    } else {\n      // For web, use the more precise scheduling technique\n      lastMetronomeTimeRef.current = performance.now();\n      \n      // Drift compensation for web\n      metronomeTimerRef.current = setInterval(() => {\n        const now = performance.now();\n        const elapsed = now - lastMetronomeTimeRef.current;\n        const drift = elapsed - intervalMs;\n        \n        playSound('metronome');\n        \n        // Adjust for drift\n        if (Math.abs(drift) > 10) {\n          // Drift is significant, compensate on next interval\n          clearInterval(metronomeTimerRef.current);\n          \n          metronomeTimerRef.current = setInterval(() => {\n            playSound('metronome');\n          }, intervalMs);\n        }\n        \n        lastMetronomeTimeRef.current = now;\n      }, intervalMs);\n    }\n  }, [playSound, isNative]);\n  \n  // Stop metronome\n  const stopMetronome = useCallback(() => {\n    if (metronomeTimerRef.current) {\n      clearInterval(metronomeTimerRef.current);\n      metronomeTimerRef.current = null;\n    }\n    \n    stopSound('metronome');\n  }, [stopSound]);\n\n  // Start ventilation timer\n  const startVentilation = useCallback(() => {\n    if (ventilationIntervalRef.current) {\n      clearInterval(ventilationIntervalRef.current);\n      ventilationIntervalRef.current = null;\n    }\n    \n    // Play immediately on start\n    playSound('ventilate');\n    \n    const intervalTime = (60 / ventilationRate) * 1000;\n    \n    ventilationIntervalRef.current = setInterval(() => {\n      playSound('ventilate');\n    }, intervalTime);\n  }, [playSound, ventilationRate]);\n\n  // Toggle ventilation\n  const toggleVentilation = useCallback(() => {\n    // Start the main timer if this is the first feature activated\n    if (!clockStarted && !activeSection && !ventilationActive && !epiActive) {\n      startClock();\n      setStartTime(new Date());\n    }\n    \n    setVentilationActive(prev => {\n      const newState = !prev;\n      \n      if (newState) {\n        // Starting ventilation\n        startVentilation();\n      } else {\n        // Stopping ventilation\n        if (ventilationIntervalRef.current) {\n          clearInterval(ventilationIntervalRef.current);\n          ventilationIntervalRef.current = null;\n        }\n        stopSound('ventilate');\n      }\n      \n      return newState;\n    });\n  }, [clockStarted, startClock, activeSection, ventilationActive, epiActive, startVentilation, stopSound]);\n\n  // Metronome functions\n  const handleMetronomeClick = useCallback(() => {\n    // Start the main timer if this is the first feature activated\n    if (!clockStarted && !activeSection && !ventilationActive && !epiActive) {\n      startClock();\n      setStartTime(new Date());\n    }\n    \n    if (activeSection === 'metronome' || activeSection === 'pulse+metronome') {\n      if (activeSection === 'pulse+metronome') {\n        setActiveSection('pulse');\n        stopMetronome();\n      } else {\n        setActiveSection(null);\n        stopMetronome();\n      }\n    } else {\n      if (activeSection === 'pulse') {\n        setActiveSection('pulse+metronome');\n        startMetronome();\n      } else {\n        setActiveSection('metronome');\n        startMetronome();\n        // Only set start time if it hasn't been set yet\n        if (!startTime) {\n          setStartTime(new Date());\n        }\n      }\n    }\n  }, [activeSection, clockStarted, startClock, ventilationActive, epiActive, startTime, startMetronome, stopMetronome]);\n\n  // Define startPulseCountdown with reference to the ref instead of direct function\n  const startPulseCountdown = useCallback(() => {\n    // Clear any existing interval first\n    if (pulseIntervalRef.current) {\n      clearInterval(pulseIntervalRef.current);\n    }\n    \n    // Reset the counter to 0\n    setPulseCheckTime(0);\n    \n    pulseIntervalRef.current = setInterval(() => {\n      setPulseCheckTime(prevTime => {\n        const newTime = prevTime + 1;\n        \n        // Show charge monitor warning at 1:45 (105 seconds)\n        if (newTime === 105) {\n          setShowChargeMonitor(true);\n          playSound('chargeMonitor');\n          setPulseFlashing(true);\n        }\n\n        // Countdown for last 5 seconds - directly matching the timer display\n        if (newTime === 115) playSound('5'); // 1:55\n        if (newTime === 116) playSound('4'); // 1:56\n        if (newTime === 117) playSound('3'); // 1:57\n        if (newTime === 118) playSound('2'); // 1:58\n        if (newTime === 119) playSound('1'); // 1:59\n        \n        // Handle the \"stopCompression\" at exactly 2:00 (120 seconds)\n        if (newTime === 120) {\n          playSound('stopCompression');\n          setPulseFlashing(false);\n          \n          // Clear this interval and start the pause countdown\n          clearInterval(pulseIntervalRef.current);\n          startPauseCountdownRef.current();\n          \n          return 120; // Keep it at 120\n        }\n        \n        return newTime;\n      });\n    }, 1000);\n  }, [playSound]);\n\n  // Reimplemented to count up instead of down\n  const startPauseCountdown = useCallback(() => {\n    // Reset the pause counter to 0\n    setPauseTime(0);\n    \n    // Start a new interval for the pause countdown\n    pulseIntervalRef.current = setInterval(() => {\n      setPauseTime(prevPauseTime => {\n        const newTime = prevPauseTime + 1;\n        \n        // When pause countdown reaches 10 seconds\n        if (newTime >= 10) {\n          // Auto-restart the pulse check countdown\n          setPulseCheckTime(0);\n          setShowChargeMonitor(false);\n          setCountdownAnnounced({ 5: false, 4: false, 3: false, 2: false, 1: false });\n          \n          // Clear this interval and restart the pulse countdown\n          clearInterval(pulseIntervalRef.current);\n          startPulseCountdownRef.current();\n          \n          return 0; // Reset the pause time for next time\n        }\n        \n        return newTime;\n      });\n    }, 1000);\n  }, []);\n\n  // Assign the functions to the refs after they're defined\n  useEffect(() => {\n    startPulseCountdownRef.current = startPulseCountdown;\n    startPauseCountdownRef.current = startPauseCountdown;\n  }, [startPulseCountdown, startPauseCountdown]);\n\n  // Handle pulse check click\n  const handlePulseCheckClick = useCallback(() => {\n    // Start the main timer if this is the first feature activated\n    if (!clockStarted && !activeSection && !ventilationActive && !epiActive) {\n      startClock();\n      setStartTime(new Date());\n    }\n    \n    if (activeSection === 'pulse' || activeSection === 'pulse+metronome') {\n      if (activeSection === 'pulse+metronome') {\n        setActiveSection('metronome');\n      } else {\n        setActiveSection(null);\n      }\n      \n      // Clear both intervals to be safe\n      if (pulseIntervalRef.current) {\n        clearInterval(pulseIntervalRef.current);\n        pulseIntervalRef.current = null;\n      }\n      \n      setPulseFlashing(false); // Stop flashing\n    } else {\n      if (activeSection === 'metronome') {\n        setActiveSection('pulse+metronome');\n      } else {\n        setActiveSection('pulse');\n      }\n      \n      // Reset all values\n      setPulseCheckTime(0);    // Start at 0 for count up\n      setPauseTime(0);         // Start at 0 for count up\n      setShowChargeMonitor(false);\n      setCountdownAnnounced({5: false, 4: false, 3: false, 2: false, 1: false});\n      \n      // Start the main pulse check countdown using the ref\n      startPulseCountdownRef.current();\n    }\n  }, [activeSection, clockStarted, startClock, ventilationActive, epiActive]);\n\n  // Epinephrine functions - modified for count-up and cycle counting\n  const handleEpinephrineClick = useCallback(() => {\n    // Start the main timer if this is the first feature activated\n    if (!clockStarted && !activeSection && !ventilationActive && !epiActive) {\n      startClock();\n      setStartTime(new Date());\n    }\n    \n    // Toggle or reset epinephrine state\n    if (epiActive) {\n      // If already active, restart the timer and increment cycle count\n      setEpiTime(0);\n      setEpiCycles(prev => prev + 1);\n      setEpiFlashing(false);\n    } else {\n      // If turning on, set initial state with cycle count of 1 (first dose)\n      setEpiTime(0);\n      setEpiCycles(1); // Start at 1 instead of 0\n      setEpiActive(true);\n    }\n  }, [clockStarted, startClock, activeSection, ventilationActive, epiActive]);\n\n  // Add a function to turn off epinephrine completely (long press or separate button)\n  const turnOffEpinephrine = useCallback(() => {\n    setEpiActive(false);\n    setEpiTime(0);\n    setEpiCycles(0); // Reset cycles to 0 when turning off completely\n    setEpiFlashing(false);\n    \n    // Clear interval\n    if (epiIntervalRef.current) {\n      clearInterval(epiIntervalRef.current);\n      epiIntervalRef.current = null;\n    }\n  }, []);\n\n  // Update metronome state based on activeSection\n  useEffect(() => {\n    if (activeSection === 'metronome' || activeSection === 'pulse+metronome') {\n      setMetronomeRunning(true);\n      // Start metronome if not already running\n      if (!metronomeTimerRef.current) {\n        startMetronome();\n      }\n    } else {\n      setMetronomeRunning(false);\n      // Stop metronome if running\n      if (metronomeTimerRef.current) {\n        stopMetronome();\n      }\n    }\n    \n    if (!activeSection && !ventilationActive && !epiActive && clockStarted) {\n      if (clockIntervalRef.current) {\n        clearInterval(clockIntervalRef.current);\n        clockIntervalRef.current = null;\n      }\n      setSeconds(0);\n      setClockStarted(false);\n    }\n  }, [activeSection, ventilationActive, epiActive, clockStarted, startMetronome, stopMetronome]);\n\n  // Ventilation timer effect\n  useEffect(() => {\n    if (!ventilationActive) {\n      if (ventilationIntervalRef.current) {\n        clearInterval(ventilationIntervalRef.current);\n        ventilationIntervalRef.current = null;\n        stopSound('ventilate');\n      }\n      return;\n    }\n    \n    // If ventilation is active but interval isn't running, start it\n    if (!ventilationIntervalRef.current) {\n      startVentilation();\n    }\n    \n    // If ventilation rate changes, restart the interval\n    if (ventilationActive && ventilationIntervalRef.current) {\n      clearInterval(ventilationIntervalRef.current);\n      startVentilation();\n    }\n    \n  }, [ventilationActive, ventilationRate, startVentilation, stopSound]);\n\n  // Epinephrine timer effect - modified for count-up\n  useEffect(() => {\n    if (!epiActive) {\n      if (epiIntervalRef.current) {\n        clearInterval(epiIntervalRef.current);\n        epiIntervalRef.current = null;\n      }\n      setEpiFlashing(false); // Ensure flashing stops when deactivated\n      return;\n    }\n    \n    // Only start if not already running\n    if (!epiIntervalRef.current) {\n      epiIntervalRef.current = setInterval(() => {\n        setEpiTime(prevTime => {\n          const newTime = prevTime + 1;\n          \n          // Start flashing when we reach 4:45 (285 seconds)\n          if (newTime === 285) {\n            setEpiFlashing(true);\n          }\n          \n          // Continue counting up indefinitely until button is clicked again\n          // No automatic cycle increment based on time\n          return newTime;\n        });\n      }, 1000);\n    }\n    \n    return () => {\n      if (epiIntervalRef.current) {\n        clearInterval(epiIntervalRef.current);\n        epiIntervalRef.current = null;\n      }\n    };\n  }, [epiActive]); \n\n  // Format seconds to MM:SS\n  const formatTime = (totalSeconds) => {\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  };\n  \n  // Format time as 24-hour clock HH:MM\n  const formatClock = (date) => {\n    if (!date) return \"--:--\";\n    const hours = date.getHours().toString().padStart(2, '0');\n    const minutes = date.getMinutes().toString().padStart(2, '0');\n    return `${hours}:${minutes}`;\n  };\n\n  // Cleanup all intervals on unmount\n  useEffect(() => {\n    return () => {\n      [timerIntervalRef, pulseIntervalRef, ventilationIntervalRef, epiIntervalRef, clockIntervalRef, metronomeTimerRef].forEach(ref => {\n        if (ref && ref.current) {\n          clearInterval(ref.current);\n          ref.current = null;\n        }\n      });\n      \n      // Release audio resources\n      releaseResources();\n    };\n  }, [releaseResources]);\n\n  // Exposed context value\n  const contextValue = {\n    // State\n    activeSection,\n    seconds,\n    pulseCheckTime,\n    pauseTime,\n    metronomeRunning, \n    ventilationActive,\n    ventilationRate,\n    showChargeMonitor,\n    epiActive,\n    epiTime,\n    epiCycles,\n    clockStarted,\n    startTime,\n    countdownAnnounced,\n    confirmReset,\n    pulseFlashing,\n    epiFlashing,\n    refreshTrigger,\n    metronomeVolume,\n    voiceVolume,\n    isNative,\n    isIOS,\n    \n    // Actions\n    setVentilationRate,\n    handleTimerClick,\n    resetClock,\n    cancelReset,\n    toggleVentilation,\n    handleMetronomeClick,\n    handlePulseCheckClick,\n    handleEpinephrineClick,\n    turnOffEpinephrine,\n    resetAllFeatures,\n    setMetronomeVolume,\n    setVoiceVolume,\n    \n    // Utilities\n    formatTime,\n    formatClock,\n    COLORS\n  };\n\n  return (\n    <AppStateContext.Provider value={contextValue}>\n      {children}\n    </AppStateContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}