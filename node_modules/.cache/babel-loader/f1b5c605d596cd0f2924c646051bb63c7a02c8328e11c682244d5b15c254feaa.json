{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useRef, useCallback, useEffect } from 'react';\n\n// The AudioPool helps manage multiple audio instances for concurrent playback\nclass AudioPool {\n  constructor(src, poolSize = 3, volume = 1.0) {\n    this.src = src;\n    this.poolSize = poolSize;\n    this.audioElements = [];\n    this.currentIndex = 0;\n    this.volume = volume;\n\n    // Create the audio pool\n    for (let i = 0; i < poolSize; i++) {\n      const audio = new Audio(src);\n      audio.preload = 'auto';\n      audio.volume = this.volume; // Set initial volume\n      this.audioElements.push(audio);\n    }\n  }\n  play() {\n    // Get the next audio element in the pool\n    const audio = this.audioElements[this.currentIndex];\n\n    // Reset the audio if it's already playing or has played\n    if (!audio.paused) {\n      audio.pause();\n      audio.currentTime = 0;\n    }\n\n    // Ensure volume is correct (in case it was changed)\n    audio.volume = this.volume;\n\n    // Play the audio and handle any errors for iOS\n    const playPromise = audio.play();\n    if (playPromise !== undefined) {\n      playPromise.catch(error => {\n        // Auto-play prevented (iOS often requires user interaction first)\n        console.warn('Audio play prevented:', error);\n      });\n    }\n\n    // Move to the next audio element for the next call\n    this.currentIndex = (this.currentIndex + 1) % this.poolSize;\n    return audio;\n  }\n  stop() {\n    this.audioElements.forEach(audio => {\n      audio.pause();\n      audio.currentTime = 0;\n    });\n  }\n\n  // Add method to set volume for all audio elements in the pool\n  setVolume(volume) {\n    this.volume = Math.max(0, Math.min(1, volume)); // Clamp between 0 and 1\n    this.audioElements.forEach(audio => {\n      audio.volume = this.volume;\n    });\n  }\n}\nconst useAudio = () => {\n  _s();\n  // Reference to hold our audio pools\n  const audioPoolsRef = useRef({});\n\n  // Default volumes for each sound - ADJUST THESE VALUES as needed\n  const defaultVolumes = {\n    metronome: 0.5,\n    // Reduce the volume of the click (previously too loud)\n    ventilate: 1.0,\n    // Keep ventilate sound at full volume\n    chargeMonitor: 1.0,\n    // Keep charge monitor sound at full volume\n    stopCompression: 1.0,\n    // Keep stop compression sound at full volume\n    // Number sounds\n    '1': 1.0,\n    '2': 1.0,\n    '3': 1.0,\n    '4': 1.0,\n    '5': 1.0\n  };\n\n  // Initialize an audio pool for a specific sound\n  const initAudio = useCallback((id, src, poolSize = 3) => {\n    if (!audioPoolsRef.current[id]) {\n      // Use default volume if specified, otherwise use 1.0\n      const volume = defaultVolumes[id] || 1.0;\n      audioPoolsRef.current[id] = new AudioPool(src, poolSize, volume);\n    }\n  }, []);\n\n  // Play a sound by its ID\n  const playSound = useCallback(id => {\n    const pool = audioPoolsRef.current[id];\n    if (pool) {\n      return pool.play();\n    } else {\n      console.error(`Audio pool with ID \"${id}\" not found`);\n      return null;\n    }\n  }, []);\n\n  // Stop all instances of a sound\n  const stopSound = useCallback(id => {\n    const pool = audioPoolsRef.current[id];\n    if (pool) {\n      pool.stop();\n    }\n  }, []);\n\n  // Add method to set volume for a specific sound\n  const setVolume = useCallback((id, volume) => {\n    const pool = audioPoolsRef.current[id];\n    if (pool) {\n      pool.setVolume(volume);\n    } else {\n      console.error(`Cannot set volume: Audio pool with ID \"${id}\" not found`);\n    }\n  }, []);\n\n  // Clean up all audio elements on unmount\n  useEffect(() => {\n    return () => {\n      Object.values(audioPoolsRef.current).forEach(pool => {\n        pool.stop();\n      });\n    };\n  }, []);\n\n  // iOS requires user interaction to play sounds\n  // This function can be called in response to any user interaction\n  // to initialize audio playback capability\n  const unlockAudio = useCallback(() => {\n    // Create and play a silent audio element\n    const audio = new Audio();\n    audio.play().catch(() => {\n      // Silent catch - this is expected on first call before user interaction\n    });\n  }, []);\n  return {\n    initAudio,\n    playSound,\n    stopSound,\n    setVolume,\n    // Added new setVolume function\n    unlockAudio\n  };\n};\n_s(useAudio, \"AUgdPS6vlMOOUTw+IOGRDNJMZls=\");\nexport default useAudio;","map":{"version":3,"names":["useRef","useCallback","useEffect","AudioPool","constructor","src","poolSize","volume","audioElements","currentIndex","i","audio","Audio","preload","push","play","paused","pause","currentTime","playPromise","undefined","catch","error","console","warn","stop","forEach","setVolume","Math","max","min","useAudio","_s","audioPoolsRef","defaultVolumes","metronome","ventilate","chargeMonitor","stopCompression","initAudio","id","current","playSound","pool","stopSound","Object","values","unlockAudio"],"sources":["/Users/davidhelmers/arrestpro/src/hooks/useAudio.js"],"sourcesContent":["import { useRef, useCallback, useEffect } from 'react';\n\n// The AudioPool helps manage multiple audio instances for concurrent playback\nclass AudioPool {\n  constructor(src, poolSize = 3, volume = 1.0) {\n    this.src = src;\n    this.poolSize = poolSize;\n    this.audioElements = [];\n    this.currentIndex = 0;\n    this.volume = volume;\n    \n    // Create the audio pool\n    for (let i = 0; i < poolSize; i++) {\n      const audio = new Audio(src);\n      audio.preload = 'auto';\n      audio.volume = this.volume; // Set initial volume\n      this.audioElements.push(audio);\n    }\n  }\n  \n  play() {\n    // Get the next audio element in the pool\n    const audio = this.audioElements[this.currentIndex];\n    \n    // Reset the audio if it's already playing or has played\n    if (!audio.paused) {\n      audio.pause();\n      audio.currentTime = 0;\n    }\n    \n    // Ensure volume is correct (in case it was changed)\n    audio.volume = this.volume;\n    \n    // Play the audio and handle any errors for iOS\n    const playPromise = audio.play();\n    if (playPromise !== undefined) {\n      playPromise.catch(error => {\n        // Auto-play prevented (iOS often requires user interaction first)\n        console.warn('Audio play prevented:', error);\n      });\n    }\n    \n    // Move to the next audio element for the next call\n    this.currentIndex = (this.currentIndex + 1) % this.poolSize;\n    \n    return audio;\n  }\n  \n  stop() {\n    this.audioElements.forEach(audio => {\n      audio.pause();\n      audio.currentTime = 0;\n    });\n  }\n  \n  // Add method to set volume for all audio elements in the pool\n  setVolume(volume) {\n    this.volume = Math.max(0, Math.min(1, volume)); // Clamp between 0 and 1\n    this.audioElements.forEach(audio => {\n      audio.volume = this.volume;\n    });\n  }\n}\n\nconst useAudio = () => {\n  // Reference to hold our audio pools\n  const audioPoolsRef = useRef({});\n  \n  // Default volumes for each sound - ADJUST THESE VALUES as needed\n  const defaultVolumes = {\n    metronome: 0.5,     // Reduce the volume of the click (previously too loud)\n    ventilate: 1.0,     // Keep ventilate sound at full volume\n    chargeMonitor: 1.0, // Keep charge monitor sound at full volume\n    stopCompression: 1.0, // Keep stop compression sound at full volume\n    // Number sounds\n    '1': 1.0,\n    '2': 1.0,\n    '3': 1.0,\n    '4': 1.0,\n    '5': 1.0\n  };\n  \n  // Initialize an audio pool for a specific sound\n  const initAudio = useCallback((id, src, poolSize = 3) => {\n    if (!audioPoolsRef.current[id]) {\n      // Use default volume if specified, otherwise use 1.0\n      const volume = defaultVolumes[id] || 1.0;\n      audioPoolsRef.current[id] = new AudioPool(src, poolSize, volume);\n    }\n  }, []);\n  \n  // Play a sound by its ID\n  const playSound = useCallback((id) => {\n    const pool = audioPoolsRef.current[id];\n    if (pool) {\n      return pool.play();\n    } else {\n      console.error(`Audio pool with ID \"${id}\" not found`);\n      return null;\n    }\n  }, []);\n  \n  // Stop all instances of a sound\n  const stopSound = useCallback((id) => {\n    const pool = audioPoolsRef.current[id];\n    if (pool) {\n      pool.stop();\n    }\n  }, []);\n  \n  // Add method to set volume for a specific sound\n  const setVolume = useCallback((id, volume) => {\n    const pool = audioPoolsRef.current[id];\n    if (pool) {\n      pool.setVolume(volume);\n    } else {\n      console.error(`Cannot set volume: Audio pool with ID \"${id}\" not found`);\n    }\n  }, []);\n  \n  // Clean up all audio elements on unmount\n  useEffect(() => {\n    return () => {\n      Object.values(audioPoolsRef.current).forEach(pool => {\n        pool.stop();\n      });\n    };\n  }, []);\n  \n  // iOS requires user interaction to play sounds\n  // This function can be called in response to any user interaction\n  // to initialize audio playback capability\n  const unlockAudio = useCallback(() => {\n    // Create and play a silent audio element\n    const audio = new Audio();\n    audio.play().catch(() => {\n      // Silent catch - this is expected on first call before user interaction\n    });\n  }, []);\n  \n  return {\n    initAudio,\n    playSound,\n    stopSound,\n    setVolume,  // Added new setVolume function\n    unlockAudio\n  };\n};\n\nexport default useAudio;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}