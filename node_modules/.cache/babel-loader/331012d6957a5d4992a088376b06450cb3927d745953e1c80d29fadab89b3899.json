{"ast":null,"code":"var _jsxFileName = \"/Users/davidhelmers/arrestpro/src/CPRTempoApp.js\",\n  _s = $RefreshSig$();\n// Play auditory warning for charge monitor\nconst playSpeech = useCallback(text => {\n  try {\n    if ('speechSynthesis' in window) {\n      const utterance = new SpeechSynthesisUtterance(text);\n      utterance.rate = 1.0;\n      utterance.pitch = 1.0;\n      utterance.volume = 1.0;\n      window.speechSynthesis.speak(utterance);\n    }\n  } catch (e) {\n    console.error(\"Speech synthesis failed:\", e);\n  }\n}, []);\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { HeartPulse, Timer, Clock, Syringe, Wind } from 'lucide-react';\nimport styles from './CPRTempoApp.module.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CPRTempoApp = () => {\n  _s();\n  // State variables\n  const [activeSection, setActiveSection] = useState(null);\n  const [seconds, setSeconds] = useState(0);\n  const [pulseCheckTime, setPulseCheckTime] = useState(120); // 2 minutes countdown\n  const [pauseTime, setPauseTime] = useState(10); // 10 second pause countdown\n  const [metronomeRunning, setMetronomeRunning] = useState(false);\n  const [ventilationActive, setVentilationActive] = useState(false);\n  const [isVentilating, setIsVentilating] = useState(false);\n  const [ventilationProgress, setVentilationProgress] = useState(100);\n  const [bpm] = useState(110); // Constant BPM of 110 (removed the ability to change)\n  const [ventilationRate, setVentilationRate] = useState(11); // Default ventilation rate\n  const [showChargeMonitor, setShowChargeMonitor] = useState(false);\n  const [epiActive, setEpiActive] = useState(false);\n  const [epiTime, setEpiTime] = useState(300); // 5 minutes countdown\n  const [clockStarted, setClockStarted] = useState(false);\n  const [startTime, setStartTime] = useState(null); // Track when the metronome was started\n\n  // Refs for safer interval handling\n  const audioContextRef = useRef(null);\n  const timerIntervalRef = useRef(null);\n  const pulseIntervalRef = useRef(null);\n  const ventilationIntervalRef = useRef(null);\n  const epiIntervalRef = useRef(null);\n  const clockIntervalRef = useRef(null);\n\n  // Create audio context safely\n  const createAudioContext = useCallback(() => {\n    if (!audioContextRef.current) {\n      try {\n        audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n      } catch (e) {\n        console.error(\"Failed to create audio context:\", e);\n      }\n    }\n    return audioContextRef.current;\n  }, []);\n\n  // Safely get current audio context\n  const getAudioContext = useCallback(() => {\n    return audioContextRef.current;\n  }, []);\n\n  // Start the main clock\n  const startClock = useCallback(() => {\n    // Clear any existing interval first\n    if (clockIntervalRef.current) {\n      clearInterval(clockIntervalRef.current);\n    }\n\n    // Create new interval\n    const interval = setInterval(() => {\n      setSeconds(prev => prev + 1);\n    }, 1000);\n\n    // Save reference and mark as started\n    clockIntervalRef.current = interval;\n    setClockStarted(true);\n  }, []);\n\n  // Reset the main clock\n  const resetClock = useCallback(() => {\n    setSeconds(0);\n    // Only start the clock if there's an active feature\n    if (!clockStarted && (activeSection || ventilationActive || epiActive)) {\n      startClock();\n    } else if (!activeSection && !ventilationActive && !epiActive) {\n      // If everything is inactive, just reset without starting\n      if (clockIntervalRef.current) {\n        clearInterval(clockIntervalRef.current);\n        clockIntervalRef.current = null;\n      }\n      setClockStarted(false);\n    }\n  }, [clockStarted, startClock, activeSection, ventilationActive, epiActive]);\n\n  // Toggle ventilation\n  const toggleVentilation = useCallback(() => {\n    setIsVentilating(prev => !prev);\n    setVentilationActive(prev => !prev);\n  }, []);\n\n  // Play metronome click with useCallback to avoid recreation on each render\n  const playMetronomeClick = useCallback(() => {\n    try {\n      // Create audio context if needed\n      const ctx = getAudioContext() || createAudioContext();\n      if (!ctx) return;\n\n      // Make sure context is running\n      if (ctx.state === 'suspended') {\n        ctx.resume();\n      }\n\n      // Create and play metronome sound\n      const oscillator = ctx.createOscillator();\n      oscillator.type = 'sine';\n      oscillator.frequency.value = 800;\n      oscillator.connect(ctx.destination);\n      oscillator.start();\n      oscillator.stop(ctx.currentTime + 0.05);\n    } catch (e) {\n      console.error(\"Error playing metronome sound:\", e);\n    }\n  }, [getAudioContext, createAudioContext]);\n\n  // Play ventilation sound with useCallback\n  const playVentilateSound = useCallback(() => {\n    try {\n      // Try speech synthesis first\n      if ('speechSynthesis' in window) {\n        try {\n          const utterance = new SpeechSynthesisUtterance(\"ventilate\");\n          utterance.rate = 1.0;\n          utterance.pitch = 1.0;\n          utterance.volume = 1.0;\n          window.speechSynthesis.speak(utterance);\n          return;\n        } catch (e) {\n          console.error(\"Speech synthesis failed:\", e);\n        }\n      }\n\n      // Fallback to audio tone\n      const ctx = getAudioContext() || createAudioContext();\n      if (!ctx) return;\n\n      // Make sure context is running\n      if (ctx.state === 'suspended') {\n        ctx.resume();\n      }\n\n      // Create and play ventilation sound\n      const oscillator = ctx.createOscillator();\n      const gainNode = ctx.createGain();\n      oscillator.connect(gainNode);\n      gainNode.connect(ctx.destination);\n      oscillator.type = 'sine';\n      oscillator.frequency.value = 400;\n      gainNode.gain.value = 0.6;\n      oscillator.start();\n      oscillator.stop(ctx.currentTime + 0.2);\n    } catch (e) {\n      console.error(\"Error playing ventilation sound:\", e);\n    }\n  }, [getAudioContext, createAudioContext]);\n\n  // Update metronome state based on activeSection\n  useEffect(() => {\n    if (activeSection === 'metronome' || activeSection === 'pulse+metronome') {\n      setMetronomeRunning(true);\n    } else {\n      setMetronomeRunning(false);\n      // Clear start time when metronome is turned off\n      if (!(activeSection === 'metronome' || activeSection === 'pulse+metronome')) {\n        setStartTime(null);\n      }\n    }\n\n    // Check if all features are inactive and reset/stop clock if needed\n    if (!activeSection && !ventilationActive && !epiActive && clockStarted) {\n      // Clear the clock interval to stop it\n      if (clockIntervalRef.current) {\n        clearInterval(clockIntervalRef.current);\n        clockIntervalRef.current = null;\n      }\n      // Reset the clock to 0\n      setSeconds(0);\n      setClockStarted(false);\n    }\n  }, [activeSection, ventilationActive, epiActive, clockStarted]);\n\n  // Metronome timer effect\n  useEffect(() => {\n    if (!metronomeRunning) return;\n\n    // Clear any existing timer\n    if (timerIntervalRef.current) {\n      clearInterval(timerIntervalRef.current);\n      timerIntervalRef.current = null;\n    }\n\n    // Safety check\n    if (bpm <= 0) return;\n\n    // Calculate interval and start metronome\n    const intervalTime = 60 / bpm * 1000;\n    timerIntervalRef.current = setInterval(playMetronomeClick, intervalTime);\n\n    // Play first beat immediately\n    playMetronomeClick();\n\n    // Cleanup function\n    return () => {\n      if (timerIntervalRef.current) {\n        clearInterval(timerIntervalRef.current);\n        timerIntervalRef.current = null;\n      }\n    };\n  }, [metronomeRunning, bpm, playMetronomeClick]);\n\n  // Ventilation timer effect\n  useEffect(() => {\n    if (!ventilationActive) return;\n\n    // Clear any existing ventilation timer\n    if (ventilationIntervalRef.current) {\n      clearInterval(ventilationIntervalRef.current);\n      ventilationIntervalRef.current = null;\n    }\n\n    // Safety check\n    if (ventilationRate <= 0) return;\n\n    // Calculate interval and start ventilation prompts\n    const intervalTime = 60 / ventilationRate * 1000;\n    ventilationIntervalRef.current = setInterval(playVentilateSound, intervalTime);\n\n    // Play first ventilation prompt immediately\n    playVentilateSound();\n\n    // Cleanup function\n    return () => {\n      if (ventilationIntervalRef.current) {\n        clearInterval(ventilationIntervalRef.current);\n        ventilationIntervalRef.current = null;\n      }\n    };\n  }, [ventilationActive, ventilationRate, playVentilateSound]);\n\n  // Epinephrine timer effect\n  useEffect(() => {\n    if (!epiActive) {\n      if (epiIntervalRef.current) {\n        clearInterval(epiIntervalRef.current);\n        epiIntervalRef.current = null;\n      }\n      return;\n    }\n\n    // Start countdown\n    epiIntervalRef.current = setInterval(() => {\n      setEpiTime(prevTime => {\n        if (prevTime <= 0) {\n          setEpiTime(300);\n          return 300;\n        }\n        return prevTime - 1;\n      });\n    }, 1000);\n\n    // Cleanup function\n    return () => {\n      if (epiIntervalRef.current) {\n        clearInterval(epiIntervalRef.current);\n        epiIntervalRef.current = null;\n      }\n    };\n  }, [epiActive]);\n\n  // Format seconds to MM:SS\n  const formatTime = totalSeconds => {\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  };\n\n  // Format time as 24-hour clock HH:MM\n  const formatClock = date => {\n    if (!date) return \"--:--\";\n    const hours = date.getHours().toString().padStart(2, '0');\n    const minutes = date.getMinutes().toString().padStart(2, '0');\n    return `${hours}:${minutes}`;\n  };\n\n  // Update current time every second\n  useEffect(() => {\n    const timeUpdateInterval = setInterval(() => {\n      // Force re-render to update the \"now\" clock\n      setSeconds(prev => {\n        if (clockStarted) return prev + 1;\n        return prev;\n      });\n    }, 1000);\n    return () => clearInterval(timeUpdateInterval);\n  }, [clockStarted]);\n\n  // Handle Metronome button click\n  const handleMetronomeClick = useCallback(() => {\n    // Initialize audio on first click\n    createAudioContext();\n\n    // Make sure clock is started\n    if (!clockStarted) {\n      startClock();\n    }\n\n    // Handle state toggling with composite states\n    if (activeSection === 'metronome' || activeSection === 'pulse+metronome') {\n      // Turn off metronome - preserve pulse if active\n      if (activeSection === 'pulse+metronome') {\n        setActiveSection('pulse');\n      } else {\n        setActiveSection(null);\n      }\n    } else {\n      // Turn on metronome - preserve pulse if active\n      if (activeSection === 'pulse') {\n        setActiveSection('pulse+metronome');\n      } else {\n        setActiveSection('metronome');\n        // Set start time when metronome is activated\n        setStartTime(new Date());\n      }\n    }\n  }, [activeSection, createAudioContext, clockStarted, startClock]);\n\n  // Handle Pulse check button click\n  const handlePulseCheckClick = useCallback(() => {\n    // Toggle pulse check state\n    if (activeSection === 'pulse' || activeSection === 'pulse+metronome') {\n      // Turning off pulse check - preserve other active states\n      if (activeSection === 'pulse+metronome') {\n        setActiveSection('metronome');\n      } else {\n        setActiveSection(null);\n      }\n\n      // Clear interval\n      if (pulseIntervalRef.current) {\n        clearInterval(pulseIntervalRef.current);\n        pulseIntervalRef.current = null;\n      }\n    } else {\n      // Turning on pulse check - preserve other active states\n      if (activeSection === 'metronome') {\n        setActiveSection('pulse+metronome');\n      } else {\n        setActiveSection('pulse');\n      }\n\n      // Reset countdown times\n      setPulseCheckTime(120);\n      setPauseTime(10);\n      setShowChargeMonitor(false);\n\n      // Start countdown\n      pulseIntervalRef.current = setInterval(() => {\n        setPulseCheckTime(prevTime => {\n          // Show charge monitor warning at 15 seconds and play audio\n          if (prevTime === 15) {\n            setShowChargeMonitor(true);\n            playSpeech(\"Charge monitor\");\n          }\n\n          // Countdown for last 5 seconds\n          if (prevTime <= 5 && prevTime > 0) {\n            playSpeech(prevTime.toString());\n            if (prevTime === 1) {\n              setTimeout(() => playSpeech(\"Stop compression\"), 1000);\n            }\n          }\n\n          // Handle timeout\n          if (prevTime === 0) {\n            // Start pause countdown\n            setPauseTime(pauseTime => {\n              if (pauseTime <= 1) {\n                // Auto-restart when pause countdown finishes\n                setPulseCheckTime(120);\n                setShowChargeMonitor(false);\n                return 10;\n              }\n              return pauseTime - 1;\n            });\n            return 0;\n          }\n\n          // Normal countdown\n          return prevTime - 1;\n        });\n      }, 1000);\n    }\n  }, [activeSection, playSpeech]);\n\n  // Handle Epinephrine button click\n  const handleEpinephrineClick = useCallback(() => {\n    // Toggle epinephrine state\n    setEpiActive(prev => {\n      if (prev) {\n        // If turning off, reset time\n        setEpiTime(300);\n      }\n      return !prev;\n    });\n  }, []);\n\n  // Cleanup all intervals on unmount\n  useEffect(() => {\n    return () => {\n      // Close audio context\n      if (audioContextRef.current) {\n        audioContextRef.current.close();\n      }\n\n      // Clear all intervals\n      [timerIntervalRef, pulseIntervalRef, ventilationIntervalRef, epiIntervalRef, clockIntervalRef].forEach(ref => {\n        if (ref && ref.current) {\n          clearInterval(ref.current);\n          ref.current = null;\n        }\n      });\n    };\n  }, []);\n\n  // Render the UI\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: styles.header,\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: styles.title,\n        children: \"ArrestPro\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.appContainer,\n      style: {\n        maxHeight: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        padding: '5px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.timerDisplay,\n        onClick: resetClock,\n        title: \"Click to reset timer\",\n        style: {\n          padding: '5px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.timerText,\n          children: formatTime(seconds)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.statusIndicators,\n          style: {\n            marginTop: '2px'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.statusContainer,\n            style: {\n              display: 'flex',\n              justifyContent: 'space-between',\n              width: '100%'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  fontWeight: 'bold',\n                  fontSize: '0.8rem'\n                },\n                children: \"Start: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 455,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: styles.clockDisplay,\n                style: {\n                  fontSize: '0.9rem'\n                },\n                children: formatClock(startTime)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 456,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 454,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  fontWeight: 'bold',\n                  fontSize: '0.8rem'\n                },\n                children: \"Now: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 459,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: styles.clockDisplay,\n                style: {\n                  fontSize: '0.9rem'\n                },\n                children: formatClock(new Date())\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 460,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 458,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.buttonGrid,\n        style: {\n          marginTop: '5px',\n          marginBottom: '5px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleMetronomeClick,\n          className: `${styles.button} ${activeSection === 'metronome' || activeSection === 'pulse+metronome' ? styles.metronomeButtonActive : styles.metronomeButton}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.buttonContent,\n            children: [/*#__PURE__*/_jsxDEV(Clock, {\n              className: styles.buttonIcon,\n              size: 24\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 478,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.buttonTextContainer,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.buttonTitle,\n                children: \"Metronome\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 480,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.buttonSubtext,\n                children: \"110 BPM\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 481,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 479,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 477,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleVentilation,\n          className: `${styles.button} ${ventilationActive ? styles.ventilationButtonActive : styles.ventilationButton}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.buttonContent,\n            children: [/*#__PURE__*/_jsxDEV(Wind, {\n              className: styles.buttonIcon,\n              size: 24\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 494,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.buttonTextContainer,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.buttonTitle,\n                children: \"Ventilation\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 496,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.buttonSubtext,\n                children: [ventilationRate, \" breaths/min\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 497,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 495,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePulseCheckClick,\n          className: `${styles.button} ${activeSection === 'pulse' || activeSection === 'pulse+metronome' ? styles.pulseButtonActive : styles.pulseButton}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.buttonContent,\n            children: [/*#__PURE__*/_jsxDEV(HeartPulse, {\n              className: styles.buttonIcon,\n              size: 24\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 512,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.buttonTextContainer,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.buttonTitle,\n                children: \"Pulse Check\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 514,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.buttonSubtext,\n                children: \"2-Minute Countdown\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 515,\n                columnNumber: 15\n              }, this), (activeSection === 'pulse' || activeSection === 'pulse+metronome') && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `${styles.countdownDisplay} ${showChargeMonitor ? styles.chargeMonitor : ''}`,\n                children: pulseCheckTime > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    children: Math.floor(pulseCheckTime / 60) + \":\" + (pulseCheckTime % 60).toString().padStart(2, '0')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 522,\n                    columnNumber: 23\n                  }, this), showChargeMonitor && /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: styles.chargeMonitor,\n                    children: \"CHARGE MONITOR\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 523,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: styles.pauseIndicator,\n                  children: [\"PAUSE \", pauseTime]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 526,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 517,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 513,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 511,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleEpinephrineClick,\n          className: `${styles.button} ${epiActive ? styles.epiButtonActive : styles.epiButton}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.buttonContent,\n            children: [/*#__PURE__*/_jsxDEV(Syringe, {\n              className: styles.buttonIcon,\n              size: 24\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 544,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.buttonTextContainer,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.buttonTitle,\n                children: \"Epinephrine\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 546,\n                columnNumber: 15\n              }, this), epiActive && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.countdownDisplay,\n                children: [Math.floor(epiTime / 60), \":\", (epiTime % 60).toString().padStart(2, '0')]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 548,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 545,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 543,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 7\n      }, this), ventilationActive && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.sliderContainer,\n        style: {\n          marginBottom: '5px',\n          padding: '5px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.sliderHeader,\n          style: {\n            marginBottom: '2px'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: styles.sliderLabel,\n            children: [\"Ventilation: \", ventilationRate, \" breaths/min\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 563,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 562,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"5\",\n          max: \"20\",\n          value: ventilationRate,\n          onChange: e => setVentilationRate(parseInt(e.target.value)),\n          className: `${styles.slider} ${styles.ventilationSlider}`,\n          style: {\n            height: '20px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.sliderTicks,\n          style: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            fontSize: '0.8rem'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 575,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"10\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 576,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"15\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 577,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"20\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 578,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 436,\n    columnNumber: 3\n  }, this);\n};\n_s(CPRTempoApp, \"aZL3RGjaquQLHmSngocWZJM3xDs=\");\n_c = CPRTempoApp;\nexport default CPRTempoApp;\nvar _c;\n$RefreshReg$(_c, \"CPRTempoApp\");","map":{"version":3,"names":["playSpeech","useCallback","text","window","utterance","SpeechSynthesisUtterance","rate","pitch","volume","speechSynthesis","speak","e","console","error","React","useState","useEffect","useRef","HeartPulse","Timer","Clock","Syringe","Wind","styles","jsxDEV","_jsxDEV","Fragment","_Fragment","CPRTempoApp","_s","activeSection","setActiveSection","seconds","setSeconds","pulseCheckTime","setPulseCheckTime","pauseTime","setPauseTime","metronomeRunning","setMetronomeRunning","ventilationActive","setVentilationActive","isVentilating","setIsVentilating","ventilationProgress","setVentilationProgress","bpm","ventilationRate","setVentilationRate","showChargeMonitor","setShowChargeMonitor","epiActive","setEpiActive","epiTime","setEpiTime","clockStarted","setClockStarted","startTime","setStartTime","audioContextRef","timerIntervalRef","pulseIntervalRef","ventilationIntervalRef","epiIntervalRef","clockIntervalRef","createAudioContext","current","AudioContext","webkitAudioContext","getAudioContext","startClock","clearInterval","interval","setInterval","prev","resetClock","toggleVentilation","playMetronomeClick","ctx","state","resume","oscillator","createOscillator","type","frequency","value","connect","destination","start","stop","currentTime","playVentilateSound","gainNode","createGain","gain","intervalTime","prevTime","formatTime","totalSeconds","minutes","Math","floor","toString","padStart","formatClock","date","hours","getHours","getMinutes","timeUpdateInterval","handleMetronomeClick","Date","handlePulseCheckClick","setTimeout","handleEpinephrineClick","close","forEach","ref","className","container","children","header","title","fileName","_jsxFileName","lineNumber","columnNumber","appContainer","style","maxHeight","display","flexDirection","padding","timerDisplay","onClick","timerText","statusIndicators","marginTop","statusContainer","justifyContent","width","fontWeight","fontSize","clockDisplay","buttonGrid","marginBottom","button","metronomeButtonActive","metronomeButton","buttonContent","buttonIcon","size","buttonTextContainer","buttonTitle","buttonSubtext","ventilationButtonActive","ventilationButton","pulseButtonActive","pulseButton","countdownDisplay","chargeMonitor","pauseIndicator","epiButtonActive","epiButton","sliderContainer","sliderHeader","sliderLabel","min","max","onChange","parseInt","target","slider","ventilationSlider","height","sliderTicks","_c","$RefreshReg$"],"sources":["/Users/davidhelmers/arrestpro/src/CPRTempoApp.js"],"sourcesContent":["// Play auditory warning for charge monitor\nconst playSpeech = useCallback((text) => {\n  try {\n    if ('speechSynthesis' in window) {\n      const utterance = new SpeechSynthesisUtterance(text);\n      utterance.rate = 1.0;\n      utterance.pitch = 1.0;\n      utterance.volume = 1.0;\n      window.speechSynthesis.speak(utterance);\n    }\n  } catch (e) {\n    console.error(\"Speech synthesis failed:\", e);\n  }\n}, []);import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { HeartPulse, Timer, Clock, Syringe, Wind } from 'lucide-react';\nimport styles from './CPRTempoApp.module.css';\n\nconst CPRTempoApp = () => {\n// State variables\nconst [activeSection, setActiveSection] = useState(null);\nconst [seconds, setSeconds] = useState(0);\nconst [pulseCheckTime, setPulseCheckTime] = useState(120); // 2 minutes countdown\nconst [pauseTime, setPauseTime] = useState(10); // 10 second pause countdown\nconst [metronomeRunning, setMetronomeRunning] = useState(false);\nconst [ventilationActive, setVentilationActive] = useState(false);\nconst [isVentilating, setIsVentilating] = useState(false);\nconst [ventilationProgress, setVentilationProgress] = useState(100);\nconst [bpm] = useState(110); // Constant BPM of 110 (removed the ability to change)\nconst [ventilationRate, setVentilationRate] = useState(11); // Default ventilation rate\nconst [showChargeMonitor, setShowChargeMonitor] = useState(false);\nconst [epiActive, setEpiActive] = useState(false);\nconst [epiTime, setEpiTime] = useState(300); // 5 minutes countdown\nconst [clockStarted, setClockStarted] = useState(false);\nconst [startTime, setStartTime] = useState(null); // Track when the metronome was started\n\n// Refs for safer interval handling\nconst audioContextRef = useRef(null);\nconst timerIntervalRef = useRef(null);\nconst pulseIntervalRef = useRef(null);\nconst ventilationIntervalRef = useRef(null);\nconst epiIntervalRef = useRef(null);\nconst clockIntervalRef = useRef(null);\n\n// Create audio context safely\nconst createAudioContext = useCallback(() => {\n  if (!audioContextRef.current) {\n    try {\n      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n    } catch (e) {\n      console.error(\"Failed to create audio context:\", e);\n    }\n  }\n  return audioContextRef.current;\n}, []);\n\n// Safely get current audio context\nconst getAudioContext = useCallback(() => {\n  return audioContextRef.current;\n}, []);\n\n// Start the main clock\nconst startClock = useCallback(() => {\n  // Clear any existing interval first\n  if (clockIntervalRef.current) {\n    clearInterval(clockIntervalRef.current);\n  }\n \n  // Create new interval\n  const interval = setInterval(() => {\n    setSeconds(prev => prev + 1);\n  }, 1000);\n \n  // Save reference and mark as started\n  clockIntervalRef.current = interval;\n  setClockStarted(true);\n}, []);\n\n// Reset the main clock\nconst resetClock = useCallback(() => {\n  setSeconds(0);\n  // Only start the clock if there's an active feature\n  if (!clockStarted && (activeSection || ventilationActive || epiActive)) {\n    startClock();\n  } else if (!activeSection && !ventilationActive && !epiActive) {\n    // If everything is inactive, just reset without starting\n    if (clockIntervalRef.current) {\n      clearInterval(clockIntervalRef.current);\n      clockIntervalRef.current = null;\n    }\n    setClockStarted(false);\n  }\n}, [clockStarted, startClock, activeSection, ventilationActive, epiActive]);\n\n// Toggle ventilation\nconst toggleVentilation = useCallback(() => {\n  setIsVentilating(prev => !prev);\n  setVentilationActive(prev => !prev);\n}, []);\n\n// Play metronome click with useCallback to avoid recreation on each render\nconst playMetronomeClick = useCallback(() => {\n  try {\n    // Create audio context if needed\n    const ctx = getAudioContext() || createAudioContext();\n    if (!ctx) return;\n   \n    // Make sure context is running\n    if (ctx.state === 'suspended') {\n      ctx.resume();\n    }\n   \n    // Create and play metronome sound\n    const oscillator = ctx.createOscillator();\n    oscillator.type = 'sine';\n    oscillator.frequency.value = 800;\n    oscillator.connect(ctx.destination);\n    oscillator.start();\n    oscillator.stop(ctx.currentTime + 0.05);\n  } catch (e) {\n    console.error(\"Error playing metronome sound:\", e);\n  }\n}, [getAudioContext, createAudioContext]);\n\n// Play ventilation sound with useCallback\nconst playVentilateSound = useCallback(() => {\n  try {\n    // Try speech synthesis first\n    if ('speechSynthesis' in window) {\n      try {\n        const utterance = new SpeechSynthesisUtterance(\"ventilate\");\n        utterance.rate = 1.0;\n        utterance.pitch = 1.0;\n        utterance.volume = 1.0;\n        window.speechSynthesis.speak(utterance);\n        return;\n      } catch (e) {\n        console.error(\"Speech synthesis failed:\", e);\n      }\n    }\n   \n    // Fallback to audio tone\n    const ctx = getAudioContext() || createAudioContext();\n    if (!ctx) return;\n   \n    // Make sure context is running\n    if (ctx.state === 'suspended') {\n      ctx.resume();\n    }\n   \n    // Create and play ventilation sound\n    const oscillator = ctx.createOscillator();\n    const gainNode = ctx.createGain();\n    oscillator.connect(gainNode);\n    gainNode.connect(ctx.destination);\n    oscillator.type = 'sine';\n    oscillator.frequency.value = 400;\n    gainNode.gain.value = 0.6;\n    oscillator.start();\n    oscillator.stop(ctx.currentTime + 0.2);\n  } catch (e) {\n    console.error(\"Error playing ventilation sound:\", e);\n  }\n}, [getAudioContext, createAudioContext]);\n\n// Update metronome state based on activeSection\nuseEffect(() => {\n  if (activeSection === 'metronome' || activeSection === 'pulse+metronome') {\n    setMetronomeRunning(true);\n  } else {\n    setMetronomeRunning(false);\n    // Clear start time when metronome is turned off\n    if (!(activeSection === 'metronome' || activeSection === 'pulse+metronome')) {\n      setStartTime(null);\n    }\n  }\n  \n  // Check if all features are inactive and reset/stop clock if needed\n  if (!activeSection && !ventilationActive && !epiActive && clockStarted) {\n    // Clear the clock interval to stop it\n    if (clockIntervalRef.current) {\n      clearInterval(clockIntervalRef.current);\n      clockIntervalRef.current = null;\n    }\n    // Reset the clock to 0\n    setSeconds(0);\n    setClockStarted(false);\n  }\n}, [activeSection, ventilationActive, epiActive, clockStarted]);\n\n// Metronome timer effect\nuseEffect(() => {\n  if (!metronomeRunning) return;\n \n  // Clear any existing timer\n  if (timerIntervalRef.current) {\n    clearInterval(timerIntervalRef.current);\n    timerIntervalRef.current = null;\n  }\n \n  // Safety check\n  if (bpm <= 0) return;\n \n  // Calculate interval and start metronome\n  const intervalTime = (60 / bpm) * 1000;\n  timerIntervalRef.current = setInterval(playMetronomeClick, intervalTime);\n \n  // Play first beat immediately\n  playMetronomeClick();\n \n  // Cleanup function\n  return () => {\n    if (timerIntervalRef.current) {\n      clearInterval(timerIntervalRef.current);\n      timerIntervalRef.current = null;\n    }\n  };\n}, [metronomeRunning, bpm, playMetronomeClick]);\n\n// Ventilation timer effect\nuseEffect(() => {\n  if (!ventilationActive) return;\n \n  // Clear any existing ventilation timer\n  if (ventilationIntervalRef.current) {\n    clearInterval(ventilationIntervalRef.current);\n    ventilationIntervalRef.current = null;\n  }\n \n  // Safety check\n  if (ventilationRate <= 0) return;\n  \n  // Calculate interval and start ventilation prompts\n  const intervalTime = (60 / ventilationRate) * 1000;\n  ventilationIntervalRef.current = setInterval(playVentilateSound, intervalTime);\n \n  // Play first ventilation prompt immediately\n  playVentilateSound();\n \n  // Cleanup function\n  return () => {\n    if (ventilationIntervalRef.current) {\n      clearInterval(ventilationIntervalRef.current);\n      ventilationIntervalRef.current = null;\n    }\n  };\n}, [ventilationActive, ventilationRate, playVentilateSound]);\n\n// Epinephrine timer effect\nuseEffect(() => {\n  if (!epiActive) {\n    if (epiIntervalRef.current) {\n      clearInterval(epiIntervalRef.current);\n      epiIntervalRef.current = null;\n    }\n    return;\n  }\n \n  // Start countdown\n  epiIntervalRef.current = setInterval(() => {\n    setEpiTime(prevTime => {\n      if (prevTime <= 0) {\n        setEpiTime(300);\n        return 300;\n      }\n      return prevTime - 1;\n    });\n  }, 1000);\n \n  // Cleanup function\n  return () => {\n    if (epiIntervalRef.current) {\n      clearInterval(epiIntervalRef.current);\n      epiIntervalRef.current = null;\n    }\n  };\n}, [epiActive]);\n\n// Format seconds to MM:SS\nconst formatTime = (totalSeconds) => {\n  const minutes = Math.floor(totalSeconds / 60);\n  const seconds = totalSeconds % 60;\n  return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n};\n\n// Format time as 24-hour clock HH:MM\nconst formatClock = (date) => {\n  if (!date) return \"--:--\";\n  const hours = date.getHours().toString().padStart(2, '0');\n  const minutes = date.getMinutes().toString().padStart(2, '0');\n  return `${hours}:${minutes}`;\n};\n\n// Update current time every second\nuseEffect(() => {\n  const timeUpdateInterval = setInterval(() => {\n    // Force re-render to update the \"now\" clock\n    setSeconds(prev => {\n      if (clockStarted) return prev + 1;\n      return prev;\n    });\n  }, 1000);\n  \n  return () => clearInterval(timeUpdateInterval);\n}, [clockStarted]);\n\n// Handle Metronome button click\nconst handleMetronomeClick = useCallback(() => {\n  // Initialize audio on first click\n  createAudioContext();\n \n  // Make sure clock is started\n  if (!clockStarted) {\n    startClock();\n  }\n \n  // Handle state toggling with composite states\n  if (activeSection === 'metronome' || activeSection === 'pulse+metronome') {\n    // Turn off metronome - preserve pulse if active\n    if (activeSection === 'pulse+metronome') {\n      setActiveSection('pulse');\n    } else {\n      setActiveSection(null);\n    }\n  } else {\n    // Turn on metronome - preserve pulse if active\n    if (activeSection === 'pulse') {\n      setActiveSection('pulse+metronome');\n    } else {\n      setActiveSection('metronome');\n      // Set start time when metronome is activated\n      setStartTime(new Date());\n    }\n  }\n}, [activeSection, createAudioContext, clockStarted, startClock]);\n\n// Handle Pulse check button click\nconst handlePulseCheckClick = useCallback(() => {\n  // Toggle pulse check state\n  if (activeSection === 'pulse' || activeSection === 'pulse+metronome') {\n    // Turning off pulse check - preserve other active states\n    if (activeSection === 'pulse+metronome') {\n      setActiveSection('metronome');\n    } else {\n      setActiveSection(null);\n    }\n   \n    // Clear interval\n    if (pulseIntervalRef.current) {\n      clearInterval(pulseIntervalRef.current);\n      pulseIntervalRef.current = null;\n    }\n  } else {\n    // Turning on pulse check - preserve other active states\n    if (activeSection === 'metronome') {\n      setActiveSection('pulse+metronome');\n    } else {\n      setActiveSection('pulse');\n    }\n   \n    // Reset countdown times\n    setPulseCheckTime(120);\n    setPauseTime(10);\n    setShowChargeMonitor(false);\n   \n    // Start countdown\n    pulseIntervalRef.current = setInterval(() => {\n      setPulseCheckTime(prevTime => {\n        // Show charge monitor warning at 15 seconds and play audio\n        if (prevTime === 15) {\n          setShowChargeMonitor(true);\n          playSpeech(\"Charge monitor\");\n        }\n        \n        // Countdown for last 5 seconds\n        if (prevTime <= 5 && prevTime > 0) {\n          playSpeech(prevTime.toString());\n          if (prevTime === 1) {\n            setTimeout(() => playSpeech(\"Stop compression\"), 1000);\n          }\n        }\n       \n        // Handle timeout\n        if (prevTime === 0) {\n          // Start pause countdown\n          setPauseTime(pauseTime => {\n            if (pauseTime <= 1) {\n              // Auto-restart when pause countdown finishes\n              setPulseCheckTime(120);\n              setShowChargeMonitor(false);\n              return 10;\n            }\n            return pauseTime - 1;\n          });\n          return 0;\n        }\n       \n        // Normal countdown\n        return prevTime - 1;\n      });\n    }, 1000);\n  }\n}, [activeSection, playSpeech]);\n\n// Handle Epinephrine button click\nconst handleEpinephrineClick = useCallback(() => {\n  // Toggle epinephrine state\n  setEpiActive(prev => {\n    if (prev) {\n      // If turning off, reset time\n      setEpiTime(300);\n    }\n    return !prev;\n  });\n}, []);\n\n// Cleanup all intervals on unmount\nuseEffect(() => {\n  return () => {\n    // Close audio context\n    if (audioContextRef.current) {\n      audioContextRef.current.close();\n    }\n   \n    // Clear all intervals\n    [timerIntervalRef, pulseIntervalRef, ventilationIntervalRef, epiIntervalRef, clockIntervalRef].forEach(ref => {\n      if (ref && ref.current) {\n        clearInterval(ref.current);\n        ref.current = null;\n      }\n    });\n  };\n}, []);\n\n// Render the UI\nreturn (\n  <div className={styles.container}>\n    <header className={styles.header}>\n      <h1 className={styles.title}>ArrestPro</h1>\n    </header>\n\n    <div className={styles.appContainer} style={{ maxHeight: '100vh', display: 'flex', flexDirection: 'column', padding: '5px' }}>\n      {/* Timer Display with click to reset */}\n      <div\n        className={styles.timerDisplay}\n        onClick={resetClock}\n        title=\"Click to reset timer\"\n        style={{ padding: '5px' }}\n      >\n        <div className={styles.timerText}>\n          {formatTime(seconds)}\n        </div>\n        <div className={styles.statusIndicators} style={{ marginTop: '2px' }}>\n          <div className={styles.statusContainer} style={{ display: 'flex', justifyContent: 'space-between', width: '100%' }}>\n            <div>\n              <span style={{ fontWeight: 'bold', fontSize: '0.8rem' }}>Start: </span>\n              <span className={styles.clockDisplay} style={{ fontSize: '0.9rem' }}>{formatClock(startTime)}</span>\n            </div>\n            <div>\n              <span style={{ fontWeight: 'bold', fontSize: '0.8rem' }}>Now: </span>\n              <span className={styles.clockDisplay} style={{ fontSize: '0.9rem' }}>{formatClock(new Date())}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Buttons */}\n      <div className={styles.buttonGrid} style={{ marginTop: '5px', marginBottom: '5px' }}>\n        {/* Metronome Button */}\n        <button\n          onClick={handleMetronomeClick}\n          className={`${styles.button} ${\n            (activeSection === 'metronome' || activeSection === 'pulse+metronome') \n              ? styles.metronomeButtonActive \n              : styles.metronomeButton\n          }`}\n        >\n          <div className={styles.buttonContent}>\n            <Clock className={styles.buttonIcon} size={24} />\n            <div className={styles.buttonTextContainer}>\n              <div className={styles.buttonTitle}>Metronome</div>\n              <div className={styles.buttonSubtext}>110 BPM</div>\n            </div>\n          </div>\n        </button>\n       \n        {/* Ventilation Button - Changed to use Wind icon */}\n        <button\n          onClick={toggleVentilation}\n          className={`${styles.button} ${\n            ventilationActive ? styles.ventilationButtonActive : styles.ventilationButton\n          }`}\n        >\n          <div className={styles.buttonContent}>\n            <Wind className={styles.buttonIcon} size={24} />\n            <div className={styles.buttonTextContainer}>\n              <div className={styles.buttonTitle}>Ventilation</div>\n              <div className={styles.buttonSubtext}>{ventilationRate} breaths/min</div>\n            </div>\n          </div>\n        </button>\n       \n        {/* Pulse Check Button */}\n        <button\n          onClick={handlePulseCheckClick}\n          className={`${styles.button} ${\n            (activeSection === 'pulse' || activeSection === 'pulse+metronome')\n              ? styles.pulseButtonActive \n              : styles.pulseButton\n          }`}\n        >\n          <div className={styles.buttonContent}>\n            <HeartPulse className={styles.buttonIcon} size={24} />\n            <div className={styles.buttonTextContainer}>\n              <div className={styles.buttonTitle}>Pulse Check</div>\n              <div className={styles.buttonSubtext}>2-Minute Countdown</div>\n              {(activeSection === 'pulse' || activeSection === 'pulse+metronome') && (\n                <div className={`${styles.countdownDisplay} ${\n                  showChargeMonitor ? styles.chargeMonitor : ''\n                }`}>\n                  {pulseCheckTime > 0 ? (\n                    <>\n                      <div>{Math.floor(pulseCheckTime / 60) + \":\" + (pulseCheckTime % 60).toString().padStart(2, '0')}</div>\n                      {showChargeMonitor && <div className={styles.chargeMonitor}>CHARGE MONITOR</div>}\n                    </>\n                  ) : (\n                    <div className={styles.pauseIndicator}>\n                      PAUSE {pauseTime}\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n        </button>\n       \n        {/* Epinephrine Button */}\n        <button\n          onClick={handleEpinephrineClick}\n          className={`${styles.button} ${\n            epiActive ? styles.epiButtonActive : styles.epiButton\n          }`}\n        >\n          <div className={styles.buttonContent}>\n            <Syringe className={styles.buttonIcon} size={24} />\n            <div className={styles.buttonTextContainer}>\n              <div className={styles.buttonTitle}>Epinephrine</div>\n              {epiActive && (\n                <div className={styles.countdownDisplay}>\n                  {Math.floor(epiTime / 60)}:{(epiTime % 60).toString().padStart(2, '0')}\n                </div>\n              )}\n            </div>\n          </div>\n        </button>\n      </div>\n\n      {/* Removed metronome slider - as requested */}\n     \n      {/* Ventilation Rate Control - kept this slider but made more compact */}\n      {ventilationActive && (\n        <div className={styles.sliderContainer} style={{ marginBottom: '5px', padding: '5px' }}>\n          <div className={styles.sliderHeader} style={{ marginBottom: '2px' }}>\n            <span className={styles.sliderLabel}>Ventilation: {ventilationRate} breaths/min</span>\n          </div>\n          <input\n            type=\"range\"\n            min=\"5\"\n            max=\"20\"\n            value={ventilationRate}\n            onChange={(e) => setVentilationRate(parseInt(e.target.value))}\n            className={`${styles.slider} ${styles.ventilationSlider}`}\n            style={{ height: '20px' }}\n          />\n          <div className={styles.sliderTicks} style={{ display: 'flex', justifyContent: 'space-between', fontSize: '0.8rem' }}>\n            <span>5</span>\n            <span>10</span>\n            <span>15</span>\n            <span>20</span>\n          </div>\n        </div>\n      )}\n    </div>\n  </div>\n);\n};\n\nexport default CPRTempoApp;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}